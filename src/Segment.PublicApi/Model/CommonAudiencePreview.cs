/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Fields common to an audience preview regardless of the status.
    /// </summary>
    [DataContract(Name = "CommonAudiencePreview")]
    public partial class CommonAudiencePreview : IEquatable<CommonAudiencePreview>, IValidatableObject
    {
        /// <summary>
        /// The audience type of the preview.
        /// </summary>
        /// <value>The audience type of the preview.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudienceTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 1,

            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 2
        }


        /// <summary>
        /// The audience type of the preview.
        /// </summary>
        /// <value>The audience type of the preview.</value>
        [DataMember(Name = "audienceType", IsRequired = true, EmitDefaultValue = true)]
        public AudienceTypeEnum AudienceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAudiencePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonAudiencePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonAudiencePreview" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for tracking and retrieving results of an audience preview. (required).</param>
        /// <param name="audienceType">The audience type of the preview. (required).</param>
        /// <param name="definition">definition (required).</param>
        /// <param name="options">options (required).</param>
        public CommonAudiencePreview(string id = default(string), AudienceTypeEnum audienceType = default(AudienceTypeEnum), AudienceDefinitionWithoutType definition = default(AudienceDefinitionWithoutType), AudienceOptionsWithLookback options = default(AudienceOptionsWithLookback))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for CommonAudiencePreview and cannot be null");
            }
            this.Id = id;
            this.AudienceType = audienceType;
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new ArgumentNullException("definition is a required property for CommonAudiencePreview and cannot be null");
            }
            this.Definition = definition;
            // to ensure "options" is required (not null)
            if (options == null)
            {
                throw new ArgumentNullException("options is a required property for CommonAudiencePreview and cannot be null");
            }
            this.Options = options;
        }

        /// <summary>
        /// Unique identifier for tracking and retrieving results of an audience preview.
        /// </summary>
        /// <value>Unique identifier for tracking and retrieving results of an audience preview.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", IsRequired = true, EmitDefaultValue = true)]
        public AudienceDefinitionWithoutType Definition { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = true)]
        public AudienceOptionsWithLookback Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonAudiencePreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudienceType: ").Append(AudienceType).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonAudiencePreview);
        }

        /// <summary>
        /// Returns true if CommonAudiencePreview instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonAudiencePreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonAudiencePreview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AudienceType == input.AudienceType ||
                    this.AudienceType.Equals(input.AudienceType)
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AudienceType.GetHashCode();
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
