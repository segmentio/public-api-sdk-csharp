/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.4
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to create an audience preview.
    /// </summary>
    [DataContract(Name = "CreateAudiencePreviewBetaInput")]
    public partial class CreateAudiencePreviewBetaInput : IEquatable<CreateAudiencePreviewBetaInput>, IValidatableObject
    {
        /// <summary>
        /// Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudienceTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 1,

            /// <summary>
            /// Enum LINKED for value: LINKED
            /// </summary>
            [EnumMember(Value = "LINKED")]
            LINKED = 2,

            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 3
        }


        /// <summary>
        /// Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [DataMember(Name = "audienceType", IsRequired = true, EmitDefaultValue = true)]
        public AudienceTypeEnum AudienceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudiencePreviewBetaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAudiencePreviewBetaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudiencePreviewBetaInput" /> class.
        /// </summary>
        /// <param name="definition">definition (required).</param>
        /// <param name="audienceType">Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED. (required).</param>
        /// <param name="options">options.</param>
        public CreateAudiencePreviewBetaInput(AudienceDefinition definition = default(AudienceDefinition), AudienceTypeEnum audienceType = default(AudienceTypeEnum), CreateAudiencePreviewOptions options = default(CreateAudiencePreviewOptions))
        {
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new ArgumentNullException("definition is a required property for CreateAudiencePreviewBetaInput and cannot be null");
            }
            this.Definition = definition;
            this.AudienceType = audienceType;
            this.Options = options;
        }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", IsRequired = true, EmitDefaultValue = true)]
        public AudienceDefinition Definition { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public CreateAudiencePreviewOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAudiencePreviewBetaInput {\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  AudienceType: ").Append(AudienceType).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAudiencePreviewBetaInput);
        }

        /// <summary>
        /// Returns true if CreateAudiencePreviewBetaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAudiencePreviewBetaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudiencePreviewBetaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.AudienceType == input.AudienceType ||
                    this.AudienceType.Equals(input.AudienceType)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AudienceType.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
