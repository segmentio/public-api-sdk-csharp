/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.14.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to create an activation.
    /// </summary>
    [DataContract(Name = "AddActivationToAudienceAlphaInput")]
    public partial class AddActivationToAudienceAlphaInput : IEquatable<AddActivationToAudienceAlphaInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActivationToAudienceAlphaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddActivationToAudienceAlphaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActivationToAudienceAlphaInput" /> class.
        /// </summary>
        /// <param name="versionSchema">Version Schema. (required).</param>
        /// <param name="workspaceId">The id of the Workspace the audience exists within. (required).</param>
        /// <param name="destinationId">The Destination id. (required).</param>
        /// <param name="enabled">Whether the event emitter should be created in an enabled state..</param>
        /// <param name="hasEnabledResync">Whether the event emitter should be created with the resync option..</param>
        /// <param name="emitEntityContext">Whether the event emitter should emit events when the profile changes or when any enriched entity values changes. Only valid for identify events..</param>
        /// <param name="eventEmitter">Configuration settings for the event emitter to be created. (required).</param>
        /// <param name="subscription">Subscription info to connect the event emitter to a Destination attached to the audience. (required).</param>
        public AddActivationToAudienceAlphaInput(string versionSchema = default(string), string workspaceId = default(string), string destinationId = default(string), bool enabled = default(bool), bool hasEnabledResync = default(bool), string emitEntityContext = default(string), Object eventEmitter = default(Object), Object subscription = default(Object))
        {
            // to ensure "versionSchema" is required (not null)
            if (versionSchema == null)
            {
                throw new ArgumentNullException("versionSchema is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.VersionSchema = versionSchema;
            // to ensure "workspaceId" is required (not null)
            if (workspaceId == null)
            {
                throw new ArgumentNullException("workspaceId is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.WorkspaceId = workspaceId;
            // to ensure "destinationId" is required (not null)
            if (destinationId == null)
            {
                throw new ArgumentNullException("destinationId is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.DestinationId = destinationId;
            // to ensure "eventEmitter" is required (not null)
            if (eventEmitter == null)
            {
                throw new ArgumentNullException("eventEmitter is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.EventEmitter = eventEmitter;
            // to ensure "subscription" is required (not null)
            if (subscription == null)
            {
                throw new ArgumentNullException("subscription is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.Subscription = subscription;
            this.Enabled = enabled;
            this.HasEnabledResync = hasEnabledResync;
            this.EmitEntityContext = emitEntityContext;
        }

        /// <summary>
        /// Version Schema.
        /// </summary>
        /// <value>Version Schema.</value>
        [DataMember(Name = "versionSchema", IsRequired = true, EmitDefaultValue = true)]
        public string VersionSchema { get; set; }

        /// <summary>
        /// The id of the Workspace the audience exists within.
        /// </summary>
        /// <value>The id of the Workspace the audience exists within.</value>
        [DataMember(Name = "workspaceId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// The Destination id.
        /// </summary>
        /// <value>The Destination id.</value>
        [DataMember(Name = "destinationId", IsRequired = true, EmitDefaultValue = true)]
        public string DestinationId { get; set; }

        /// <summary>
        /// Whether the event emitter should be created in an enabled state.
        /// </summary>
        /// <value>Whether the event emitter should be created in an enabled state.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Whether the event emitter should be created with the resync option.
        /// </summary>
        /// <value>Whether the event emitter should be created with the resync option.</value>
        [DataMember(Name = "hasEnabledResync", EmitDefaultValue = true)]
        public bool HasEnabledResync { get; set; }

        /// <summary>
        /// Whether the event emitter should emit events when the profile changes or when any enriched entity values changes. Only valid for identify events.
        /// </summary>
        /// <value>Whether the event emitter should emit events when the profile changes or when any enriched entity values changes. Only valid for identify events.</value>
        [DataMember(Name = "emitEntityContext", EmitDefaultValue = false)]
        public string EmitEntityContext { get; set; }

        /// <summary>
        /// Configuration settings for the event emitter to be created.
        /// </summary>
        /// <value>Configuration settings for the event emitter to be created.</value>
        [DataMember(Name = "eventEmitter", IsRequired = true, EmitDefaultValue = true)]
        public Object EventEmitter { get; set; }

        /// <summary>
        /// Subscription info to connect the event emitter to a Destination attached to the audience.
        /// </summary>
        /// <value>Subscription info to connect the event emitter to a Destination attached to the audience.</value>
        [DataMember(Name = "subscription", IsRequired = true, EmitDefaultValue = true)]
        public Object Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddActivationToAudienceAlphaInput {\n");
            sb.Append("  VersionSchema: ").Append(VersionSchema).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  DestinationId: ").Append(DestinationId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  HasEnabledResync: ").Append(HasEnabledResync).Append("\n");
            sb.Append("  EmitEntityContext: ").Append(EmitEntityContext).Append("\n");
            sb.Append("  EventEmitter: ").Append(EventEmitter).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddActivationToAudienceAlphaInput);
        }

        /// <summary>
        /// Returns true if AddActivationToAudienceAlphaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddActivationToAudienceAlphaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddActivationToAudienceAlphaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VersionSchema == input.VersionSchema ||
                    (this.VersionSchema != null &&
                    this.VersionSchema.Equals(input.VersionSchema))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.DestinationId == input.DestinationId ||
                    (this.DestinationId != null &&
                    this.DestinationId.Equals(input.DestinationId))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.HasEnabledResync == input.HasEnabledResync ||
                    this.HasEnabledResync.Equals(input.HasEnabledResync)
                ) && 
                (
                    this.EmitEntityContext == input.EmitEntityContext ||
                    (this.EmitEntityContext != null &&
                    this.EmitEntityContext.Equals(input.EmitEntityContext))
                ) && 
                (
                    this.EventEmitter == input.EventEmitter ||
                    (this.EventEmitter != null &&
                    this.EventEmitter.Equals(input.EventEmitter))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionSchema != null)
                {
                    hashCode = (hashCode * 59) + this.VersionSchema.GetHashCode();
                }
                if (this.WorkspaceId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                }
                if (this.DestinationId != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.HasEnabledResync.GetHashCode();
                if (this.EmitEntityContext != null)
                {
                    hashCode = (hashCode * 59) + this.EmitEntityContext.GetHashCode();
                }
                if (this.EventEmitter != null)
                {
                    hashCode = (hashCode * 59) + this.EventEmitter.GetHashCode();
                }
                if (this.Subscription != null)
                {
                    hashCode = (hashCode * 59) + this.Subscription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
