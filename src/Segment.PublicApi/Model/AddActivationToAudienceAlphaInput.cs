/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 60.0.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to create an activation.
    /// </summary>
    [DataContract(Name = "AddActivationToAudienceAlphaInput")]
    public partial class AddActivationToAudienceAlphaInput : IEquatable<AddActivationToAudienceAlphaInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActivationToAudienceAlphaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddActivationToAudienceAlphaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddActivationToAudienceAlphaInput" /> class.
        /// </summary>
        /// <param name="enabled">Whether the event emitter should be created in an enabled state. Will trigger an audience run if enabled..</param>
        /// <param name="performResync">Whether to perform a resync after creation of the activation. (required).</param>
        /// <param name="activationType">Type of activation trigger. (required).</param>
        /// <param name="activationName">Name of the activation. (required).</param>
        /// <param name="personalization">personalization (required).</param>
        /// <param name="destinationMapping">destinationMapping (required).</param>
        public AddActivationToAudienceAlphaInput(bool enabled = default(bool), bool performResync = default(bool), string activationType = default(string), string activationName = default(string), PersonalizationInput personalization = default(PersonalizationInput), DestinationSubscriptionConfiguration destinationMapping = default(DestinationSubscriptionConfiguration))
        {
            this.PerformResync = performResync;
            // to ensure "activationType" is required (not null)
            if (activationType == null)
            {
                throw new ArgumentNullException("activationType is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.ActivationType = activationType;
            // to ensure "activationName" is required (not null)
            if (activationName == null)
            {
                throw new ArgumentNullException("activationName is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.ActivationName = activationName;
            // to ensure "personalization" is required (not null)
            if (personalization == null)
            {
                throw new ArgumentNullException("personalization is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.Personalization = personalization;
            // to ensure "destinationMapping" is required (not null)
            if (destinationMapping == null)
            {
                throw new ArgumentNullException("destinationMapping is a required property for AddActivationToAudienceAlphaInput and cannot be null");
            }
            this.DestinationMapping = destinationMapping;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Whether the event emitter should be created in an enabled state. Will trigger an audience run if enabled.
        /// </summary>
        /// <value>Whether the event emitter should be created in an enabled state. Will trigger an audience run if enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Whether to perform a resync after creation of the activation.
        /// </summary>
        /// <value>Whether to perform a resync after creation of the activation.</value>
        [DataMember(Name = "performResync", IsRequired = true, EmitDefaultValue = true)]
        public bool PerformResync { get; set; }

        /// <summary>
        /// Type of activation trigger.
        /// </summary>
        /// <value>Type of activation trigger.</value>
        [DataMember(Name = "activationType", IsRequired = true, EmitDefaultValue = true)]
        public string ActivationType { get; set; }

        /// <summary>
        /// Name of the activation.
        /// </summary>
        /// <value>Name of the activation.</value>
        [DataMember(Name = "activationName", IsRequired = true, EmitDefaultValue = true)]
        public string ActivationName { get; set; }

        /// <summary>
        /// Gets or Sets Personalization
        /// </summary>
        [DataMember(Name = "personalization", IsRequired = true, EmitDefaultValue = true)]
        public PersonalizationInput Personalization { get; set; }

        /// <summary>
        /// Gets or Sets DestinationMapping
        /// </summary>
        [DataMember(Name = "destinationMapping", IsRequired = true, EmitDefaultValue = true)]
        public DestinationSubscriptionConfiguration DestinationMapping { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddActivationToAudienceAlphaInput {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  PerformResync: ").Append(PerformResync).Append("\n");
            sb.Append("  ActivationType: ").Append(ActivationType).Append("\n");
            sb.Append("  ActivationName: ").Append(ActivationName).Append("\n");
            sb.Append("  Personalization: ").Append(Personalization).Append("\n");
            sb.Append("  DestinationMapping: ").Append(DestinationMapping).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddActivationToAudienceAlphaInput);
        }

        /// <summary>
        /// Returns true if AddActivationToAudienceAlphaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddActivationToAudienceAlphaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddActivationToAudienceAlphaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.PerformResync == input.PerformResync ||
                    this.PerformResync.Equals(input.PerformResync)
                ) && 
                (
                    this.ActivationType == input.ActivationType ||
                    (this.ActivationType != null &&
                    this.ActivationType.Equals(input.ActivationType))
                ) && 
                (
                    this.ActivationName == input.ActivationName ||
                    (this.ActivationName != null &&
                    this.ActivationName.Equals(input.ActivationName))
                ) && 
                (
                    this.Personalization == input.Personalization ||
                    (this.Personalization != null &&
                    this.Personalization.Equals(input.Personalization))
                ) && 
                (
                    this.DestinationMapping == input.DestinationMapping ||
                    (this.DestinationMapping != null &&
                    this.DestinationMapping.Equals(input.DestinationMapping))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.PerformResync.GetHashCode();
                if (this.ActivationType != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationType.GetHashCode();
                }
                if (this.ActivationName != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationName.GetHashCode();
                }
                if (this.Personalization != null)
                {
                    hashCode = (hashCode * 59) + this.Personalization.GetHashCode();
                }
                if (this.DestinationMapping != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationMapping.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
