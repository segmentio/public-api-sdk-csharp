/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 60.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// An audience preview.
    /// </summary>
    [DataContract(Name = "AudiencePreview")]
    public partial class AudiencePreview : IEquatable<AudiencePreview>, IValidatableObject
    {
        /// <summary>
        /// The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AudienceTypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 1,

            /// <summary>
            /// Enum LINKED for value: LINKED
            /// </summary>
            [EnumMember(Value = "LINKED")]
            LINKED = 2,

            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 3
        }


        /// <summary>
        /// The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [DataMember(Name = "audienceType", IsRequired = true, EmitDefaultValue = true)]
        public AudienceTypeEnum AudienceType { get; set; }
        /// <summary>
        /// Status for the audience preview.
        /// </summary>
        /// <value>Status for the audience preview.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum COMPLETED for value: COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETED = 1,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 2,

            /// <summary>
            /// Enum RUNNING for value: RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNING = 3
        }


        /// <summary>
        /// Status for the audience preview.
        /// </summary>
        /// <value>Status for the audience preview.</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudiencePreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreview" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for tracking and retrieving results of an audience preview. (required).</param>
        /// <param name="audienceType">The audience type of the preview.  Possible values: USERS, ACCOUNTS, LINKED. (required).</param>
        /// <param name="definition">definition (required).</param>
        /// <param name="options">options (required).</param>
        /// <param name="status">Status for the audience preview. (required).</param>
        /// <param name="results">Sampled result membership for the audience preview. Only has a value if the status is &#39;COMPLETED&#39;..</param>
        /// <param name="size">size.</param>
        /// <param name="failureReason">Explanation of why the audience preview failed. Only has a value if status is &#39;FAILED&#39;..</param>
        public AudiencePreview(string id = default(string), AudienceTypeEnum audienceType = default(AudienceTypeEnum), AudienceDefinition definition = default(AudienceDefinition), ReadAudiencePreviewOptions options = default(ReadAudiencePreviewOptions), StatusEnum status = default(StatusEnum), List<AudiencePreviewResult> results = default(List<AudiencePreviewResult>), AudienceSize size = default(AudienceSize), string failureReason = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AudiencePreview and cannot be null");
            }
            this.Id = id;
            this.AudienceType = audienceType;
            // to ensure "definition" is required (not null)
            if (definition == null)
            {
                throw new ArgumentNullException("definition is a required property for AudiencePreview and cannot be null");
            }
            this.Definition = definition;
            // to ensure "options" is required (not null)
            if (options == null)
            {
                throw new ArgumentNullException("options is a required property for AudiencePreview and cannot be null");
            }
            this.Options = options;
            this.Status = status;
            this.Results = results;
            this.Size = size;
            this.FailureReason = failureReason;
        }

        /// <summary>
        /// Unique identifier for tracking and retrieving results of an audience preview.
        /// </summary>
        /// <value>Unique identifier for tracking and retrieving results of an audience preview.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Definition
        /// </summary>
        [DataMember(Name = "definition", IsRequired = true, EmitDefaultValue = true)]
        public AudienceDefinition Definition { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", IsRequired = true, EmitDefaultValue = true)]
        public ReadAudiencePreviewOptions Options { get; set; }

        /// <summary>
        /// Sampled result membership for the audience preview. Only has a value if the status is &#39;COMPLETED&#39;.
        /// </summary>
        /// <value>Sampled result membership for the audience preview. Only has a value if the status is &#39;COMPLETED&#39;.</value>
        [DataMember(Name = "results", EmitDefaultValue = false)]
        public List<AudiencePreviewResult> Results { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public AudienceSize Size { get; set; }

        /// <summary>
        /// Explanation of why the audience preview failed. Only has a value if status is &#39;FAILED&#39;.
        /// </summary>
        /// <value>Explanation of why the audience preview failed. Only has a value if status is &#39;FAILED&#39;.</value>
        [DataMember(Name = "failureReason", EmitDefaultValue = false)]
        public string FailureReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudiencePreview {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AudienceType: ").Append(AudienceType).Append("\n");
            sb.Append("  Definition: ").Append(Definition).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  FailureReason: ").Append(FailureReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudiencePreview);
        }

        /// <summary>
        /// Returns true if AudiencePreview instances are equal
        /// </summary>
        /// <param name="input">Instance of AudiencePreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudiencePreview input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AudienceType == input.AudienceType ||
                    this.AudienceType.Equals(input.AudienceType)
                ) && 
                (
                    this.Definition == input.Definition ||
                    (this.Definition != null &&
                    this.Definition.Equals(input.Definition))
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.FailureReason == input.FailureReason ||
                    (this.FailureReason != null &&
                    this.FailureReason.Equals(input.FailureReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.AudienceType.GetHashCode();
                if (this.Definition != null)
                {
                    hashCode = (hashCode * 59) + this.Definition.GetHashCode();
                }
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                if (this.FailureReason != null)
                {
                    hashCode = (hashCode * 59) + this.FailureReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
