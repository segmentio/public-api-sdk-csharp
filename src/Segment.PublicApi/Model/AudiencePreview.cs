/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Audience preview that can be in one of the three states: completed, running, or failed.
    /// </summary>
    [JsonConverter(typeof(AudiencePreviewJsonConverter))]
    [DataContract(Name = "AudiencePreview")]
    public partial class AudiencePreview : AbstractOpenAPISchema, IEquatable<AudiencePreview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreview" /> class
        /// with the <see cref="AudiencePreviewAnyOf" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AudiencePreviewAnyOf.</param>
        public AudiencePreview(AudiencePreviewAnyOf actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreview" /> class
        /// with the <see cref="AudiencePreviewAnyOf1" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AudiencePreviewAnyOf1.</param>
        public AudiencePreview(AudiencePreviewAnyOf1 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreview" /> class
        /// with the <see cref="AudiencePreviewAnyOf2" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AudiencePreviewAnyOf2.</param>
        public AudiencePreview(AudiencePreviewAnyOf2 actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "anyOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AudiencePreviewAnyOf))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AudiencePreviewAnyOf1))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(AudiencePreviewAnyOf2))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AudiencePreviewAnyOf, AudiencePreviewAnyOf1, AudiencePreviewAnyOf2");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `AudiencePreviewAnyOf`. If the actual instance is not `AudiencePreviewAnyOf`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AudiencePreviewAnyOf</returns>
        public AudiencePreviewAnyOf GetAudiencePreviewAnyOf()
        {
            return (AudiencePreviewAnyOf)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AudiencePreviewAnyOf1`. If the actual instance is not `AudiencePreviewAnyOf1`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AudiencePreviewAnyOf1</returns>
        public AudiencePreviewAnyOf1 GetAudiencePreviewAnyOf1()
        {
            return (AudiencePreviewAnyOf1)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AudiencePreviewAnyOf2`. If the actual instance is not `AudiencePreviewAnyOf2`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AudiencePreviewAnyOf2</returns>
        public AudiencePreviewAnyOf2 GetAudiencePreviewAnyOf2()
        {
            return (AudiencePreviewAnyOf2)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudiencePreview {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, AudiencePreview.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AudiencePreview
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AudiencePreview</returns>
        public static AudiencePreview FromJson(string jsonString)
        {
            AudiencePreview newAudiencePreview = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAudiencePreview;
            }

            try
            {
                newAudiencePreview = new AudiencePreview(JsonConvert.DeserializeObject<AudiencePreviewAnyOf>(jsonString, AudiencePreview.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAudiencePreview;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AudiencePreviewAnyOf: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAudiencePreview = new AudiencePreview(JsonConvert.DeserializeObject<AudiencePreviewAnyOf1>(jsonString, AudiencePreview.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAudiencePreview;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AudiencePreviewAnyOf1: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAudiencePreview = new AudiencePreview(JsonConvert.DeserializeObject<AudiencePreviewAnyOf2>(jsonString, AudiencePreview.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAudiencePreview;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AudiencePreviewAnyOf2: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudiencePreview);
        }

        /// <summary>
        /// Returns true if AudiencePreview instances are equal
        /// </summary>
        /// <param name="input">Instance of AudiencePreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudiencePreview input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for AudiencePreview
    /// </summary>
    public class AudiencePreviewJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AudiencePreview).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return AudiencePreview.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
