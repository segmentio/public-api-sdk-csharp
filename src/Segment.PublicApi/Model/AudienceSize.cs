/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.11.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// AudienceSize
    /// </summary>
    [DataContract(Name = "AudienceSize")]
    public partial class AudienceSize : IEquatable<AudienceSize>, IValidatableObject
    {
        /// <summary>
        /// The unit type for the count(s) being returned.
        /// </summary>
        /// <value>The unit type for the count(s) being returned.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 1,

            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 2
        }


        /// <summary>
        /// The unit type for the count(s) being returned.
        /// </summary>
        /// <value>The unit type for the count(s) being returned.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceSize" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudienceSize() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceSize" /> class.
        /// </summary>
        /// <param name="count">The total audience membership count. Refer to the type field to determine the unit for this field (profiles, accounts, etc). (required).</param>
        /// <param name="type">The unit type for the count(s) being returned. (required).</param>
        public AudienceSize(decimal count = default(decimal), TypeEnum type = default(TypeEnum))
        {
            this.Count = count;
            this.Type = type;
        }

        /// <summary>
        /// The total audience membership count. Refer to the type field to determine the unit for this field (profiles, accounts, etc).
        /// </summary>
        /// <value>The total audience membership count. Refer to the type field to determine the unit for this field (profiles, accounts, etc).</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public decimal Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceSize {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceSize);
        }

        /// <summary>
        /// Returns true if AudienceSize instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceSize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceSize input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
