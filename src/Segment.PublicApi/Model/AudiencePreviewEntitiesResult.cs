/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.4.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Result membership object for an audience preview with &#x60;audienceType: USERS&#x60; or &#x60;audienceType: LINKED&#x60;.
    /// </summary>
    [DataContract(Name = "AudiencePreviewEntitiesResult")]
    public partial class AudiencePreviewEntitiesResult : IEquatable<AudiencePreviewEntitiesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreviewEntitiesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudiencePreviewEntitiesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudiencePreviewEntitiesResult" /> class.
        /// </summary>
        /// <param name="id">Entity id. (required).</param>
        /// <param name="idProperty">The entity primary key column name. (required).</param>
        /// <param name="relationshipSlug">The entity relationship slug. (required).</param>
        /// <param name="properties">Entity properties..</param>
        /// <param name="entities">Related entities that are one level deeper will only be returned if those entities are referenced in the audience definition..</param>
        /// <param name="profiles">Related list of profiles..</param>
        /// <param name="profilesTruncated">Indicates if only a subset of the profiles associated with the entity were returned. (required).</param>
        public AudiencePreviewEntitiesResult(string id = default(string), string idProperty = default(string), string relationshipSlug = default(string), Dictionary<string, Object> properties = default(Dictionary<string, Object>), Dictionary<string, Object> entities = default(Dictionary<string, Object>), List<Profile> profiles = default(List<Profile>), bool profilesTruncated = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AudiencePreviewEntitiesResult and cannot be null");
            }
            this.Id = id;
            // to ensure "idProperty" is required (not null)
            if (idProperty == null)
            {
                throw new ArgumentNullException("idProperty is a required property for AudiencePreviewEntitiesResult and cannot be null");
            }
            this.IdProperty = idProperty;
            // to ensure "relationshipSlug" is required (not null)
            if (relationshipSlug == null)
            {
                throw new ArgumentNullException("relationshipSlug is a required property for AudiencePreviewEntitiesResult and cannot be null");
            }
            this.RelationshipSlug = relationshipSlug;
            this.ProfilesTruncated = profilesTruncated;
            this.Properties = properties;
            this.Entities = entities;
            this.Profiles = profiles;
        }

        /// <summary>
        /// Entity id.
        /// </summary>
        /// <value>Entity id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The entity primary key column name.
        /// </summary>
        /// <value>The entity primary key column name.</value>
        [DataMember(Name = "idProperty", IsRequired = true, EmitDefaultValue = true)]
        public string IdProperty { get; set; }

        /// <summary>
        /// The entity relationship slug.
        /// </summary>
        /// <value>The entity relationship slug.</value>
        [DataMember(Name = "relationshipSlug", IsRequired = true, EmitDefaultValue = true)]
        public string RelationshipSlug { get; set; }

        /// <summary>
        /// Entity properties.
        /// </summary>
        /// <value>Entity properties.</value>
        [DataMember(Name = "properties", EmitDefaultValue = false)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// Related entities that are one level deeper will only be returned if those entities are referenced in the audience definition.
        /// </summary>
        /// <value>Related entities that are one level deeper will only be returned if those entities are referenced in the audience definition.</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public Dictionary<string, Object> Entities { get; set; }

        /// <summary>
        /// Related list of profiles.
        /// </summary>
        /// <value>Related list of profiles.</value>
        [DataMember(Name = "profiles", EmitDefaultValue = false)]
        public List<Profile> Profiles { get; set; }

        /// <summary>
        /// Indicates if only a subset of the profiles associated with the entity were returned.
        /// </summary>
        /// <value>Indicates if only a subset of the profiles associated with the entity were returned.</value>
        [DataMember(Name = "profilesTruncated", IsRequired = true, EmitDefaultValue = true)]
        public bool ProfilesTruncated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudiencePreviewEntitiesResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdProperty: ").Append(IdProperty).Append("\n");
            sb.Append("  RelationshipSlug: ").Append(RelationshipSlug).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  Profiles: ").Append(Profiles).Append("\n");
            sb.Append("  ProfilesTruncated: ").Append(ProfilesTruncated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudiencePreviewEntitiesResult);
        }

        /// <summary>
        /// Returns true if AudiencePreviewEntitiesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of AudiencePreviewEntitiesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudiencePreviewEntitiesResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IdProperty == input.IdProperty ||
                    (this.IdProperty != null &&
                    this.IdProperty.Equals(input.IdProperty))
                ) && 
                (
                    this.RelationshipSlug == input.RelationshipSlug ||
                    (this.RelationshipSlug != null &&
                    this.RelationshipSlug.Equals(input.RelationshipSlug))
                ) && 
                (
                    this.Properties == input.Properties ||
                    this.Properties != null &&
                    input.Properties != null &&
                    this.Properties.SequenceEqual(input.Properties)
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.Profiles == input.Profiles ||
                    this.Profiles != null &&
                    input.Profiles != null &&
                    this.Profiles.SequenceEqual(input.Profiles)
                ) && 
                (
                    this.ProfilesTruncated == input.ProfilesTruncated ||
                    this.ProfilesTruncated.Equals(input.ProfilesTruncated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.IdProperty != null)
                {
                    hashCode = (hashCode * 59) + this.IdProperty.GetHashCode();
                }
                if (this.RelationshipSlug != null)
                {
                    hashCode = (hashCode * 59) + this.RelationshipSlug.GetHashCode();
                }
                if (this.Properties != null)
                {
                    hashCode = (hashCode * 59) + this.Properties.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                if (this.Profiles != null)
                {
                    hashCode = (hashCode * 59) + this.Profiles.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProfilesTruncated.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
