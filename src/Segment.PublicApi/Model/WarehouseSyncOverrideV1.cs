/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.2.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Represents the override for a Source/collection/property? path to apply to a Warehouse.
    /// </summary>
    [DataContract(Name = "WarehouseSyncOverrideV1")]
    public partial class WarehouseSyncOverrideV1 : IEquatable<WarehouseSyncOverrideV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseSyncOverrideV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WarehouseSyncOverrideV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WarehouseSyncOverrideV1" /> class.
        /// </summary>
        /// <param name="sourceId">The id of the Source this schema item applies to. (required).</param>
        /// <param name="collection">The collection the schema item override applies to..</param>
        /// <param name="enabled">Enable to apply the override. (required).</param>
        /// <param name="property">A property within the collection to which the override applies..</param>
        public WarehouseSyncOverrideV1(string sourceId = default(string), string collection = default(string), bool enabled = default(bool), string property = default(string))
        {
            // to ensure "sourceId" is required (not null)
            if (sourceId == null)
            {
                throw new ArgumentNullException("sourceId is a required property for WarehouseSyncOverrideV1 and cannot be null");
            }
            this.SourceId = sourceId;
            this.Enabled = enabled;
            this.Collection = collection;
            this.Property = property;
        }

        /// <summary>
        /// The id of the Source this schema item applies to.
        /// </summary>
        /// <value>The id of the Source this schema item applies to.</value>
        [DataMember(Name = "sourceId", IsRequired = true, EmitDefaultValue = true)]
        public string SourceId { get; set; }

        /// <summary>
        /// The collection the schema item override applies to.
        /// </summary>
        /// <value>The collection the schema item override applies to.</value>
        [DataMember(Name = "collection", EmitDefaultValue = false)]
        public string Collection { get; set; }

        /// <summary>
        /// Enable to apply the override.
        /// </summary>
        /// <value>Enable to apply the override.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// A property within the collection to which the override applies.
        /// </summary>
        /// <value>A property within the collection to which the override applies.</value>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public string Property { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WarehouseSyncOverrideV1 {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WarehouseSyncOverrideV1);
        }

        /// <summary>
        /// Returns true if WarehouseSyncOverrideV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of WarehouseSyncOverrideV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WarehouseSyncOverrideV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceId != null)
                {
                    hashCode = (hashCode * 59) + this.SourceId.GetHashCode();
                }
                if (this.Collection != null)
                {
                    hashCode = (hashCode * 59) + this.Collection.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
