/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// The Personalization Input Object.
    /// </summary>
    [DataContract(Name = "PersonalizationInput")]
    public partial class PersonalizationInput : IEquatable<PersonalizationInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalizationInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonalizationInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalizationInput" /> class.
        /// </summary>
        /// <param name="profile">profile (required).</param>
        /// <param name="entities">Entities V2 Object..</param>
        /// <param name="syncEntityPropertyChanges">Sync entity property changes back to Segment. Only applicable if activationType is \&quot;Audience Membership Changed\&quot;..</param>
        public PersonalizationInput(Profile profile = default(Profile), List<PersonalizationInputEntity> entities = default(List<PersonalizationInputEntity>), bool syncEntityPropertyChanges = default(bool))
        {
            // to ensure "profile" is required (not null)
            if (profile == null)
            {
                throw new ArgumentNullException("profile is a required property for PersonalizationInput and cannot be null");
            }
            this.Profile = profile;
            this.Entities = entities;
            this.SyncEntityPropertyChanges = syncEntityPropertyChanges;
        }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name = "profile", IsRequired = true, EmitDefaultValue = true)]
        public Profile Profile { get; set; }

        /// <summary>
        /// Entities V2 Object.
        /// </summary>
        /// <value>Entities V2 Object.</value>
        [DataMember(Name = "entities", EmitDefaultValue = false)]
        public List<PersonalizationInputEntity> Entities { get; set; }

        /// <summary>
        /// Sync entity property changes back to Segment. Only applicable if activationType is \&quot;Audience Membership Changed\&quot;.
        /// </summary>
        /// <value>Sync entity property changes back to Segment. Only applicable if activationType is \&quot;Audience Membership Changed\&quot;.</value>
        [DataMember(Name = "syncEntityPropertyChanges", EmitDefaultValue = true)]
        public bool SyncEntityPropertyChanges { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PersonalizationInput {\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Entities: ").Append(Entities).Append("\n");
            sb.Append("  SyncEntityPropertyChanges: ").Append(SyncEntityPropertyChanges).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonalizationInput);
        }

        /// <summary>
        /// Returns true if PersonalizationInput instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonalizationInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalizationInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                ) && 
                (
                    this.Entities == input.Entities ||
                    this.Entities != null &&
                    input.Entities != null &&
                    this.Entities.SequenceEqual(input.Entities)
                ) && 
                (
                    this.SyncEntityPropertyChanges == input.SyncEntityPropertyChanges ||
                    this.SyncEntityPropertyChanges.Equals(input.SyncEntityPropertyChanges)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Profile != null)
                {
                    hashCode = (hashCode * 59) + this.Profile.GetHashCode();
                }
                if (this.Entities != null)
                {
                    hashCode = (hashCode * 59) + this.Entities.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SyncEntityPropertyChanges.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
