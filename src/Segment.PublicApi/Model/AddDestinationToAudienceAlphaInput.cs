/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.12.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to Add a Destination into an Audience.
    /// </summary>
    [DataContract(Name = "AddDestinationToAudienceAlphaInput")]
    public partial class AddDestinationToAudienceAlphaInput : IEquatable<AddDestinationToAudienceAlphaInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddDestinationToAudienceAlphaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddDestinationToAudienceAlphaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddDestinationToAudienceAlphaInput" /> class.
        /// </summary>
        /// <param name="versionSchema">Version Schema. (required).</param>
        /// <param name="workspaceId">The id of the Workspace the audience exists within. (required).</param>
        /// <param name="destination">destination (required).</param>
        public AddDestinationToAudienceAlphaInput(string versionSchema = default(string), string workspaceId = default(string), DestinationInput destination = default(DestinationInput))
        {
            // to ensure "versionSchema" is required (not null)
            if (versionSchema == null)
            {
                throw new ArgumentNullException("versionSchema is a required property for AddDestinationToAudienceAlphaInput and cannot be null");
            }
            this.VersionSchema = versionSchema;
            // to ensure "workspaceId" is required (not null)
            if (workspaceId == null)
            {
                throw new ArgumentNullException("workspaceId is a required property for AddDestinationToAudienceAlphaInput and cannot be null");
            }
            this.WorkspaceId = workspaceId;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for AddDestinationToAudienceAlphaInput and cannot be null");
            }
            this.Destination = destination;
        }

        /// <summary>
        /// Version Schema.
        /// </summary>
        /// <value>Version Schema.</value>
        [DataMember(Name = "versionSchema", IsRequired = true, EmitDefaultValue = true)]
        public string VersionSchema { get; set; }

        /// <summary>
        /// The id of the Workspace the audience exists within.
        /// </summary>
        /// <value>The id of the Workspace the audience exists within.</value>
        [DataMember(Name = "workspaceId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public DestinationInput Destination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddDestinationToAudienceAlphaInput {\n");
            sb.Append("  VersionSchema: ").Append(VersionSchema).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddDestinationToAudienceAlphaInput);
        }

        /// <summary>
        /// Returns true if AddDestinationToAudienceAlphaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddDestinationToAudienceAlphaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddDestinationToAudienceAlphaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VersionSchema == input.VersionSchema ||
                    (this.VersionSchema != null &&
                    this.VersionSchema.Equals(input.VersionSchema))
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VersionSchema != null)
                {
                    hashCode = (hashCode * 59) + this.VersionSchema.GetHashCode();
                }
                if (this.WorkspaceId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                }
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
