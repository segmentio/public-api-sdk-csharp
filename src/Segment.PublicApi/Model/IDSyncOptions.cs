/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.4.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// IDSyncOptions
    /// </summary>
    [DataContract(Name = "IDSyncOptions")]
    public partial class IDSyncOptions : IEquatable<IDSyncOptions>, IValidatableObject
    {
        /// <summary>
        /// Defines TriggerOn
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TriggerOnEnum
        {
            /// <summary>
            /// Enum Any for value: any
            /// </summary>
            [EnumMember(Value = "any")]
            Any = 1,

            /// <summary>
            /// Enum AudienceExited for value: audience_exited
            /// </summary>
            [EnumMember(Value = "audience_exited")]
            AudienceExited = 2,

            /// <summary>
            /// Enum AudienceJoined for value: audience_joined
            /// </summary>
            [EnumMember(Value = "audience_joined")]
            AudienceJoined = 3,

            /// <summary>
            /// Enum NewExternalIdAdded for value: new_external_id_added
            /// </summary>
            [EnumMember(Value = "new_external_id_added")]
            NewExternalIdAdded = 4
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IDSyncOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IDSyncOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IDSyncOptions" /> class.
        /// </summary>
        /// <param name="triggerOn">The list of trigger on conditions. (required).</param>
        /// <param name="ids">The map of identifiers to the config. (required).</param>
        public IDSyncOptions(List<TriggerOnEnum> triggerOn = default(List<TriggerOnEnum>), Dictionary<string, Object> ids = default(Dictionary<string, Object>))
        {
            // to ensure "triggerOn" is required (not null)
            if (triggerOn == null)
            {
                throw new ArgumentNullException("triggerOn is a required property for IDSyncOptions and cannot be null");
            }
            this.TriggerOn = triggerOn;
            // to ensure "ids" is required (not null)
            if (ids == null)
            {
                throw new ArgumentNullException("ids is a required property for IDSyncOptions and cannot be null");
            }
            this.Ids = ids;
        }

        /// <summary>
        /// The list of trigger on conditions.
        /// </summary>
        /// <value>The list of trigger on conditions.</value>
        [DataMember(Name = "triggerOn", IsRequired = true, EmitDefaultValue = true)]
        public List<IDSyncOptions.TriggerOnEnum> TriggerOn { get; set; }

        /// <summary>
        /// The map of identifiers to the config.
        /// </summary>
        /// <value>The map of identifiers to the config.</value>
        [DataMember(Name = "ids", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Ids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IDSyncOptions {\n");
            sb.Append("  TriggerOn: ").Append(TriggerOn).Append("\n");
            sb.Append("  Ids: ").Append(Ids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDSyncOptions);
        }

        /// <summary>
        /// Returns true if IDSyncOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of IDSyncOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDSyncOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TriggerOn == input.TriggerOn ||
                    this.TriggerOn != null &&
                    input.TriggerOn != null &&
                    this.TriggerOn.SequenceEqual(input.TriggerOn)
                ) && 
                (
                    this.Ids == input.Ids ||
                    this.Ids != null &&
                    input.Ids != null &&
                    this.Ids.SequenceEqual(input.Ids)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TriggerOn != null)
                {
                    hashCode = (hashCode * 59) + this.TriggerOn.GetHashCode();
                }
                if (this.Ids != null)
                {
                    hashCode = (hashCode * 59) + this.Ids.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
