/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.6.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Represents an Audit Trail event.
    /// </summary>
    [DataContract(Name = "AuditEventV1")]
    public partial class AuditEventV1 : IEquatable<AuditEventV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditEventV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditEventV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditEventV1" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for this audit trail event. (required).</param>
        /// <param name="timestamp">The timestamp of this event in ISO-8601 format. (required).</param>
        /// <param name="type">The type of this event. (required).</param>
        /// <param name="actor">The user or API token that triggered this event. (required).</param>
        /// <param name="actorEmail">The email of the user that triggered this event..</param>
        /// <param name="resourceId">The identifier of the resource affected by this event. (required).</param>
        /// <param name="resourceType">The kind of resource affected by this event. (required).</param>
        /// <param name="resourceName">The name of the resource affected by this event. (required).</param>
        public AuditEventV1(string id = default(string), string timestamp = default(string), string type = default(string), string actor = default(string), string actorEmail = default(string), string resourceId = default(string), string resourceType = default(string), string resourceName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AuditEventV1 and cannot be null");
            }
            this.Id = id;
            // to ensure "timestamp" is required (not null)
            if (timestamp == null)
            {
                throw new ArgumentNullException("timestamp is a required property for AuditEventV1 and cannot be null");
            }
            this.Timestamp = timestamp;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AuditEventV1 and cannot be null");
            }
            this.Type = type;
            // to ensure "actor" is required (not null)
            if (actor == null)
            {
                throw new ArgumentNullException("actor is a required property for AuditEventV1 and cannot be null");
            }
            this.Actor = actor;
            // to ensure "resourceId" is required (not null)
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId is a required property for AuditEventV1 and cannot be null");
            }
            this.ResourceId = resourceId;
            // to ensure "resourceType" is required (not null)
            if (resourceType == null)
            {
                throw new ArgumentNullException("resourceType is a required property for AuditEventV1 and cannot be null");
            }
            this.ResourceType = resourceType;
            // to ensure "resourceName" is required (not null)
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName is a required property for AuditEventV1 and cannot be null");
            }
            this.ResourceName = resourceName;
            this.ActorEmail = actorEmail;
        }

        /// <summary>
        /// Unique identifier for this audit trail event.
        /// </summary>
        /// <value>Unique identifier for this audit trail event.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The timestamp of this event in ISO-8601 format.
        /// </summary>
        /// <value>The timestamp of this event in ISO-8601 format.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// The type of this event.
        /// </summary>
        /// <value>The type of this event.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// The user or API token that triggered this event.
        /// </summary>
        /// <value>The user or API token that triggered this event.</value>
        [DataMember(Name = "actor", IsRequired = true, EmitDefaultValue = true)]
        public string Actor { get; set; }

        /// <summary>
        /// The email of the user that triggered this event.
        /// </summary>
        /// <value>The email of the user that triggered this event.</value>
        [DataMember(Name = "actorEmail", EmitDefaultValue = false)]
        public string ActorEmail { get; set; }

        /// <summary>
        /// The identifier of the resource affected by this event.
        /// </summary>
        /// <value>The identifier of the resource affected by this event.</value>
        [DataMember(Name = "resourceId", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceId { get; set; }

        /// <summary>
        /// The kind of resource affected by this event.
        /// </summary>
        /// <value>The kind of resource affected by this event.</value>
        [DataMember(Name = "resourceType", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The name of the resource affected by this event.
        /// </summary>
        /// <value>The name of the resource affected by this event.</value>
        [DataMember(Name = "resourceName", IsRequired = true, EmitDefaultValue = true)]
        public string ResourceName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuditEventV1 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  ActorEmail: ").Append(ActorEmail).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditEventV1);
        }

        /// <summary>
        /// Returns true if AuditEventV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditEventV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditEventV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Actor == input.Actor ||
                    (this.Actor != null &&
                    this.Actor.Equals(input.Actor))
                ) && 
                (
                    this.ActorEmail == input.ActorEmail ||
                    (this.ActorEmail != null &&
                    this.ActorEmail.Equals(input.ActorEmail))
                ) && 
                (
                    this.ResourceId == input.ResourceId ||
                    (this.ResourceId != null &&
                    this.ResourceId.Equals(input.ResourceId))
                ) && 
                (
                    this.ResourceType == input.ResourceType ||
                    (this.ResourceType != null &&
                    this.ResourceType.Equals(input.ResourceType))
                ) && 
                (
                    this.ResourceName == input.ResourceName ||
                    (this.ResourceName != null &&
                    this.ResourceName.Equals(input.ResourceName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Actor != null)
                {
                    hashCode = (hashCode * 59) + this.Actor.GetHashCode();
                }
                if (this.ActorEmail != null)
                {
                    hashCode = (hashCode * 59) + this.ActorEmail.GetHashCode();
                }
                if (this.ResourceId != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceId.GetHashCode();
                }
                if (this.ResourceType != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceType.GetHashCode();
                }
                if (this.ResourceName != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
