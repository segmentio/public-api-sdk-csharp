/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.1.1
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// The journey definition.
    /// </summary>
    [DataContract(Name = "JourneyDefinition")]
    public partial class JourneyDefinition : IEquatable<JourneyDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JourneyDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected JourneyDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="JourneyDefinition" /> class.
        /// </summary>
        /// <param name="initialState">The initial state of the journey. (required).</param>
        /// <param name="entryRules">entryRules (required).</param>
        /// <param name="exitRules">exitRules (required).</param>
        /// <param name="states">The states of the journey. (required).</param>
        public JourneyDefinition(string initialState = default(string), EntryRules entryRules = default(EntryRules), ExitRulesConfig exitRules = default(ExitRulesConfig), List<JourneyState> states = default(List<JourneyState>))
        {
            // to ensure "initialState" is required (not null)
            if (initialState == null)
            {
                throw new ArgumentNullException("initialState is a required property for JourneyDefinition and cannot be null");
            }
            this.InitialState = initialState;
            // to ensure "entryRules" is required (not null)
            if (entryRules == null)
            {
                throw new ArgumentNullException("entryRules is a required property for JourneyDefinition and cannot be null");
            }
            this.EntryRules = entryRules;
            // to ensure "exitRules" is required (not null)
            if (exitRules == null)
            {
                throw new ArgumentNullException("exitRules is a required property for JourneyDefinition and cannot be null");
            }
            this.ExitRules = exitRules;
            // to ensure "states" is required (not null)
            if (states == null)
            {
                throw new ArgumentNullException("states is a required property for JourneyDefinition and cannot be null");
            }
            this.States = states;
        }

        /// <summary>
        /// The initial state of the journey.
        /// </summary>
        /// <value>The initial state of the journey.</value>
        [DataMember(Name = "initialState", IsRequired = true, EmitDefaultValue = true)]
        public string InitialState { get; set; }

        /// <summary>
        /// Gets or Sets EntryRules
        /// </summary>
        [DataMember(Name = "entryRules", IsRequired = true, EmitDefaultValue = true)]
        public EntryRules EntryRules { get; set; }

        /// <summary>
        /// Gets or Sets ExitRules
        /// </summary>
        [DataMember(Name = "exitRules", IsRequired = true, EmitDefaultValue = true)]
        public ExitRulesConfig ExitRules { get; set; }

        /// <summary>
        /// The states of the journey.
        /// </summary>
        /// <value>The states of the journey.</value>
        [DataMember(Name = "states", IsRequired = true, EmitDefaultValue = true)]
        public List<JourneyState> States { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JourneyDefinition {\n");
            sb.Append("  InitialState: ").Append(InitialState).Append("\n");
            sb.Append("  EntryRules: ").Append(EntryRules).Append("\n");
            sb.Append("  ExitRules: ").Append(ExitRules).Append("\n");
            sb.Append("  States: ").Append(States).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as JourneyDefinition);
        }

        /// <summary>
        /// Returns true if JourneyDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of JourneyDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JourneyDefinition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InitialState == input.InitialState ||
                    (this.InitialState != null &&
                    this.InitialState.Equals(input.InitialState))
                ) && 
                (
                    this.EntryRules == input.EntryRules ||
                    (this.EntryRules != null &&
                    this.EntryRules.Equals(input.EntryRules))
                ) && 
                (
                    this.ExitRules == input.ExitRules ||
                    (this.ExitRules != null &&
                    this.ExitRules.Equals(input.ExitRules))
                ) && 
                (
                    this.States == input.States ||
                    this.States != null &&
                    input.States != null &&
                    this.States.SequenceEqual(input.States)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitialState != null)
                {
                    hashCode = (hashCode * 59) + this.InitialState.GetHashCode();
                }
                if (this.EntryRules != null)
                {
                    hashCode = (hashCode * 59) + this.EntryRules.GetHashCode();
                }
                if (this.ExitRules != null)
                {
                    hashCode = (hashCode * 59) + this.ExitRules.GetHashCode();
                }
                if (this.States != null)
                {
                    hashCode = (hashCode * 59) + this.States.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
