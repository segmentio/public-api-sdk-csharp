/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.3.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Options which should be applied when segmenting audience previews.
    /// </summary>
    [DataContract(Name = "ReadAudiencePreviewOptions")]
    public partial class ReadAudiencePreviewOptions : IEquatable<ReadAudiencePreviewOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadAudiencePreviewOptions" /> class.
        /// </summary>
        /// <param name="filterByExternalIds">The set of profile external identifiers being used to determine audience preview membership. Profiles will only be considered for audience preview membership if the profile has at least one external id whose key matches a value in this set..</param>
        /// <param name="includeHistoricalData">Determines whether data prior to the audience preview being created is included when determining audience preview membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true..</param>
        /// <param name="backfillEventDataDays">If specified, the value of this field indicates the number of days (specified from the date the audience preview was created) that event data will be included from when determining audience preview membership. If unspecified, defer to the value of &#x60;includeHistoricalData&#x60; to determine whether historical data is either entirely included or entirely excluded when determining audience preview membership..</param>
        public ReadAudiencePreviewOptions(List<string> filterByExternalIds = default(List<string>), bool includeHistoricalData = default(bool), decimal backfillEventDataDays = default(decimal))
        {
            this.FilterByExternalIds = filterByExternalIds;
            this.IncludeHistoricalData = includeHistoricalData;
            this.BackfillEventDataDays = backfillEventDataDays;
        }

        /// <summary>
        /// The set of profile external identifiers being used to determine audience preview membership. Profiles will only be considered for audience preview membership if the profile has at least one external id whose key matches a value in this set.
        /// </summary>
        /// <value>The set of profile external identifiers being used to determine audience preview membership. Profiles will only be considered for audience preview membership if the profile has at least one external id whose key matches a value in this set.</value>
        [DataMember(Name = "filterByExternalIds", EmitDefaultValue = false)]
        public List<string> FilterByExternalIds { get; set; }

        /// <summary>
        /// Determines whether data prior to the audience preview being created is included when determining audience preview membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true.
        /// </summary>
        /// <value>Determines whether data prior to the audience preview being created is included when determining audience preview membership. Note that including historical data may be needed in order to properly handle the definition specified. In these cases, Segment will automatically handle including historical data and the response will return the includeHistoricalData parameter as true.</value>
        [DataMember(Name = "includeHistoricalData", EmitDefaultValue = true)]
        public bool IncludeHistoricalData { get; set; }

        /// <summary>
        /// If specified, the value of this field indicates the number of days (specified from the date the audience preview was created) that event data will be included from when determining audience preview membership. If unspecified, defer to the value of &#x60;includeHistoricalData&#x60; to determine whether historical data is either entirely included or entirely excluded when determining audience preview membership.
        /// </summary>
        /// <value>If specified, the value of this field indicates the number of days (specified from the date the audience preview was created) that event data will be included from when determining audience preview membership. If unspecified, defer to the value of &#x60;includeHistoricalData&#x60; to determine whether historical data is either entirely included or entirely excluded when determining audience preview membership.</value>
        [DataMember(Name = "backfillEventDataDays", EmitDefaultValue = false)]
        public decimal BackfillEventDataDays { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ReadAudiencePreviewOptions {\n");
            sb.Append("  FilterByExternalIds: ").Append(FilterByExternalIds).Append("\n");
            sb.Append("  IncludeHistoricalData: ").Append(IncludeHistoricalData).Append("\n");
            sb.Append("  BackfillEventDataDays: ").Append(BackfillEventDataDays).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadAudiencePreviewOptions);
        }

        /// <summary>
        /// Returns true if ReadAudiencePreviewOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadAudiencePreviewOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadAudiencePreviewOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FilterByExternalIds == input.FilterByExternalIds ||
                    this.FilterByExternalIds != null &&
                    input.FilterByExternalIds != null &&
                    this.FilterByExternalIds.SequenceEqual(input.FilterByExternalIds)
                ) && 
                (
                    this.IncludeHistoricalData == input.IncludeHistoricalData ||
                    this.IncludeHistoricalData.Equals(input.IncludeHistoricalData)
                ) && 
                (
                    this.BackfillEventDataDays == input.BackfillEventDataDays ||
                    this.BackfillEventDataDays.Equals(input.BackfillEventDataDays)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FilterByExternalIds != null)
                {
                    hashCode = (hashCode * 59) + this.FilterByExternalIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IncludeHistoricalData.GetHashCode();
                hashCode = (hashCode * 59) + this.BackfillEventDataDays.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
