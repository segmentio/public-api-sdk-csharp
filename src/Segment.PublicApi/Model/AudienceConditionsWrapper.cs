/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// A wrapper object containing compute conditions in a specific format.
    /// </summary>
    [DataContract(Name = "AudienceConditionsWrapper")]
    public partial class AudienceConditionsWrapper : IEquatable<AudienceConditionsWrapper>, IValidatableObject
    {
        /// <summary>
        /// Discriminator field denoting what format the compute conditions are specified in.
        /// </summary>
        /// <value>Discriminator field denoting what format the compute conditions are specified in.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FormatEnum
        {
            /// <summary>
            /// Enum AST for value: AST
            /// </summary>
            [EnumMember(Value = "AST")]
            AST = 1,

            /// <summary>
            /// Enum CQL for value: CQL
            /// </summary>
            [EnumMember(Value = "CQL")]
            CQL = 2
        }


        /// <summary>
        /// Discriminator field denoting what format the compute conditions are specified in.
        /// </summary>
        /// <value>Discriminator field denoting what format the compute conditions are specified in.</value>
        [DataMember(Name = "format", IsRequired = true, EmitDefaultValue = true)]
        public FormatEnum Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceConditionsWrapper" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudienceConditionsWrapper() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceConditionsWrapper" /> class.
        /// </summary>
        /// <param name="format">Discriminator field denoting what format the compute conditions are specified in. (required).</param>
        /// <param name="conditions">Compute conditions specified in the form denoted by the &#39;format&#39; discriminator field. (required).</param>
        public AudienceConditionsWrapper(FormatEnum format = default(FormatEnum), Object conditions = default(Object))
        {
            this.Format = format;
            // to ensure "conditions" is required (not null)
            if (conditions == null)
            {
                throw new ArgumentNullException("conditions is a required property for AudienceConditionsWrapper and cannot be null");
            }
            this.Conditions = conditions;
        }

        /// <summary>
        /// Compute conditions specified in the form denoted by the &#39;format&#39; discriminator field.
        /// </summary>
        /// <value>Compute conditions specified in the form denoted by the &#39;format&#39; discriminator field.</value>
        [DataMember(Name = "conditions", IsRequired = true, EmitDefaultValue = true)]
        public Object Conditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceConditionsWrapper {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceConditionsWrapper);
        }

        /// <summary>
        /// Returns true if AudienceConditionsWrapper instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceConditionsWrapper to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceConditionsWrapper input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Format == input.Format ||
                    this.Format.Equals(input.Format)
                ) && 
                (
                    this.Conditions == input.Conditions ||
                    (this.Conditions != null &&
                    this.Conditions.Equals(input.Conditions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Format.GetHashCode();
                if (this.Conditions != null)
                {
                    hashCode = (hashCode * 59) + this.Conditions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
