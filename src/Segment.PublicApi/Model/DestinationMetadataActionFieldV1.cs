/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 60.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Represents a field used in configuring an action.
    /// </summary>
    [DataContract(Name = "DestinationMetadataActionFieldV1")]
    public partial class DestinationMetadataActionFieldV1 : IEquatable<DestinationMetadataActionFieldV1>, IValidatableObject
    {
        /// <summary>
        /// The data type for this value.
        /// </summary>
        /// <value>The data type for this value.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum BOOLEAN for value: BOOLEAN
            /// </summary>
            [EnumMember(Value = "BOOLEAN")]
            BOOLEAN = 1,

            /// <summary>
            /// Enum DATETIME for value: DATETIME
            /// </summary>
            [EnumMember(Value = "DATETIME")]
            DATETIME = 2,

            /// <summary>
            /// Enum HIDDEN for value: HIDDEN
            /// </summary>
            [EnumMember(Value = "HIDDEN")]
            HIDDEN = 3,

            /// <summary>
            /// Enum INTEGER for value: INTEGER
            /// </summary>
            [EnumMember(Value = "INTEGER")]
            INTEGER = 4,

            /// <summary>
            /// Enum NUMBER for value: NUMBER
            /// </summary>
            [EnumMember(Value = "NUMBER")]
            NUMBER = 5,

            /// <summary>
            /// Enum OBJECT for value: OBJECT
            /// </summary>
            [EnumMember(Value = "OBJECT")]
            OBJECT = 6,

            /// <summary>
            /// Enum PASSWORD for value: PASSWORD
            /// </summary>
            [EnumMember(Value = "PASSWORD")]
            PASSWORD = 7,

            /// <summary>
            /// Enum STRING for value: STRING
            /// </summary>
            [EnumMember(Value = "STRING")]
            STRING = 8,

            /// <summary>
            /// Enum TEXT for value: TEXT
            /// </summary>
            [EnumMember(Value = "TEXT")]
            TEXT = 9
        }


        /// <summary>
        /// The data type for this value.
        /// </summary>
        /// <value>The data type for this value.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationMetadataActionFieldV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DestinationMetadataActionFieldV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationMetadataActionFieldV1" /> class.
        /// </summary>
        /// <param name="id">The primary key of the field. (required).</param>
        /// <param name="sortOrder">The order this particular field is (used in the UI for displaying the fields in a specified order). (required).</param>
        /// <param name="fieldKey">A unique machine-readable key for the field. Should ideally match the expected key in the action\\&#39;s API request. (required).</param>
        /// <param name="label">A human-readable label for this value. (required).</param>
        /// <param name="type">The data type for this value. (required).</param>
        /// <param name="description">A human-readable description of this value. You can use Markdown. (required).</param>
        /// <param name="placeholder">An example value displayed but not saved..</param>
        /// <param name="defaultValue">A default value that is saved the first time an action is created..</param>
        /// <param name="required">Whether this field is required. (required).</param>
        /// <param name="multiple">Whether a user can provide multiples of this field. (required).</param>
        /// <param name="choices">A list of machine-readable value/label pairs to populate a static dropdown..</param>
        /// <param name="dynamic">Whether this field should execute a dynamic request to fetch choices to populate a dropdown. When true, &#x60;choices&#x60; is ignored. (required).</param>
        /// <param name="allowNull">Whether this field allows null values. (required).</param>
        /// <param name="hidden">Whether the action field should be hidden or not..</param>
        public DestinationMetadataActionFieldV1(string id = default(string), decimal sortOrder = default(decimal), string fieldKey = default(string), string label = default(string), TypeEnum type = default(TypeEnum), string description = default(string), string placeholder = default(string), Object defaultValue = default(Object), bool required = default(bool), bool multiple = default(bool), Object choices = default(Object), bool dynamic = default(bool), bool allowNull = default(bool), bool hidden = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for DestinationMetadataActionFieldV1 and cannot be null");
            }
            this.Id = id;
            this.SortOrder = sortOrder;
            // to ensure "fieldKey" is required (not null)
            if (fieldKey == null)
            {
                throw new ArgumentNullException("fieldKey is a required property for DestinationMetadataActionFieldV1 and cannot be null");
            }
            this.FieldKey = fieldKey;
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for DestinationMetadataActionFieldV1 and cannot be null");
            }
            this.Label = label;
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for DestinationMetadataActionFieldV1 and cannot be null");
            }
            this.Description = description;
            this.Required = required;
            this.Multiple = multiple;
            this.Dynamic = dynamic;
            this.AllowNull = allowNull;
            this.Placeholder = placeholder;
            this.DefaultValue = defaultValue;
            this.Choices = choices;
            this.Hidden = hidden;
        }

        /// <summary>
        /// The primary key of the field.
        /// </summary>
        /// <value>The primary key of the field.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The order this particular field is (used in the UI for displaying the fields in a specified order).
        /// </summary>
        /// <value>The order this particular field is (used in the UI for displaying the fields in a specified order).</value>
        [DataMember(Name = "sortOrder", IsRequired = true, EmitDefaultValue = true)]
        public decimal SortOrder { get; set; }

        /// <summary>
        /// A unique machine-readable key for the field. Should ideally match the expected key in the action\\&#39;s API request.
        /// </summary>
        /// <value>A unique machine-readable key for the field. Should ideally match the expected key in the action\\&#39;s API request.</value>
        [DataMember(Name = "fieldKey", IsRequired = true, EmitDefaultValue = true)]
        public string FieldKey { get; set; }

        /// <summary>
        /// A human-readable label for this value.
        /// </summary>
        /// <value>A human-readable label for this value.</value>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// A human-readable description of this value. You can use Markdown.
        /// </summary>
        /// <value>A human-readable description of this value. You can use Markdown.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// An example value displayed but not saved.
        /// </summary>
        /// <value>An example value displayed but not saved.</value>
        [DataMember(Name = "placeholder", EmitDefaultValue = false)]
        public string Placeholder { get; set; }

        /// <summary>
        /// A default value that is saved the first time an action is created.
        /// </summary>
        /// <value>A default value that is saved the first time an action is created.</value>
        [DataMember(Name = "defaultValue", EmitDefaultValue = true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Whether this field is required.
        /// </summary>
        /// <value>Whether this field is required.</value>
        [DataMember(Name = "required", IsRequired = true, EmitDefaultValue = true)]
        public bool Required { get; set; }

        /// <summary>
        /// Whether a user can provide multiples of this field.
        /// </summary>
        /// <value>Whether a user can provide multiples of this field.</value>
        [DataMember(Name = "multiple", IsRequired = true, EmitDefaultValue = true)]
        public bool Multiple { get; set; }

        /// <summary>
        /// A list of machine-readable value/label pairs to populate a static dropdown.
        /// </summary>
        /// <value>A list of machine-readable value/label pairs to populate a static dropdown.</value>
        [DataMember(Name = "choices", EmitDefaultValue = true)]
        public Object Choices { get; set; }

        /// <summary>
        /// Whether this field should execute a dynamic request to fetch choices to populate a dropdown. When true, &#x60;choices&#x60; is ignored.
        /// </summary>
        /// <value>Whether this field should execute a dynamic request to fetch choices to populate a dropdown. When true, &#x60;choices&#x60; is ignored.</value>
        [DataMember(Name = "dynamic", IsRequired = true, EmitDefaultValue = true)]
        public bool Dynamic { get; set; }

        /// <summary>
        /// Whether this field allows null values.
        /// </summary>
        /// <value>Whether this field allows null values.</value>
        [DataMember(Name = "allowNull", IsRequired = true, EmitDefaultValue = true)]
        public bool AllowNull { get; set; }

        /// <summary>
        /// Whether the action field should be hidden or not.
        /// </summary>
        /// <value>Whether the action field should be hidden or not.</value>
        [DataMember(Name = "hidden", EmitDefaultValue = true)]
        public bool Hidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DestinationMetadataActionFieldV1 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  FieldKey: ").Append(FieldKey).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Multiple: ").Append(Multiple).Append("\n");
            sb.Append("  Choices: ").Append(Choices).Append("\n");
            sb.Append("  Dynamic: ").Append(Dynamic).Append("\n");
            sb.Append("  AllowNull: ").Append(AllowNull).Append("\n");
            sb.Append("  Hidden: ").Append(Hidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinationMetadataActionFieldV1);
        }

        /// <summary>
        /// Returns true if DestinationMetadataActionFieldV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinationMetadataActionFieldV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationMetadataActionFieldV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SortOrder == input.SortOrder ||
                    this.SortOrder.Equals(input.SortOrder)
                ) && 
                (
                    this.FieldKey == input.FieldKey ||
                    (this.FieldKey != null &&
                    this.FieldKey.Equals(input.FieldKey))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Placeholder == input.Placeholder ||
                    (this.Placeholder != null &&
                    this.Placeholder.Equals(input.Placeholder))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Required == input.Required ||
                    this.Required.Equals(input.Required)
                ) && 
                (
                    this.Multiple == input.Multiple ||
                    this.Multiple.Equals(input.Multiple)
                ) && 
                (
                    this.Choices == input.Choices ||
                    (this.Choices != null &&
                    this.Choices.Equals(input.Choices))
                ) && 
                (
                    this.Dynamic == input.Dynamic ||
                    this.Dynamic.Equals(input.Dynamic)
                ) && 
                (
                    this.AllowNull == input.AllowNull ||
                    this.AllowNull.Equals(input.AllowNull)
                ) && 
                (
                    this.Hidden == input.Hidden ||
                    this.Hidden.Equals(input.Hidden)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SortOrder.GetHashCode();
                if (this.FieldKey != null)
                {
                    hashCode = (hashCode * 59) + this.FieldKey.GetHashCode();
                }
                if (this.Label != null)
                {
                    hashCode = (hashCode * 59) + this.Label.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Placeholder != null)
                {
                    hashCode = (hashCode * 59) + this.Placeholder.GetHashCode();
                }
                if (this.DefaultValue != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultValue.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Required.GetHashCode();
                hashCode = (hashCode * 59) + this.Multiple.GetHashCode();
                if (this.Choices != null)
                {
                    hashCode = (hashCode * 59) + this.Choices.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Dynamic.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowNull.GetHashCode();
                hashCode = (hashCode * 59) + this.Hidden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
