/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.4
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Object representing the extract phase + details.
    /// </summary>
    [DataContract(Name = "SyncExtractPhase")]
    public partial class SyncExtractPhase : IEquatable<SyncExtractPhase>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncExtractPhase" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SyncExtractPhase() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SyncExtractPhase" /> class.
        /// </summary>
        /// <param name="addedCount">Counts the subset of records with status&#x3D;new, which indicates records that were created/inserted/added. (required).</param>
        /// <param name="updatedCount">Counts the subset of records with status&#x3D;updated, which indicates records that were modified/updated. (required).</param>
        /// <param name="deletedCount">Counts the subset of records with status&#x3D;deleted, which indicates records that were deleted/removed. (required).</param>
        /// <param name="extractCount">Counts the total number of records/rows handled by extract, across all statuses. (required).</param>
        /// <param name="errorCode">Error code indicates a fatal sync error code, if applicable. (required).</param>
        /// <param name="startedAt">Time that the extract phase started. (required).</param>
        /// <param name="finishedAt">Time that the extract phase finished. (required).</param>
        public SyncExtractPhase(string addedCount = default(string), string updatedCount = default(string), string deletedCount = default(string), string extractCount = default(string), string errorCode = default(string), string startedAt = default(string), string finishedAt = default(string))
        {
            // to ensure "addedCount" is required (not null)
            if (addedCount == null)
            {
                throw new ArgumentNullException("addedCount is a required property for SyncExtractPhase and cannot be null");
            }
            this.AddedCount = addedCount;
            // to ensure "updatedCount" is required (not null)
            if (updatedCount == null)
            {
                throw new ArgumentNullException("updatedCount is a required property for SyncExtractPhase and cannot be null");
            }
            this.UpdatedCount = updatedCount;
            // to ensure "deletedCount" is required (not null)
            if (deletedCount == null)
            {
                throw new ArgumentNullException("deletedCount is a required property for SyncExtractPhase and cannot be null");
            }
            this.DeletedCount = deletedCount;
            // to ensure "extractCount" is required (not null)
            if (extractCount == null)
            {
                throw new ArgumentNullException("extractCount is a required property for SyncExtractPhase and cannot be null");
            }
            this.ExtractCount = extractCount;
            // to ensure "errorCode" is required (not null)
            if (errorCode == null)
            {
                throw new ArgumentNullException("errorCode is a required property for SyncExtractPhase and cannot be null");
            }
            this.ErrorCode = errorCode;
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new ArgumentNullException("startedAt is a required property for SyncExtractPhase and cannot be null");
            }
            this.StartedAt = startedAt;
            // to ensure "finishedAt" is required (not null)
            if (finishedAt == null)
            {
                throw new ArgumentNullException("finishedAt is a required property for SyncExtractPhase and cannot be null");
            }
            this.FinishedAt = finishedAt;
        }

        /// <summary>
        /// Counts the subset of records with status&#x3D;new, which indicates records that were created/inserted/added.
        /// </summary>
        /// <value>Counts the subset of records with status&#x3D;new, which indicates records that were created/inserted/added.</value>
        [DataMember(Name = "addedCount", IsRequired = true, EmitDefaultValue = true)]
        public string AddedCount { get; set; }

        /// <summary>
        /// Counts the subset of records with status&#x3D;updated, which indicates records that were modified/updated.
        /// </summary>
        /// <value>Counts the subset of records with status&#x3D;updated, which indicates records that were modified/updated.</value>
        [DataMember(Name = "updatedCount", IsRequired = true, EmitDefaultValue = true)]
        public string UpdatedCount { get; set; }

        /// <summary>
        /// Counts the subset of records with status&#x3D;deleted, which indicates records that were deleted/removed.
        /// </summary>
        /// <value>Counts the subset of records with status&#x3D;deleted, which indicates records that were deleted/removed.</value>
        [DataMember(Name = "deletedCount", IsRequired = true, EmitDefaultValue = true)]
        public string DeletedCount { get; set; }

        /// <summary>
        /// Counts the total number of records/rows handled by extract, across all statuses.
        /// </summary>
        /// <value>Counts the total number of records/rows handled by extract, across all statuses.</value>
        [DataMember(Name = "extractCount", IsRequired = true, EmitDefaultValue = true)]
        public string ExtractCount { get; set; }

        /// <summary>
        /// Error code indicates a fatal sync error code, if applicable.
        /// </summary>
        /// <value>Error code indicates a fatal sync error code, if applicable.</value>
        [DataMember(Name = "errorCode", IsRequired = true, EmitDefaultValue = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Time that the extract phase started.
        /// </summary>
        /// <value>Time that the extract phase started.</value>
        [DataMember(Name = "startedAt", IsRequired = true, EmitDefaultValue = true)]
        public string StartedAt { get; set; }

        /// <summary>
        /// Time that the extract phase finished.
        /// </summary>
        /// <value>Time that the extract phase finished.</value>
        [DataMember(Name = "finishedAt", IsRequired = true, EmitDefaultValue = true)]
        public string FinishedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SyncExtractPhase {\n");
            sb.Append("  AddedCount: ").Append(AddedCount).Append("\n");
            sb.Append("  UpdatedCount: ").Append(UpdatedCount).Append("\n");
            sb.Append("  DeletedCount: ").Append(DeletedCount).Append("\n");
            sb.Append("  ExtractCount: ").Append(ExtractCount).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SyncExtractPhase);
        }

        /// <summary>
        /// Returns true if SyncExtractPhase instances are equal
        /// </summary>
        /// <param name="input">Instance of SyncExtractPhase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SyncExtractPhase input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddedCount == input.AddedCount ||
                    (this.AddedCount != null &&
                    this.AddedCount.Equals(input.AddedCount))
                ) && 
                (
                    this.UpdatedCount == input.UpdatedCount ||
                    (this.UpdatedCount != null &&
                    this.UpdatedCount.Equals(input.UpdatedCount))
                ) && 
                (
                    this.DeletedCount == input.DeletedCount ||
                    (this.DeletedCount != null &&
                    this.DeletedCount.Equals(input.DeletedCount))
                ) && 
                (
                    this.ExtractCount == input.ExtractCount ||
                    (this.ExtractCount != null &&
                    this.ExtractCount.Equals(input.ExtractCount))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    (this.StartedAt != null &&
                    this.StartedAt.Equals(input.StartedAt))
                ) && 
                (
                    this.FinishedAt == input.FinishedAt ||
                    (this.FinishedAt != null &&
                    this.FinishedAt.Equals(input.FinishedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddedCount != null)
                {
                    hashCode = (hashCode * 59) + this.AddedCount.GetHashCode();
                }
                if (this.UpdatedCount != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedCount.GetHashCode();
                }
                if (this.DeletedCount != null)
                {
                    hashCode = (hashCode * 59) + this.DeletedCount.GetHashCode();
                }
                if (this.ExtractCount != null)
                {
                    hashCode = (hashCode * 59) + this.ExtractCount.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.StartedAt != null)
                {
                    hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
                }
                if (this.FinishedAt != null)
                {
                    hashCode = (hashCode * 59) + this.FinishedAt.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
