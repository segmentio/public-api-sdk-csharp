/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to create an audience.
    /// </summary>
    [DataContract(Name = "CreateAudienceBetaInput")]
    public partial class CreateAudienceBetaInput : IEquatable<CreateAudienceBetaInput>, IValidatableObject
    {
        /// <summary>
        /// Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ProductVariantEnum
        {
            /// <summary>
            /// Enum ACCOUNTS for value: ACCOUNTS
            /// </summary>
            [EnumMember(Value = "ACCOUNTS")]
            ACCOUNTS = 1,

            /// <summary>
            /// Enum LINKED for value: LINKED
            /// </summary>
            [EnumMember(Value = "LINKED")]
            LINKED = 2,

            /// <summary>
            /// Enum USERS for value: USERS
            /// </summary>
            [EnumMember(Value = "USERS")]
            USERS = 3
        }


        /// <summary>
        /// Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.
        /// </summary>
        /// <value>Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED.</value>
        [DataMember(Name = "productVariant", IsRequired = true, EmitDefaultValue = true)]
        public ProductVariantEnum ProductVariant { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudienceBetaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateAudienceBetaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateAudienceBetaInput" /> class.
        /// </summary>
        /// <param name="name">Name of the audience. (required).</param>
        /// <param name="enabled">Determines whether a computation is enabled..</param>
        /// <param name="description">Description of the audience..</param>
        /// <param name="computeConditionsWrapper">computeConditionsWrapper (required).</param>
        /// <param name="productVariant">Denotes the type of audience product.  Possible values: USERS, ACCOUNTS, LINKED. (required).</param>
        /// <param name="options">options.</param>
        public CreateAudienceBetaInput(string name = default(string), bool enabled = default(bool), string description = default(string), ComputeConditionsWrapper computeConditionsWrapper = default(ComputeConditionsWrapper), ProductVariantEnum productVariant = default(ProductVariantEnum), AudienceOptions options = default(AudienceOptions))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CreateAudienceBetaInput and cannot be null");
            }
            this.Name = name;
            // to ensure "computeConditionsWrapper" is required (not null)
            if (computeConditionsWrapper == null)
            {
                throw new ArgumentNullException("computeConditionsWrapper is a required property for CreateAudienceBetaInput and cannot be null");
            }
            this.ComputeConditionsWrapper = computeConditionsWrapper;
            this.ProductVariant = productVariant;
            this.Enabled = enabled;
            this.Description = description;
            this.Options = options;
        }

        /// <summary>
        /// Name of the audience.
        /// </summary>
        /// <value>Name of the audience.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Determines whether a computation is enabled.
        /// </summary>
        /// <value>Determines whether a computation is enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Description of the audience.
        /// </summary>
        /// <value>Description of the audience.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ComputeConditionsWrapper
        /// </summary>
        [DataMember(Name = "computeConditionsWrapper", IsRequired = true, EmitDefaultValue = true)]
        public ComputeConditionsWrapper ComputeConditionsWrapper { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public AudienceOptions Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateAudienceBetaInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ComputeConditionsWrapper: ").Append(ComputeConditionsWrapper).Append("\n");
            sb.Append("  ProductVariant: ").Append(ProductVariant).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateAudienceBetaInput);
        }

        /// <summary>
        /// Returns true if CreateAudienceBetaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateAudienceBetaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateAudienceBetaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ComputeConditionsWrapper == input.ComputeConditionsWrapper ||
                    (this.ComputeConditionsWrapper != null &&
                    this.ComputeConditionsWrapper.Equals(input.ComputeConditionsWrapper))
                ) && 
                (
                    this.ProductVariant == input.ProductVariant ||
                    this.ProductVariant.Equals(input.ProductVariant)
                ) && 
                (
                    this.Options == input.Options ||
                    (this.Options != null &&
                    this.Options.Equals(input.Options))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.ComputeConditionsWrapper != null)
                {
                    hashCode = (hashCode * 59) + this.ComputeConditionsWrapper.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ProductVariant.GetHashCode();
                if (this.Options != null)
                {
                    hashCode = (hashCode * 59) + this.Options.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
