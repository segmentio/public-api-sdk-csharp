/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.9.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Pagination metadata for a list response.  Responses return this object alongside a list of resources, which provides the necessary metadata for manipulating a paginated collection. In operations that return lists, it&#39;s always present, though some of its fields might not be.
    /// </summary>
    [DataContract(Name = "PaginationOutput")]
    public partial class PaginationOutput : IEquatable<PaginationOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaginationOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaginationOutput" /> class.
        /// </summary>
        /// <param name="current">The current cursor within a collection.  Consumers of the API must treat this value as opaque. (required).</param>
        /// <param name="next">A pointer to the next page.  This does not return when you retrieve the last page.  Consumers of the API must treat this value as opaque..</param>
        /// <param name="previous">A pointer to the previous page.  This does not return when you retrieve the first page.  Consumers of the API must treat this value as opaque..</param>
        /// <param name="totalEntries">The total number of entries available in the collection.  If calculating it impacts performance, the response may omit this field..</param>
        public PaginationOutput(string current = default(string), string next = default(string), string previous = default(string), decimal totalEntries = default(decimal))
        {
            // to ensure "current" is required (not null)
            if (current == null)
            {
                throw new ArgumentNullException("current is a required property for PaginationOutput and cannot be null");
            }
            this.Current = current;
            this.Next = next;
            this.Previous = previous;
            this.TotalEntries = totalEntries;
        }

        /// <summary>
        /// The current cursor within a collection.  Consumers of the API must treat this value as opaque.
        /// </summary>
        /// <value>The current cursor within a collection.  Consumers of the API must treat this value as opaque.</value>
        [DataMember(Name = "current", IsRequired = true, EmitDefaultValue = true)]
        public string Current { get; set; }

        /// <summary>
        /// A pointer to the next page.  This does not return when you retrieve the last page.  Consumers of the API must treat this value as opaque.
        /// </summary>
        /// <value>A pointer to the next page.  This does not return when you retrieve the last page.  Consumers of the API must treat this value as opaque.</value>
        [DataMember(Name = "next", EmitDefaultValue = true)]
        public string Next { get; set; }

        /// <summary>
        /// A pointer to the previous page.  This does not return when you retrieve the first page.  Consumers of the API must treat this value as opaque.
        /// </summary>
        /// <value>A pointer to the previous page.  This does not return when you retrieve the first page.  Consumers of the API must treat this value as opaque.</value>
        [DataMember(Name = "previous", EmitDefaultValue = true)]
        public string Previous { get; set; }

        /// <summary>
        /// The total number of entries available in the collection.  If calculating it impacts performance, the response may omit this field.
        /// </summary>
        /// <value>The total number of entries available in the collection.  If calculating it impacts performance, the response may omit this field.</value>
        [DataMember(Name = "totalEntries", EmitDefaultValue = false)]
        public decimal TotalEntries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaginationOutput {\n");
            sb.Append("  Current: ").Append(Current).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  TotalEntries: ").Append(TotalEntries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaginationOutput);
        }

        /// <summary>
        /// Returns true if PaginationOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of PaginationOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaginationOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Current == input.Current ||
                    (this.Current != null &&
                    this.Current.Equals(input.Current))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Previous == input.Previous ||
                    (this.Previous != null &&
                    this.Previous.Equals(input.Previous))
                ) && 
                (
                    this.TotalEntries == input.TotalEntries ||
                    this.TotalEntries.Equals(input.TotalEntries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Current != null)
                {
                    hashCode = (hashCode * 59) + this.Current.GetHashCode();
                }
                if (this.Next != null)
                {
                    hashCode = (hashCode * 59) + this.Next.GetHashCode();
                }
                if (this.Previous != null)
                {
                    hashCode = (hashCode * 59) + this.Previous.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalEntries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
