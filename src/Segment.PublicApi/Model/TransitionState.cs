/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 57.4.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// TransitionState
    /// </summary>
    [JsonConverter(typeof(TransitionStateJsonConverter))]
    [DataContract(Name = "TransitionState")]
    public partial class TransitionState : AbstractOpenAPISchema, IEquatable<TransitionState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="EventEntryState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EventEntryState.</param>
        public TransitionState(EventEntryState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="AudienceEntryState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of AudienceEntryState.</param>
        public TransitionState(AudienceEntryState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="DestinationState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DestinationState.</param>
        public TransitionState(DestinationState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="SimpleDelayState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of SimpleDelayState.</param>
        public TransitionState(SimpleDelayState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="EventSplitWithTimeoutState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EventSplitWithTimeoutState.</param>
        public TransitionState(EventSplitWithTimeoutState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="ConditionSplitState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ConditionSplitState.</param>
        public TransitionState(ConditionSplitState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransitionState" /> class
        /// with the <see cref="RandomSplitState" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of RandomSplitState.</param>
        public TransitionState(RandomSplitState actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(AudienceEntryState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(ConditionSplitState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DestinationState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EventEntryState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(EventSplitWithTimeoutState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(RandomSplitState))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(SimpleDelayState))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: AudienceEntryState, ConditionSplitState, DestinationState, EventEntryState, EventSplitWithTimeoutState, RandomSplitState, SimpleDelayState");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `EventEntryState`. If the actual instance is not `EventEntryState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EventEntryState</returns>
        public EventEntryState GetEventEntryState()
        {
            return (EventEntryState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `AudienceEntryState`. If the actual instance is not `AudienceEntryState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of AudienceEntryState</returns>
        public AudienceEntryState GetAudienceEntryState()
        {
            return (AudienceEntryState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `DestinationState`. If the actual instance is not `DestinationState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DestinationState</returns>
        public DestinationState GetDestinationState()
        {
            return (DestinationState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `SimpleDelayState`. If the actual instance is not `SimpleDelayState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of SimpleDelayState</returns>
        public SimpleDelayState GetSimpleDelayState()
        {
            return (SimpleDelayState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `EventSplitWithTimeoutState`. If the actual instance is not `EventSplitWithTimeoutState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EventSplitWithTimeoutState</returns>
        public EventSplitWithTimeoutState GetEventSplitWithTimeoutState()
        {
            return (EventSplitWithTimeoutState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ConditionSplitState`. If the actual instance is not `ConditionSplitState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ConditionSplitState</returns>
        public ConditionSplitState GetConditionSplitState()
        {
            return (ConditionSplitState)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `RandomSplitState`. If the actual instance is not `RandomSplitState`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of RandomSplitState</returns>
        public RandomSplitState GetRandomSplitState()
        {
            return (RandomSplitState)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransitionState {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, TransitionState.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of TransitionState
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of TransitionState</returns>
        public static TransitionState FromJson(string jsonString)
        {
            TransitionState newTransitionState = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newTransitionState;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(AudienceEntryState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<AudienceEntryState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<AudienceEntryState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("AudienceEntryState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AudienceEntryState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ConditionSplitState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<ConditionSplitState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<ConditionSplitState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("ConditionSplitState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into ConditionSplitState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DestinationState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<DestinationState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<DestinationState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DestinationState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DestinationState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EventEntryState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<EventEntryState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<EventEntryState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EventEntryState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EventEntryState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EventSplitWithTimeoutState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<EventSplitWithTimeoutState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<EventSplitWithTimeoutState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("EventSplitWithTimeoutState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into EventSplitWithTimeoutState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(RandomSplitState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<RandomSplitState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<RandomSplitState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("RandomSplitState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into RandomSplitState: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(SimpleDelayState).GetProperty("AdditionalProperties") == null)
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<SimpleDelayState>(jsonString, TransitionState.SerializerSettings));
                }
                else
                {
                    newTransitionState = new TransitionState(JsonConvert.DeserializeObject<SimpleDelayState>(jsonString, TransitionState.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("SimpleDelayState");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into SimpleDelayState: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newTransitionState;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransitionState);
        }

        /// <summary>
        /// Returns true if TransitionState instances are equal
        /// </summary>
        /// <param name="input">Instance of TransitionState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransitionState input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for TransitionState
    /// </summary>
    public class TransitionStateJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(TransitionState).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return TransitionState.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
