/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// CancelReverseETLSyncForModelOutput either will return an error or a \&quot;CANCELLING\&quot; status.
    /// </summary>
    [DataContract(Name = "CancelReverseETLSyncForModelOutput")]
    public partial class CancelReverseETLSyncForModelOutput : IEquatable<CancelReverseETLSyncForModelOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelReverseETLSyncForModelOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelReverseETLSyncForModelOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelReverseETLSyncForModelOutput" /> class.
        /// </summary>
        /// <param name="modelId">The id of the Model. (required).</param>
        /// <param name="syncId">The id of the Sync. (required).</param>
        /// <param name="errorCode">A place holder for a machine-friendly category for an error, if applicable. - \&quot;SyncAlreadyCanceled\&quot; - \&quot;SyncFinishedCannotCancel\&quot;.</param>
        /// <param name="errorMessage">A place holder for a human-readable description of the error, if applicable. - \&quot;sync already canceled\&quot; - \&quot;sync already finished\&quot;..</param>
        /// <param name="status">If no error, status will be CANCELLING, as the extract/load might take some time to cancel..</param>
        public CancelReverseETLSyncForModelOutput(string modelId = default(string), string syncId = default(string), string errorCode = default(string), string errorMessage = default(string), string status = default(string))
        {
            // to ensure "modelId" is required (not null)
            if (modelId == null)
            {
                throw new ArgumentNullException("modelId is a required property for CancelReverseETLSyncForModelOutput and cannot be null");
            }
            this.ModelId = modelId;
            // to ensure "syncId" is required (not null)
            if (syncId == null)
            {
                throw new ArgumentNullException("syncId is a required property for CancelReverseETLSyncForModelOutput and cannot be null");
            }
            this.SyncId = syncId;
            this.ErrorCode = errorCode;
            this.ErrorMessage = errorMessage;
            this.Status = status;
        }

        /// <summary>
        /// The id of the Model.
        /// </summary>
        /// <value>The id of the Model.</value>
        [DataMember(Name = "modelId", IsRequired = true, EmitDefaultValue = true)]
        public string ModelId { get; set; }

        /// <summary>
        /// The id of the Sync.
        /// </summary>
        /// <value>The id of the Sync.</value>
        [DataMember(Name = "syncId", IsRequired = true, EmitDefaultValue = true)]
        public string SyncId { get; set; }

        /// <summary>
        /// A place holder for a machine-friendly category for an error, if applicable. - \&quot;SyncAlreadyCanceled\&quot; - \&quot;SyncFinishedCannotCancel\&quot;
        /// </summary>
        /// <value>A place holder for a machine-friendly category for an error, if applicable. - \&quot;SyncAlreadyCanceled\&quot; - \&quot;SyncFinishedCannotCancel\&quot;</value>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// A place holder for a human-readable description of the error, if applicable. - \&quot;sync already canceled\&quot; - \&quot;sync already finished\&quot;.
        /// </summary>
        /// <value>A place holder for a human-readable description of the error, if applicable. - \&quot;sync already canceled\&quot; - \&quot;sync already finished\&quot;.</value>
        [DataMember(Name = "errorMessage", EmitDefaultValue = false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// If no error, status will be CANCELLING, as the extract/load might take some time to cancel.
        /// </summary>
        /// <value>If no error, status will be CANCELLING, as the extract/load might take some time to cancel.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelReverseETLSyncForModelOutput {\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelReverseETLSyncForModelOutput);
        }

        /// <summary>
        /// Returns true if CancelReverseETLSyncForModelOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelReverseETLSyncForModelOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelReverseETLSyncForModelOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) && 
                (
                    this.SyncId == input.SyncId ||
                    (this.SyncId != null &&
                    this.SyncId.Equals(input.SyncId))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ModelId != null)
                {
                    hashCode = (hashCode * 59) + this.ModelId.GetHashCode();
                }
                if (this.SyncId != null)
                {
                    hashCode = (hashCode * 59) + this.SyncId.GetHashCode();
                }
                if (this.ErrorCode != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                }
                if (this.ErrorMessage != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorMessage.GetHashCode();
                }
                if (this.Status != null)
                {
                    hashCode = (hashCode * 59) + this.Status.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
