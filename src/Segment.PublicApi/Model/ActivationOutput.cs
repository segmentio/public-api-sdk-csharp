/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.3
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// A class that encapsulates the complete activation output with full details.
    /// </summary>
    [DataContract(Name = "ActivationOutput")]
    public partial class ActivationOutput : IEquatable<ActivationOutput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivationOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivationOutput" /> class.
        /// </summary>
        /// <param name="id">The activation id. (required).</param>
        /// <param name="enabled">Activation Enabled Status. (required).</param>
        /// <param name="workspaceId">The WORKSPACE id. (required).</param>
        /// <param name="spaceId">The space id. (required).</param>
        /// <param name="audienceId">The audience id. (required).</param>
        /// <param name="destinationConnectionId">The DESTINATION connection id (formerly integrationInstanceId). (required).</param>
        /// <param name="activationType">Type of activation trigger. (required).</param>
        /// <param name="activationName">Name of the activation. (required).</param>
        /// <param name="personalization">personalization (required).</param>
        /// <param name="destinationMapping">destinationMapping.</param>
        /// <param name="performResync">Whether to perform a resync after creation of the activation..</param>
        public ActivationOutput(string id = default(string), bool enabled = default(bool), string workspaceId = default(string), string spaceId = default(string), string audienceId = default(string), string destinationConnectionId = default(string), string activationType = default(string), string activationName = default(string), PersonalizationInput personalization = default(PersonalizationInput), DestinationSubscriptionConfiguration destinationMapping = default(DestinationSubscriptionConfiguration), bool performResync = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for ActivationOutput and cannot be null");
            }
            this.Id = id;
            this.Enabled = enabled;
            // to ensure "workspaceId" is required (not null)
            if (workspaceId == null)
            {
                throw new ArgumentNullException("workspaceId is a required property for ActivationOutput and cannot be null");
            }
            this.WorkspaceId = workspaceId;
            // to ensure "spaceId" is required (not null)
            if (spaceId == null)
            {
                throw new ArgumentNullException("spaceId is a required property for ActivationOutput and cannot be null");
            }
            this.SpaceId = spaceId;
            // to ensure "audienceId" is required (not null)
            if (audienceId == null)
            {
                throw new ArgumentNullException("audienceId is a required property for ActivationOutput and cannot be null");
            }
            this.AudienceId = audienceId;
            // to ensure "destinationConnectionId" is required (not null)
            if (destinationConnectionId == null)
            {
                throw new ArgumentNullException("destinationConnectionId is a required property for ActivationOutput and cannot be null");
            }
            this.DestinationConnectionId = destinationConnectionId;
            // to ensure "activationType" is required (not null)
            if (activationType == null)
            {
                throw new ArgumentNullException("activationType is a required property for ActivationOutput and cannot be null");
            }
            this.ActivationType = activationType;
            // to ensure "activationName" is required (not null)
            if (activationName == null)
            {
                throw new ArgumentNullException("activationName is a required property for ActivationOutput and cannot be null");
            }
            this.ActivationName = activationName;
            // to ensure "personalization" is required (not null)
            if (personalization == null)
            {
                throw new ArgumentNullException("personalization is a required property for ActivationOutput and cannot be null");
            }
            this.Personalization = personalization;
            this.DestinationMapping = destinationMapping;
            this.PerformResync = performResync;
        }

        /// <summary>
        /// The activation id.
        /// </summary>
        /// <value>The activation id.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// Activation Enabled Status.
        /// </summary>
        /// <value>Activation Enabled Status.</value>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The WORKSPACE id.
        /// </summary>
        /// <value>The WORKSPACE id.</value>
        [DataMember(Name = "workspaceId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// The space id.
        /// </summary>
        /// <value>The space id.</value>
        [DataMember(Name = "spaceId", IsRequired = true, EmitDefaultValue = true)]
        public string SpaceId { get; set; }

        /// <summary>
        /// The audience id.
        /// </summary>
        /// <value>The audience id.</value>
        [DataMember(Name = "audienceId", IsRequired = true, EmitDefaultValue = true)]
        public string AudienceId { get; set; }

        /// <summary>
        /// The DESTINATION connection id (formerly integrationInstanceId).
        /// </summary>
        /// <value>The DESTINATION connection id (formerly integrationInstanceId).</value>
        [DataMember(Name = "destinationConnectionId", IsRequired = true, EmitDefaultValue = true)]
        public string DestinationConnectionId { get; set; }

        /// <summary>
        /// Type of activation trigger.
        /// </summary>
        /// <value>Type of activation trigger.</value>
        [DataMember(Name = "activationType", IsRequired = true, EmitDefaultValue = true)]
        public string ActivationType { get; set; }

        /// <summary>
        /// Name of the activation.
        /// </summary>
        /// <value>Name of the activation.</value>
        [DataMember(Name = "activationName", IsRequired = true, EmitDefaultValue = true)]
        public string ActivationName { get; set; }

        /// <summary>
        /// Gets or Sets Personalization
        /// </summary>
        [DataMember(Name = "personalization", IsRequired = true, EmitDefaultValue = true)]
        public PersonalizationInput Personalization { get; set; }

        /// <summary>
        /// Gets or Sets DestinationMapping
        /// </summary>
        [DataMember(Name = "destinationMapping", EmitDefaultValue = false)]
        public DestinationSubscriptionConfiguration DestinationMapping { get; set; }

        /// <summary>
        /// Whether to perform a resync after creation of the activation.
        /// </summary>
        /// <value>Whether to perform a resync after creation of the activation.</value>
        [DataMember(Name = "performResync", EmitDefaultValue = true)]
        public bool PerformResync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivationOutput {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  SpaceId: ").Append(SpaceId).Append("\n");
            sb.Append("  AudienceId: ").Append(AudienceId).Append("\n");
            sb.Append("  DestinationConnectionId: ").Append(DestinationConnectionId).Append("\n");
            sb.Append("  ActivationType: ").Append(ActivationType).Append("\n");
            sb.Append("  ActivationName: ").Append(ActivationName).Append("\n");
            sb.Append("  Personalization: ").Append(Personalization).Append("\n");
            sb.Append("  DestinationMapping: ").Append(DestinationMapping).Append("\n");
            sb.Append("  PerformResync: ").Append(PerformResync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActivationOutput);
        }

        /// <summary>
        /// Returns true if ActivationOutput instances are equal
        /// </summary>
        /// <param name="input">Instance of ActivationOutput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActivationOutput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.SpaceId == input.SpaceId ||
                    (this.SpaceId != null &&
                    this.SpaceId.Equals(input.SpaceId))
                ) && 
                (
                    this.AudienceId == input.AudienceId ||
                    (this.AudienceId != null &&
                    this.AudienceId.Equals(input.AudienceId))
                ) && 
                (
                    this.DestinationConnectionId == input.DestinationConnectionId ||
                    (this.DestinationConnectionId != null &&
                    this.DestinationConnectionId.Equals(input.DestinationConnectionId))
                ) && 
                (
                    this.ActivationType == input.ActivationType ||
                    (this.ActivationType != null &&
                    this.ActivationType.Equals(input.ActivationType))
                ) && 
                (
                    this.ActivationName == input.ActivationName ||
                    (this.ActivationName != null &&
                    this.ActivationName.Equals(input.ActivationName))
                ) && 
                (
                    this.Personalization == input.Personalization ||
                    (this.Personalization != null &&
                    this.Personalization.Equals(input.Personalization))
                ) && 
                (
                    this.DestinationMapping == input.DestinationMapping ||
                    (this.DestinationMapping != null &&
                    this.DestinationMapping.Equals(input.DestinationMapping))
                ) && 
                (
                    this.PerformResync == input.PerformResync ||
                    this.PerformResync.Equals(input.PerformResync)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.WorkspaceId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                }
                if (this.SpaceId != null)
                {
                    hashCode = (hashCode * 59) + this.SpaceId.GetHashCode();
                }
                if (this.AudienceId != null)
                {
                    hashCode = (hashCode * 59) + this.AudienceId.GetHashCode();
                }
                if (this.DestinationConnectionId != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationConnectionId.GetHashCode();
                }
                if (this.ActivationType != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationType.GetHashCode();
                }
                if (this.ActivationName != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationName.GetHashCode();
                }
                if (this.Personalization != null)
                {
                    hashCode = (hashCode * 59) + this.Personalization.GetHashCode();
                }
                if (this.DestinationMapping != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationMapping.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PerformResync.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
