/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Sort criteria input for list audience consumers.
    /// </summary>
    [DataContract(Name = "ListAudienceConsumersSortInput")]
    public partial class ListAudienceConsumersSortInput : IEquatable<ListAudienceConsumersSortInput>, IValidatableObject
    {
        /// <summary>
        /// Field to sort by.
        /// </summary>
        /// <value>Field to sort by.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldEnum
        {
            /// <summary>
            /// Enum CREATEDAT for value: CREATED_AT
            /// </summary>
            [EnumMember(Value = "CREATED_AT")]
            CREATEDAT = 1,

            /// <summary>
            /// Enum NAME for value: NAME
            /// </summary>
            [EnumMember(Value = "NAME")]
            NAME = 2,

            /// <summary>
            /// Enum UPDATEDAT for value: UPDATED_AT
            /// </summary>
            [EnumMember(Value = "UPDATED_AT")]
            UPDATEDAT = 3
        }


        /// <summary>
        /// Field to sort by.
        /// </summary>
        /// <value>Field to sort by.</value>
        [DataMember(Name = "field", IsRequired = true, EmitDefaultValue = true)]
        public FieldEnum Field { get; set; }
        /// <summary>
        /// Sort direction (ascending or descending).
        /// </summary>
        /// <value>Sort direction (ascending or descending).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Sort direction (ascending or descending).
        /// </summary>
        /// <value>Sort direction (ascending or descending).</value>
        [DataMember(Name = "direction", IsRequired = true, EmitDefaultValue = true)]
        public DirectionEnum Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAudienceConsumersSortInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListAudienceConsumersSortInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListAudienceConsumersSortInput" /> class.
        /// </summary>
        /// <param name="field">Field to sort by. (required).</param>
        /// <param name="direction">Sort direction (ascending or descending). (required).</param>
        public ListAudienceConsumersSortInput(FieldEnum field = default(FieldEnum), DirectionEnum direction = default(DirectionEnum))
        {
            this.Field = field;
            this.Direction = direction;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListAudienceConsumersSortInput {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListAudienceConsumersSortInput);
        }

        /// <summary>
        /// Returns true if ListAudienceConsumersSortInput instances are equal
        /// </summary>
        /// <param name="input">Instance of ListAudienceConsumersSortInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListAudienceConsumersSortInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Field == input.Field ||
                    this.Field.Equals(input.Field)
                ) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Field.GetHashCode();
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
