/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// A simplified Destination filter that includes the if and actions for a DestinationFilterV1.
    /// </summary>
    [DataContract(Name = "PreviewDestinationFilterV1")]
    public partial class PreviewDestinationFilterV1 : IEquatable<PreviewDestinationFilterV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviewDestinationFilterV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PreviewDestinationFilterV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreviewDestinationFilterV1" /> class.
        /// </summary>
        /// <param name="varIf">A FQL statement which determines if the provided filter&#39;s actions will apply to the provided JSON payload. The literal string \&quot;all\&quot; will result in this filter to all events. For guidance on using FQL, see the Segment documentation site. (required).</param>
        /// <param name="actions">The filtering action to take on events that match the \&quot;if\&quot; statement. Action types must be one of: \&quot;drop\&quot;, \&quot;allow_properties\&quot;, \&quot;drop_properties\&quot; or \&quot;sample\&quot;. (required).</param>
        public PreviewDestinationFilterV1(string varIf = default(string), List<DestinationFilterActionV1> actions = default(List<DestinationFilterActionV1>))
        {
            // to ensure "varIf" is required (not null)
            if (varIf == null)
            {
                throw new ArgumentNullException("varIf is a required property for PreviewDestinationFilterV1 and cannot be null");
            }
            this.VarIf = varIf;
            // to ensure "actions" is required (not null)
            if (actions == null)
            {
                throw new ArgumentNullException("actions is a required property for PreviewDestinationFilterV1 and cannot be null");
            }
            this.Actions = actions;
        }

        /// <summary>
        /// A FQL statement which determines if the provided filter&#39;s actions will apply to the provided JSON payload. The literal string \&quot;all\&quot; will result in this filter to all events. For guidance on using FQL, see the Segment documentation site.
        /// </summary>
        /// <value>A FQL statement which determines if the provided filter&#39;s actions will apply to the provided JSON payload. The literal string \&quot;all\&quot; will result in this filter to all events. For guidance on using FQL, see the Segment documentation site.</value>
        [DataMember(Name = "if", IsRequired = true, EmitDefaultValue = true)]
        public string VarIf { get; set; }

        /// <summary>
        /// The filtering action to take on events that match the \&quot;if\&quot; statement. Action types must be one of: \&quot;drop\&quot;, \&quot;allow_properties\&quot;, \&quot;drop_properties\&quot; or \&quot;sample\&quot;.
        /// </summary>
        /// <value>The filtering action to take on events that match the \&quot;if\&quot; statement. Action types must be one of: \&quot;drop\&quot;, \&quot;allow_properties\&quot;, \&quot;drop_properties\&quot; or \&quot;sample\&quot;.</value>
        [DataMember(Name = "actions", IsRequired = true, EmitDefaultValue = true)]
        public List<DestinationFilterActionV1> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PreviewDestinationFilterV1 {\n");
            sb.Append("  VarIf: ").Append(VarIf).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreviewDestinationFilterV1);
        }

        /// <summary>
        /// Returns true if PreviewDestinationFilterV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of PreviewDestinationFilterV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreviewDestinationFilterV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarIf == input.VarIf ||
                    (this.VarIf != null &&
                    this.VarIf.Equals(input.VarIf))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VarIf != null)
                {
                    hashCode = (hashCode * 59) + this.VarIf.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
