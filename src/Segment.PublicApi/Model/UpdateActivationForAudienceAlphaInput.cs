/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.7.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to update an activation.
    /// </summary>
    [DataContract(Name = "UpdateActivationForAudienceAlphaInput")]
    public partial class UpdateActivationForAudienceAlphaInput : IEquatable<UpdateActivationForAudienceAlphaInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateActivationForAudienceAlphaInput" /> class.
        /// </summary>
        /// <param name="enabled">Determines whether an activation is enabled..</param>
        /// <param name="activationName">Activation name..</param>
        /// <param name="personalization">personalization.</param>
        /// <param name="destinationMapping">destinationMapping.</param>
        /// <param name="performResync">Whether to perform a resync after creation of the activation..</param>
        public UpdateActivationForAudienceAlphaInput(bool enabled = default(bool), string activationName = default(string), PersonalizationInput personalization = default(PersonalizationInput), DestinationSubscriptionConfiguration destinationMapping = default(DestinationSubscriptionConfiguration), bool performResync = default(bool))
        {
            this.Enabled = enabled;
            this.ActivationName = activationName;
            this.Personalization = personalization;
            this.DestinationMapping = destinationMapping;
            this.PerformResync = performResync;
        }

        /// <summary>
        /// Determines whether an activation is enabled.
        /// </summary>
        /// <value>Determines whether an activation is enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Activation name.
        /// </summary>
        /// <value>Activation name.</value>
        [DataMember(Name = "activationName", EmitDefaultValue = false)]
        public string ActivationName { get; set; }

        /// <summary>
        /// Gets or Sets Personalization
        /// </summary>
        [DataMember(Name = "personalization", EmitDefaultValue = false)]
        public PersonalizationInput Personalization { get; set; }

        /// <summary>
        /// Gets or Sets DestinationMapping
        /// </summary>
        [DataMember(Name = "destinationMapping", EmitDefaultValue = false)]
        public DestinationSubscriptionConfiguration DestinationMapping { get; set; }

        /// <summary>
        /// Whether to perform a resync after creation of the activation.
        /// </summary>
        /// <value>Whether to perform a resync after creation of the activation.</value>
        [DataMember(Name = "performResync", EmitDefaultValue = true)]
        public bool PerformResync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateActivationForAudienceAlphaInput {\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ActivationName: ").Append(ActivationName).Append("\n");
            sb.Append("  Personalization: ").Append(Personalization).Append("\n");
            sb.Append("  DestinationMapping: ").Append(DestinationMapping).Append("\n");
            sb.Append("  PerformResync: ").Append(PerformResync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateActivationForAudienceAlphaInput);
        }

        /// <summary>
        /// Returns true if UpdateActivationForAudienceAlphaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateActivationForAudienceAlphaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateActivationForAudienceAlphaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.ActivationName == input.ActivationName ||
                    (this.ActivationName != null &&
                    this.ActivationName.Equals(input.ActivationName))
                ) && 
                (
                    this.Personalization == input.Personalization ||
                    (this.Personalization != null &&
                    this.Personalization.Equals(input.Personalization))
                ) && 
                (
                    this.DestinationMapping == input.DestinationMapping ||
                    (this.DestinationMapping != null &&
                    this.DestinationMapping.Equals(input.DestinationMapping))
                ) && 
                (
                    this.PerformResync == input.PerformResync ||
                    this.PerformResync.Equals(input.PerformResync)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.ActivationName != null)
                {
                    hashCode = (hashCode * 59) + this.ActivationName.GetHashCode();
                }
                if (this.Personalization != null)
                {
                    hashCode = (hashCode * 59) + this.Personalization.GetHashCode();
                }
                if (this.DestinationMapping != null)
                {
                    hashCode = (hashCode * 59) + this.DestinationMapping.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PerformResync.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
