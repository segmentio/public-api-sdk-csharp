/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.13.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Input to update an activation.
    /// </summary>
    [DataContract(Name = "UpdateActivationForAudienceAlphaInput")]
    public partial class UpdateActivationForAudienceAlphaInput : IEquatable<UpdateActivationForAudienceAlphaInput>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateActivationForAudienceAlphaInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateActivationForAudienceAlphaInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateActivationForAudienceAlphaInput" /> class.
        /// </summary>
        /// <param name="workspaceId">The Workspace id. (required).</param>
        /// <param name="enabled">Determines whether an activation is enabled..</param>
        /// <param name="eventEmitter">Configuration settings for the event emitter to be created. (required).</param>
        /// <param name="subscription">Subscription info to connect the event emitter to a Destination attached to the audience. (required).</param>
        public UpdateActivationForAudienceAlphaInput(string workspaceId = default(string), bool enabled = default(bool), Object eventEmitter = default(Object), Object subscription = default(Object))
        {
            // to ensure "workspaceId" is required (not null)
            if (workspaceId == null)
            {
                throw new ArgumentNullException("workspaceId is a required property for UpdateActivationForAudienceAlphaInput and cannot be null");
            }
            this.WorkspaceId = workspaceId;
            // to ensure "eventEmitter" is required (not null)
            if (eventEmitter == null)
            {
                throw new ArgumentNullException("eventEmitter is a required property for UpdateActivationForAudienceAlphaInput and cannot be null");
            }
            this.EventEmitter = eventEmitter;
            // to ensure "subscription" is required (not null)
            if (subscription == null)
            {
                throw new ArgumentNullException("subscription is a required property for UpdateActivationForAudienceAlphaInput and cannot be null");
            }
            this.Subscription = subscription;
            this.Enabled = enabled;
        }

        /// <summary>
        /// The Workspace id.
        /// </summary>
        /// <value>The Workspace id.</value>
        [DataMember(Name = "workspaceId", IsRequired = true, EmitDefaultValue = true)]
        public string WorkspaceId { get; set; }

        /// <summary>
        /// Determines whether an activation is enabled.
        /// </summary>
        /// <value>Determines whether an activation is enabled.</value>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Configuration settings for the event emitter to be created.
        /// </summary>
        /// <value>Configuration settings for the event emitter to be created.</value>
        [DataMember(Name = "eventEmitter", IsRequired = true, EmitDefaultValue = true)]
        public Object EventEmitter { get; set; }

        /// <summary>
        /// Subscription info to connect the event emitter to a Destination attached to the audience.
        /// </summary>
        /// <value>Subscription info to connect the event emitter to a Destination attached to the audience.</value>
        [DataMember(Name = "subscription", IsRequired = true, EmitDefaultValue = true)]
        public Object Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateActivationForAudienceAlphaInput {\n");
            sb.Append("  WorkspaceId: ").Append(WorkspaceId).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EventEmitter: ").Append(EventEmitter).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateActivationForAudienceAlphaInput);
        }

        /// <summary>
        /// Returns true if UpdateActivationForAudienceAlphaInput instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateActivationForAudienceAlphaInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateActivationForAudienceAlphaInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WorkspaceId == input.WorkspaceId ||
                    (this.WorkspaceId != null &&
                    this.WorkspaceId.Equals(input.WorkspaceId))
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.EventEmitter == input.EventEmitter ||
                    (this.EventEmitter != null &&
                    this.EventEmitter.Equals(input.EventEmitter))
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    (this.Subscription != null &&
                    this.Subscription.Equals(input.Subscription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WorkspaceId != null)
                {
                    hashCode = (hashCode * 59) + this.WorkspaceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                if (this.EventEmitter != null)
                {
                    hashCode = (hashCode * 59) + this.EventEmitter.GetHashCode();
                }
                if (this.Subscription != null)
                {
                    hashCode = (hashCode * 59) + this.Subscription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
