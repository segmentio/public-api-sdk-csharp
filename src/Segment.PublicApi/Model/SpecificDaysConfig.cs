/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.8.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// Configures a schedule for specific days and times.
    /// </summary>
    [DataContract(Name = "SpecificDaysConfig")]
    public partial class SpecificDaysConfig : IEquatable<SpecificDaysConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificDaysConfig" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SpecificDaysConfig() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecificDaysConfig" /> class.
        /// </summary>
        /// <param name="days">Days of week for schedule (0&#x3D;Sunday, 6&#x3D;Saturday). (required).</param>
        /// <param name="hours">Hours of day for schedule (0-23). (required).</param>
        /// <param name="timezone">TZ database time zone identifier; for example, America/New_York. (required).</param>
        public SpecificDaysConfig(List<decimal> days = default(List<decimal>), List<decimal> hours = default(List<decimal>), string timezone = default(string))
        {
            // to ensure "days" is required (not null)
            if (days == null)
            {
                throw new ArgumentNullException("days is a required property for SpecificDaysConfig and cannot be null");
            }
            this.Days = days;
            // to ensure "hours" is required (not null)
            if (hours == null)
            {
                throw new ArgumentNullException("hours is a required property for SpecificDaysConfig and cannot be null");
            }
            this.Hours = hours;
            // to ensure "timezone" is required (not null)
            if (timezone == null)
            {
                throw new ArgumentNullException("timezone is a required property for SpecificDaysConfig and cannot be null");
            }
            this.Timezone = timezone;
        }

        /// <summary>
        /// Days of week for schedule (0&#x3D;Sunday, 6&#x3D;Saturday).
        /// </summary>
        /// <value>Days of week for schedule (0&#x3D;Sunday, 6&#x3D;Saturday).</value>
        [DataMember(Name = "days", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> Days { get; set; }

        /// <summary>
        /// Hours of day for schedule (0-23).
        /// </summary>
        /// <value>Hours of day for schedule (0-23).</value>
        [DataMember(Name = "hours", IsRequired = true, EmitDefaultValue = true)]
        public List<decimal> Hours { get; set; }

        /// <summary>
        /// TZ database time zone identifier; for example, America/New_York.
        /// </summary>
        /// <value>TZ database time zone identifier; for example, America/New_York.</value>
        [DataMember(Name = "timezone", IsRequired = true, EmitDefaultValue = true)]
        public string Timezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecificDaysConfig {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecificDaysConfig);
        }

        /// <summary>
        /// Returns true if SpecificDaysConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecificDaysConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecificDaysConfig input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Days == input.Days ||
                    this.Days != null &&
                    input.Days != null &&
                    this.Days.SequenceEqual(input.Days)
                ) && 
                (
                    this.Hours == input.Hours ||
                    this.Hours != null &&
                    input.Hours != null &&
                    this.Hours.SequenceEqual(input.Hours)
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                {
                    hashCode = (hashCode * 59) + this.Days.GetHashCode();
                }
                if (this.Hours != null)
                {
                    hashCode = (hashCode * 59) + this.Hours.GetHashCode();
                }
                if (this.Timezone != null)
                {
                    hashCode = (hashCode * 59) + this.Timezone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
