/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 60.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// FQLDefinedPropertyV1
    /// </summary>
    [DataContract(Name = "FQLDefinedPropertyV1")]
    public partial class FQLDefinedPropertyV1 : IEquatable<FQLDefinedPropertyV1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FQLDefinedPropertyV1" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FQLDefinedPropertyV1() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FQLDefinedPropertyV1" /> class.
        /// </summary>
        /// <param name="fql">The FQL expression used to compute the property. (required).</param>
        /// <param name="propertyName">The new property name. (required).</param>
        public FQLDefinedPropertyV1(string fql = default(string), string propertyName = default(string))
        {
            // to ensure "fql" is required (not null)
            if (fql == null)
            {
                throw new ArgumentNullException("fql is a required property for FQLDefinedPropertyV1 and cannot be null");
            }
            this.Fql = fql;
            // to ensure "propertyName" is required (not null)
            if (propertyName == null)
            {
                throw new ArgumentNullException("propertyName is a required property for FQLDefinedPropertyV1 and cannot be null");
            }
            this.PropertyName = propertyName;
        }

        /// <summary>
        /// The FQL expression used to compute the property.
        /// </summary>
        /// <value>The FQL expression used to compute the property.</value>
        [DataMember(Name = "fql", IsRequired = true, EmitDefaultValue = true)]
        public string Fql { get; set; }

        /// <summary>
        /// The new property name.
        /// </summary>
        /// <value>The new property name.</value>
        [DataMember(Name = "propertyName", IsRequired = true, EmitDefaultValue = true)]
        public string PropertyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FQLDefinedPropertyV1 {\n");
            sb.Append("  Fql: ").Append(Fql).Append("\n");
            sb.Append("  PropertyName: ").Append(PropertyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FQLDefinedPropertyV1);
        }

        /// <summary>
        /// Returns true if FQLDefinedPropertyV1 instances are equal
        /// </summary>
        /// <param name="input">Instance of FQLDefinedPropertyV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FQLDefinedPropertyV1 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Fql == input.Fql ||
                    (this.Fql != null &&
                    this.Fql.Equals(input.Fql))
                ) && 
                (
                    this.PropertyName == input.PropertyName ||
                    (this.PropertyName != null &&
                    this.PropertyName.Equals(input.PropertyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fql != null)
                {
                    hashCode = (hashCode * 59) + this.Fql.GetHashCode();
                }
                if (this.PropertyName != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
