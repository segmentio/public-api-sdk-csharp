/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.1.1
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Segment.PublicApi.Client.OpenAPIDateConverter;

namespace Segment.PublicApi.Model
{
    /// <summary>
    /// AudienceExitRule
    /// </summary>
    [DataContract(Name = "AudienceExitRule")]
    public partial class AudienceExitRule : IEquatable<AudienceExitRule>, IValidatableObject
    {
        /// <summary>
        /// Defines ExitType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ExitTypeEnum
        {
            /// <summary>
            /// Enum AUDIENCEMEMBERSHIPCHANGE for value: AUDIENCE_MEMBERSHIP_CHANGE
            /// </summary>
            [EnumMember(Value = "AUDIENCE_MEMBERSHIP_CHANGE")]
            AUDIENCEMEMBERSHIPCHANGE = 1
        }


        /// <summary>
        /// Gets or Sets ExitType
        /// </summary>
        [DataMember(Name = "exitType", IsRequired = true, EmitDefaultValue = true)]
        public ExitTypeEnum ExitType { get; set; }
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum EXITRULE for value: EXIT_RULE
            /// </summary>
            [EnumMember(Value = "EXIT_RULE")]
            EXITRULE = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceExitRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AudienceExitRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceExitRule" /> class.
        /// </summary>
        /// <param name="exitType">exitType (required).</param>
        /// <param name="audienceId">audienceId (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="enabled">enabled (required).</param>
        /// <param name="concurrencyEnabled">concurrencyEnabled (required).</param>
        /// <param name="connectedDestinations">connectedDestinations.</param>
        /// <param name="key">key (required).</param>
        public AudienceExitRule(ExitTypeEnum exitType = default(ExitTypeEnum), string audienceId = default(string), TypeEnum type = default(TypeEnum), bool enabled = default(bool), bool concurrencyEnabled = default(bool), List<string> connectedDestinations = default(List<string>), Key key = default(Key))
        {
            this.ExitType = exitType;
            // to ensure "audienceId" is required (not null)
            if (audienceId == null)
            {
                throw new ArgumentNullException("audienceId is a required property for AudienceExitRule and cannot be null");
            }
            this.AudienceId = audienceId;
            this.Type = type;
            this.Enabled = enabled;
            this.ConcurrencyEnabled = concurrencyEnabled;
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new ArgumentNullException("key is a required property for AudienceExitRule and cannot be null");
            }
            this.Key = key;
            this.ConnectedDestinations = connectedDestinations;
        }

        /// <summary>
        /// Gets or Sets AudienceId
        /// </summary>
        [DataMember(Name = "audienceId", IsRequired = true, EmitDefaultValue = true)]
        public string AudienceId { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ConcurrencyEnabled
        /// </summary>
        [DataMember(Name = "concurrencyEnabled", IsRequired = true, EmitDefaultValue = true)]
        public bool ConcurrencyEnabled { get; set; }

        /// <summary>
        /// Gets or Sets ConnectedDestinations
        /// </summary>
        [DataMember(Name = "connectedDestinations", EmitDefaultValue = false)]
        public List<string> ConnectedDestinations { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name = "key", IsRequired = true, EmitDefaultValue = true)]
        public Key Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AudienceExitRule {\n");
            sb.Append("  ExitType: ").Append(ExitType).Append("\n");
            sb.Append("  AudienceId: ").Append(AudienceId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  ConcurrencyEnabled: ").Append(ConcurrencyEnabled).Append("\n");
            sb.Append("  ConnectedDestinations: ").Append(ConnectedDestinations).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceExitRule);
        }

        /// <summary>
        /// Returns true if AudienceExitRule instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceExitRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceExitRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExitType == input.ExitType ||
                    this.ExitType.Equals(input.ExitType)
                ) && 
                (
                    this.AudienceId == input.AudienceId ||
                    (this.AudienceId != null &&
                    this.AudienceId.Equals(input.AudienceId))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                ) && 
                (
                    this.ConcurrencyEnabled == input.ConcurrencyEnabled ||
                    this.ConcurrencyEnabled.Equals(input.ConcurrencyEnabled)
                ) && 
                (
                    this.ConnectedDestinations == input.ConnectedDestinations ||
                    this.ConnectedDestinations != null &&
                    input.ConnectedDestinations != null &&
                    this.ConnectedDestinations.SequenceEqual(input.ConnectedDestinations)
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ExitType.GetHashCode();
                if (this.AudienceId != null)
                {
                    hashCode = (hashCode * 59) + this.AudienceId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ConcurrencyEnabled.GetHashCode();
                if (this.ConnectedDestinations != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectedDestinations.GetHashCode();
                }
                if (this.Key != null)
                {
                    hashCode = (hashCode * 59) + this.Key.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
