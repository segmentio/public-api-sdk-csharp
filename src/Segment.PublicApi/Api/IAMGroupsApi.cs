/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 62.0.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIAMGroupsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Permissions to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddPermissionsToUserGroup200Response</returns>
        AddPermissionsToUserGroup200Response AddPermissionsToUserGroup(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Add Permissions to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddPermissionsToUserGroup200Response</returns>
        ApiResponse<AddPermissionsToUserGroup200Response> AddPermissionsToUserGroupWithHttpInfo(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0);
        /// <summary>
        /// Add Users to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddUsersToUserGroup200Response</returns>
        AddUsersToUserGroup200Response AddUsersToUserGroup(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Add Users to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddUsersToUserGroup200Response</returns>
        ApiResponse<AddUsersToUserGroup200Response> AddUsersToUserGroupWithHttpInfo(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0);
        /// <summary>
        /// Create User Group
        /// </summary>
        /// <remarks>
        /// Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateUserGroup200Response</returns>
        CreateUserGroup200Response CreateUserGroup(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Create User Group
        /// </summary>
        /// <remarks>
        /// Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateUserGroup200Response</returns>
        ApiResponse<CreateUserGroup200Response> CreateUserGroupWithHttpInfo(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0);
        /// <summary>
        /// Delete User Group
        /// </summary>
        /// <remarks>
        /// Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteUserGroup200Response</returns>
        DeleteUserGroup200Response DeleteUserGroup(string userGroupId, int operationIndex = 0);

        /// <summary>
        /// Delete User Group
        /// </summary>
        /// <remarks>
        /// Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteUserGroup200Response</returns>
        ApiResponse<DeleteUserGroup200Response> DeleteUserGroupWithHttpInfo(string userGroupId, int operationIndex = 0);
        /// <summary>
        /// Get User Group
        /// </summary>
        /// <remarks>
        /// Returns a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserGroup200Response</returns>
        GetUserGroup200Response GetUserGroup(string userGroupId, int operationIndex = 0);

        /// <summary>
        /// Get User Group
        /// </summary>
        /// <remarks>
        /// Returns a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserGroup200Response</returns>
        ApiResponse<GetUserGroup200Response> GetUserGroupWithHttpInfo(string userGroupId, int operationIndex = 0);
        /// <summary>
        /// List Invites from User Group
        /// </summary>
        /// <remarks>
        /// Returns the emails of invitees to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListInvitesFromUserGroup200Response</returns>
        ListInvitesFromUserGroup200Response ListInvitesFromUserGroup(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Invites from User Group
        /// </summary>
        /// <remarks>
        /// Returns the emails of invitees to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListInvitesFromUserGroup200Response</returns>
        ApiResponse<ListInvitesFromUserGroup200Response> ListInvitesFromUserGroupWithHttpInfo(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List User Groups
        /// </summary>
        /// <remarks>
        /// Returns all user groups.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUserGroups200Response</returns>
        ListUserGroups200Response ListUserGroups(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List User Groups
        /// </summary>
        /// <remarks>
        /// Returns all user groups.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUserGroups200Response</returns>
        ApiResponse<ListUserGroups200Response> ListUserGroupsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Users from User Group
        /// </summary>
        /// <remarks>
        /// Returns users belonging to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUsersFromUserGroup200Response</returns>
        ListUsersFromUserGroup200Response ListUsersFromUserGroup(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Users from User Group
        /// </summary>
        /// <remarks>
        /// Returns users belonging to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUsersFromUserGroup200Response</returns>
        ApiResponse<ListUsersFromUserGroup200Response> ListUsersFromUserGroupWithHttpInfo(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Remove Users from User Group
        /// </summary>
        /// <remarks>
        /// Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveUsersFromUserGroup200Response</returns>
        RemoveUsersFromUserGroup200Response RemoveUsersFromUserGroup(string userGroupId, List<string> emails, int operationIndex = 0);

        /// <summary>
        /// Remove Users from User Group
        /// </summary>
        /// <remarks>
        /// Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveUsersFromUserGroup200Response</returns>
        ApiResponse<RemoveUsersFromUserGroup200Response> RemoveUsersFromUserGroupWithHttpInfo(string userGroupId, List<string> emails, int operationIndex = 0);
        /// <summary>
        /// Replace Permissions for User Group
        /// </summary>
        /// <remarks>
        /// Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplacePermissionsForUserGroup200Response</returns>
        ReplacePermissionsForUserGroup200Response ReplacePermissionsForUserGroup(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Replace Permissions for User Group
        /// </summary>
        /// <remarks>
        /// Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplacePermissionsForUserGroup200Response</returns>
        ApiResponse<ReplacePermissionsForUserGroup200Response> ReplacePermissionsForUserGroupWithHttpInfo(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0);
        /// <summary>
        /// Replace Users in User Group
        /// </summary>
        /// <remarks>
        /// Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceUsersInUserGroup200Response</returns>
        ReplaceUsersInUserGroup200Response ReplaceUsersInUserGroup(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Replace Users in User Group
        /// </summary>
        /// <remarks>
        /// Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceUsersInUserGroup200Response</returns>
        ApiResponse<ReplaceUsersInUserGroup200Response> ReplaceUsersInUserGroupWithHttpInfo(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0);
        /// <summary>
        /// Update User Group
        /// </summary>
        /// <remarks>
        /// Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateUserGroup200Response</returns>
        UpdateUserGroup200Response UpdateUserGroup(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0);

        /// <summary>
        /// Update User Group
        /// </summary>
        /// <remarks>
        /// Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateUserGroup200Response</returns>
        ApiResponse<UpdateUserGroup200Response> UpdateUserGroupWithHttpInfo(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIAMGroupsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Permissions to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddPermissionsToUserGroup200Response</returns>
        System.Threading.Tasks.Task<AddPermissionsToUserGroup200Response> AddPermissionsToUserGroupAsync(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Permissions to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddPermissionsToUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddPermissionsToUserGroup200Response>> AddPermissionsToUserGroupWithHttpInfoAsync(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Users to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddUsersToUserGroup200Response</returns>
        System.Threading.Tasks.Task<AddUsersToUserGroup200Response> AddUsersToUserGroupAsync(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Users to User Group
        /// </summary>
        /// <remarks>
        /// Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddUsersToUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddUsersToUserGroup200Response>> AddUsersToUserGroupWithHttpInfoAsync(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create User Group
        /// </summary>
        /// <remarks>
        /// Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateUserGroup200Response</returns>
        System.Threading.Tasks.Task<CreateUserGroup200Response> CreateUserGroupAsync(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create User Group
        /// </summary>
        /// <remarks>
        /// Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateUserGroup200Response>> CreateUserGroupWithHttpInfoAsync(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete User Group
        /// </summary>
        /// <remarks>
        /// Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUserGroup200Response</returns>
        System.Threading.Tasks.Task<DeleteUserGroup200Response> DeleteUserGroupAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete User Group
        /// </summary>
        /// <remarks>
        /// Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteUserGroup200Response>> DeleteUserGroupWithHttpInfoAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get User Group
        /// </summary>
        /// <remarks>
        /// Returns a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserGroup200Response</returns>
        System.Threading.Tasks.Task<GetUserGroup200Response> GetUserGroupAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get User Group
        /// </summary>
        /// <remarks>
        /// Returns a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUserGroup200Response>> GetUserGroupWithHttpInfoAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Invites from User Group
        /// </summary>
        /// <remarks>
        /// Returns the emails of invitees to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListInvitesFromUserGroup200Response</returns>
        System.Threading.Tasks.Task<ListInvitesFromUserGroup200Response> ListInvitesFromUserGroupAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Invites from User Group
        /// </summary>
        /// <remarks>
        /// Returns the emails of invitees to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListInvitesFromUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInvitesFromUserGroup200Response>> ListInvitesFromUserGroupWithHttpInfoAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List User Groups
        /// </summary>
        /// <remarks>
        /// Returns all user groups.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUserGroups200Response</returns>
        System.Threading.Tasks.Task<ListUserGroups200Response> ListUserGroupsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List User Groups
        /// </summary>
        /// <remarks>
        /// Returns all user groups.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUserGroups200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUserGroups200Response>> ListUserGroupsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Users from User Group
        /// </summary>
        /// <remarks>
        /// Returns users belonging to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUsersFromUserGroup200Response</returns>
        System.Threading.Tasks.Task<ListUsersFromUserGroup200Response> ListUsersFromUserGroupAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Users from User Group
        /// </summary>
        /// <remarks>
        /// Returns users belonging to a user group.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUsersFromUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListUsersFromUserGroup200Response>> ListUsersFromUserGroupWithHttpInfoAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Users from User Group
        /// </summary>
        /// <remarks>
        /// Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveUsersFromUserGroup200Response</returns>
        System.Threading.Tasks.Task<RemoveUsersFromUserGroup200Response> RemoveUsersFromUserGroupAsync(string userGroupId, List<string> emails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Users from User Group
        /// </summary>
        /// <remarks>
        /// Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveUsersFromUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveUsersFromUserGroup200Response>> RemoveUsersFromUserGroupWithHttpInfoAsync(string userGroupId, List<string> emails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Permissions for User Group
        /// </summary>
        /// <remarks>
        /// Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplacePermissionsForUserGroup200Response</returns>
        System.Threading.Tasks.Task<ReplacePermissionsForUserGroup200Response> ReplacePermissionsForUserGroupAsync(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Permissions for User Group
        /// </summary>
        /// <remarks>
        /// Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplacePermissionsForUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplacePermissionsForUserGroup200Response>> ReplacePermissionsForUserGroupWithHttpInfoAsync(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Users in User Group
        /// </summary>
        /// <remarks>
        /// Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceUsersInUserGroup200Response</returns>
        System.Threading.Tasks.Task<ReplaceUsersInUserGroup200Response> ReplaceUsersInUserGroupAsync(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Users in User Group
        /// </summary>
        /// <remarks>
        /// Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceUsersInUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceUsersInUserGroup200Response>> ReplaceUsersInUserGroupWithHttpInfoAsync(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update User Group
        /// </summary>
        /// <remarks>
        /// Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateUserGroup200Response</returns>
        System.Threading.Tasks.Task<UpdateUserGroup200Response> UpdateUserGroupAsync(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update User Group
        /// </summary>
        /// <remarks>
        /// Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateUserGroup200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateUserGroup200Response>> UpdateUserGroupWithHttpInfoAsync(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIAMGroupsApi : IIAMGroupsApiSync, IIAMGroupsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IAMGroupsApi : IIAMGroupsApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IAMGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IAMGroupsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IAMGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IAMGroupsApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IAMGroupsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IAMGroupsApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IAMGroupsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IAMGroupsApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Permissions to User Group Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddPermissionsToUserGroup200Response</returns>
        public AddPermissionsToUserGroup200Response AddPermissionsToUserGroup(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<AddPermissionsToUserGroup200Response> localVarResponse = AddPermissionsToUserGroupWithHttpInfo(userGroupId, addPermissionsToUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Permissions to User Group Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddPermissionsToUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<AddPermissionsToUserGroup200Response> AddPermissionsToUserGroupWithHttpInfo(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->AddPermissionsToUserGroup");
            }

            // verify the required parameter 'addPermissionsToUserGroupV1Input' is set
            if (addPermissionsToUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addPermissionsToUserGroupV1Input' when calling IAMGroupsApi->AddPermissionsToUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = addPermissionsToUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.AddPermissionsToUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddPermissionsToUserGroup200Response>("/groups/{userGroupId}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPermissionsToUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Permissions to User Group Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddPermissionsToUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<AddPermissionsToUserGroup200Response> AddPermissionsToUserGroupAsync(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<AddPermissionsToUserGroup200Response> localVarResponse = await AddPermissionsToUserGroupWithHttpInfoAsync(userGroupId, addPermissionsToUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Permissions to User Group Adds a list of access permissions to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Policy Created * User Group Policy Updated          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addPermissionsToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddPermissionsToUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<AddPermissionsToUserGroup200Response>> AddPermissionsToUserGroupWithHttpInfoAsync(string userGroupId, AddPermissionsToUserGroupV1Input addPermissionsToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->AddPermissionsToUserGroup");
            }

            // verify the required parameter 'addPermissionsToUserGroupV1Input' is set
            if (addPermissionsToUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addPermissionsToUserGroupV1Input' when calling IAMGroupsApi->AddPermissionsToUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = addPermissionsToUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.AddPermissionsToUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddPermissionsToUserGroup200Response>("/groups/{userGroupId}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPermissionsToUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Users to User Group Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddUsersToUserGroup200Response</returns>
        public AddUsersToUserGroup200Response AddUsersToUserGroup(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<AddUsersToUserGroup200Response> localVarResponse = AddUsersToUserGroupWithHttpInfo(userGroupId, addUsersToUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Users to User Group Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddUsersToUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<AddUsersToUserGroup200Response> AddUsersToUserGroupWithHttpInfo(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->AddUsersToUserGroup");
            }

            // verify the required parameter 'addUsersToUserGroupV1Input' is set
            if (addUsersToUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addUsersToUserGroupV1Input' when calling IAMGroupsApi->AddUsersToUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = addUsersToUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.AddUsersToUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddUsersToUserGroup200Response>("/groups/{userGroupId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUsersToUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Users to User Group Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddUsersToUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<AddUsersToUserGroup200Response> AddUsersToUserGroupAsync(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<AddUsersToUserGroup200Response> localVarResponse = await AddUsersToUserGroupWithHttpInfoAsync(userGroupId, addUsersToUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Users to User Group Adds a list of users or invites to a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="addUsersToUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddUsersToUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<AddUsersToUserGroup200Response>> AddUsersToUserGroupWithHttpInfoAsync(string userGroupId, AddUsersToUserGroupV1Input addUsersToUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->AddUsersToUserGroup");
            }

            // verify the required parameter 'addUsersToUserGroupV1Input' is set
            if (addUsersToUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addUsersToUserGroupV1Input' when calling IAMGroupsApi->AddUsersToUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = addUsersToUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.AddUsersToUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddUsersToUserGroup200Response>("/groups/{userGroupId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUsersToUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Group Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateUserGroup200Response</returns>
        public CreateUserGroup200Response CreateUserGroup(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateUserGroup200Response> localVarResponse = CreateUserGroupWithHttpInfo(createUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User Group Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateUserGroup200Response> CreateUserGroupWithHttpInfo(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createUserGroupV1Input' is set
            if (createUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createUserGroupV1Input' when calling IAMGroupsApi->CreateUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.CreateUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateUserGroup200Response>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Group Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<CreateUserGroup200Response> CreateUserGroupAsync(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateUserGroup200Response> localVarResponse = await CreateUserGroupWithHttpInfoAsync(createUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create User Group Creates a user group.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* User Group Created * Policy Created          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateUserGroup200Response>> CreateUserGroupWithHttpInfoAsync(CreateUserGroupV1Input createUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createUserGroupV1Input' is set
            if (createUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createUserGroupV1Input' when calling IAMGroupsApi->CreateUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.CreateUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateUserGroup200Response>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Group Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteUserGroup200Response</returns>
        public DeleteUserGroup200Response DeleteUserGroup(string userGroupId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteUserGroup200Response> localVarResponse = DeleteUserGroupWithHttpInfo(userGroupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Group Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteUserGroup200Response> DeleteUserGroupWithHttpInfo(string userGroupId, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->DeleteUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter

            localVarRequestOptions.Operation = "IAMGroupsApi.DeleteUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Group Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<DeleteUserGroup200Response> DeleteUserGroupAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteUserGroup200Response> localVarResponse = await DeleteUserGroupWithHttpInfoAsync(userGroupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete User Group Removes a user group from a Workspace.    • When called, this endpoint may generate the &#x60;User Group Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteUserGroup200Response>> DeleteUserGroupWithHttpInfoAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->DeleteUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter

            localVarRequestOptions.Operation = "IAMGroupsApi.DeleteUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Group Returns a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserGroup200Response</returns>
        public GetUserGroup200Response GetUserGroup(string userGroupId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetUserGroup200Response> localVarResponse = GetUserGroupWithHttpInfo(userGroupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Group Returns a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetUserGroup200Response> GetUserGroupWithHttpInfo(string userGroupId, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->GetUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter

            localVarRequestOptions.Operation = "IAMGroupsApi.GetUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Group Returns a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<GetUserGroup200Response> GetUserGroupAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetUserGroup200Response> localVarResponse = await GetUserGroupWithHttpInfoAsync(userGroupId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Group Returns a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetUserGroup200Response>> GetUserGroupWithHttpInfoAsync(string userGroupId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->GetUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter

            localVarRequestOptions.Operation = "IAMGroupsApi.GetUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invites from User Group Returns the emails of invitees to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListInvitesFromUserGroup200Response</returns>
        public ListInvitesFromUserGroup200Response ListInvitesFromUserGroup(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListInvitesFromUserGroup200Response> localVarResponse = ListInvitesFromUserGroupWithHttpInfo(userGroupId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invites from User Group Returns the emails of invitees to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListInvitesFromUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListInvitesFromUserGroup200Response> ListInvitesFromUserGroupWithHttpInfo(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ListInvitesFromUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListInvitesFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListInvitesFromUserGroup200Response>("/groups/{userGroupId}/invites", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvitesFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Invites from User Group Returns the emails of invitees to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListInvitesFromUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<ListInvitesFromUserGroup200Response> ListInvitesFromUserGroupAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListInvitesFromUserGroup200Response> localVarResponse = await ListInvitesFromUserGroupWithHttpInfoAsync(userGroupId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Invites from User Group Returns the emails of invitees to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for invites to the group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListInvitesFromUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListInvitesFromUserGroup200Response>> ListInvitesFromUserGroupWithHttpInfoAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ListInvitesFromUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListInvitesFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListInvitesFromUserGroup200Response>("/groups/{userGroupId}/invites", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInvitesFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User Groups Returns all user groups.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUserGroups200Response</returns>
        public ListUserGroups200Response ListUserGroups(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListUserGroups200Response> localVarResponse = ListUserGroupsWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User Groups Returns all user groups.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUserGroups200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListUserGroups200Response> ListUserGroupsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListUserGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUserGroups200Response>("/groups", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List User Groups Returns all user groups.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUserGroups200Response</returns>
        public async System.Threading.Tasks.Task<ListUserGroups200Response> ListUserGroupsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListUserGroups200Response> localVarResponse = await ListUserGroupsWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List User Groups Returns all user groups.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination for user groups.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUserGroups200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListUserGroups200Response>> ListUserGroupsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListUserGroups";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUserGroups200Response>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUserGroups", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users from User Group Returns users belonging to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListUsersFromUserGroup200Response</returns>
        public ListUsersFromUserGroup200Response ListUsersFromUserGroup(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListUsersFromUserGroup200Response> localVarResponse = ListUsersFromUserGroupWithHttpInfo(userGroupId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users from User Group Returns users belonging to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListUsersFromUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListUsersFromUserGroup200Response> ListUsersFromUserGroupWithHttpInfo(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ListUsersFromUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListUsersFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListUsersFromUserGroup200Response>("/groups/{userGroupId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Users from User Group Returns users belonging to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListUsersFromUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<ListUsersFromUserGroup200Response> ListUsersFromUserGroupAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListUsersFromUserGroup200Response> localVarResponse = await ListUsersFromUserGroupWithHttpInfoAsync(userGroupId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Users from User Group Returns users belonging to a user group.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="pagination">Pagination for members of a group.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListUsersFromUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListUsersFromUserGroup200Response>> ListUsersFromUserGroupWithHttpInfoAsync(string userGroupId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ListUsersFromUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "IAMGroupsApi.ListUsersFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListUsersFromUserGroup200Response>("/groups/{userGroupId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListUsersFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Users from User Group Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveUsersFromUserGroup200Response</returns>
        public RemoveUsersFromUserGroup200Response RemoveUsersFromUserGroup(string userGroupId, List<string> emails, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveUsersFromUserGroup200Response> localVarResponse = RemoveUsersFromUserGroupWithHttpInfo(userGroupId, emails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Users from User Group Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveUsersFromUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveUsersFromUserGroup200Response> RemoveUsersFromUserGroupWithHttpInfo(string userGroupId, List<string> emails, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->RemoveUsersFromUserGroup");
            }

            // verify the required parameter 'emails' is set
            if (emails == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'emails' when calling IAMGroupsApi->RemoveUsersFromUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails));

            localVarRequestOptions.Operation = "IAMGroupsApi.RemoveUsersFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveUsersFromUserGroup200Response>("/group/{userGroupId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUsersFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Users from User Group Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveUsersFromUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<RemoveUsersFromUserGroup200Response> RemoveUsersFromUserGroupAsync(string userGroupId, List<string> emails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveUsersFromUserGroup200Response> localVarResponse = await RemoveUsersFromUserGroupWithHttpInfoAsync(userGroupId, emails, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Users from User Group Removes one or multiple users or invites from a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Group Memberships Deleted * User Removed From User Group          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="emails">The list of emails to remove from the user group.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveUsersFromUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveUsersFromUserGroup200Response>> RemoveUsersFromUserGroupWithHttpInfoAsync(string userGroupId, List<string> emails, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->RemoveUsersFromUserGroup");
            }

            // verify the required parameter 'emails' is set
            if (emails == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'emails' when calling IAMGroupsApi->RemoveUsersFromUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "emails", emails));

            localVarRequestOptions.Operation = "IAMGroupsApi.RemoveUsersFromUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveUsersFromUserGroup200Response>("/group/{userGroupId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUsersFromUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Permissions for User Group Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplacePermissionsForUserGroup200Response</returns>
        public ReplacePermissionsForUserGroup200Response ReplacePermissionsForUserGroup(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ReplacePermissionsForUserGroup200Response> localVarResponse = ReplacePermissionsForUserGroupWithHttpInfo(userGroupId, replacePermissionsForUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Permissions for User Group Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplacePermissionsForUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ReplacePermissionsForUserGroup200Response> ReplacePermissionsForUserGroupWithHttpInfo(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ReplacePermissionsForUserGroup");
            }

            // verify the required parameter 'replacePermissionsForUserGroupV1Input' is set
            if (replacePermissionsForUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replacePermissionsForUserGroupV1Input' when calling IAMGroupsApi->ReplacePermissionsForUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = replacePermissionsForUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.ReplacePermissionsForUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReplacePermissionsForUserGroup200Response>("/groups/{userGroupId}/permissions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplacePermissionsForUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Permissions for User Group Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplacePermissionsForUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<ReplacePermissionsForUserGroup200Response> ReplacePermissionsForUserGroupAsync(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ReplacePermissionsForUserGroup200Response> localVarResponse = await ReplacePermissionsForUserGroupWithHttpInfoAsync(userGroupId, replacePermissionsForUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Permissions for User Group Updates the list of access permissions for a user group.    • When called, this endpoint may generate the &#x60;Policy Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replacePermissionsForUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplacePermissionsForUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ReplacePermissionsForUserGroup200Response>> ReplacePermissionsForUserGroupWithHttpInfoAsync(string userGroupId, ReplacePermissionsForUserGroupV1Input replacePermissionsForUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ReplacePermissionsForUserGroup");
            }

            // verify the required parameter 'replacePermissionsForUserGroupV1Input' is set
            if (replacePermissionsForUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replacePermissionsForUserGroupV1Input' when calling IAMGroupsApi->ReplacePermissionsForUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = replacePermissionsForUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.ReplacePermissionsForUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplacePermissionsForUserGroup200Response>("/groups/{userGroupId}/permissions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplacePermissionsForUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Users in User Group Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceUsersInUserGroup200Response</returns>
        public ReplaceUsersInUserGroup200Response ReplaceUsersInUserGroup(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceUsersInUserGroup200Response> localVarResponse = ReplaceUsersInUserGroupWithHttpInfo(userGroupId, replaceUsersInUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Users in User Group Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceUsersInUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ReplaceUsersInUserGroup200Response> ReplaceUsersInUserGroupWithHttpInfo(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ReplaceUsersInUserGroup");
            }

            // verify the required parameter 'replaceUsersInUserGroupV1Input' is set
            if (replaceUsersInUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceUsersInUserGroupV1Input' when calling IAMGroupsApi->ReplaceUsersInUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = replaceUsersInUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.ReplaceUsersInUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReplaceUsersInUserGroup200Response>("/group/{userGroupId}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceUsersInUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Users in User Group Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceUsersInUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<ReplaceUsersInUserGroup200Response> ReplaceUsersInUserGroupAsync(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceUsersInUserGroup200Response> localVarResponse = await ReplaceUsersInUserGroupWithHttpInfoAsync(userGroupId, replaceUsersInUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Users in User Group Replaces the members of a user group by email.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Subjects Added to Group * User Added To User Group * Group Memberships Deleted          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="replaceUsersInUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceUsersInUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ReplaceUsersInUserGroup200Response>> ReplaceUsersInUserGroupWithHttpInfoAsync(string userGroupId, ReplaceUsersInUserGroupV1Input replaceUsersInUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->ReplaceUsersInUserGroup");
            }

            // verify the required parameter 'replaceUsersInUserGroupV1Input' is set
            if (replaceUsersInUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceUsersInUserGroupV1Input' when calling IAMGroupsApi->ReplaceUsersInUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = replaceUsersInUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.ReplaceUsersInUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplaceUsersInUserGroup200Response>("/group/{userGroupId}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceUsersInUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Group Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateUserGroup200Response</returns>
        public UpdateUserGroup200Response UpdateUserGroup(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateUserGroup200Response> localVarResponse = UpdateUserGroupWithHttpInfo(userGroupId, updateUserGroupV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Group Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateUserGroup200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateUserGroup200Response> UpdateUserGroupWithHttpInfo(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->UpdateUserGroup");
            }

            // verify the required parameter 'updateUserGroupV1Input' is set
            if (updateUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateUserGroupV1Input' when calling IAMGroupsApi->UpdateUserGroup");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = updateUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.UpdateUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Group Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateUserGroup200Response</returns>
        public async System.Threading.Tasks.Task<UpdateUserGroup200Response> UpdateUserGroupAsync(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateUserGroup200Response> localVarResponse = await UpdateUserGroupWithHttpInfoAsync(userGroupId, updateUserGroupV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Group Updates a user group for a Workspace.    • When called, this endpoint may generate the &#x60;User Group Updated&#x60; event in the [audit trail](/tag/Audit-Trail).          The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userGroupId"></param>
        /// <param name="updateUserGroupV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateUserGroup200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateUserGroup200Response>> UpdateUserGroupWithHttpInfoAsync(string userGroupId, UpdateUserGroupV1Input updateUserGroupV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userGroupId' is set
            if (userGroupId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'userGroupId' when calling IAMGroupsApi->UpdateUserGroup");
            }

            // verify the required parameter 'updateUserGroupV1Input' is set
            if (updateUserGroupV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateUserGroupV1Input' when calling IAMGroupsApi->UpdateUserGroup");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("userGroupId", Segment.PublicApi.Client.ClientUtils.ParameterToString(userGroupId)); // path parameter
            localVarRequestOptions.Data = updateUserGroupV1Input;

            localVarRequestOptions.Operation = "IAMGroupsApi.UpdateUserGroup";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateUserGroup200Response>("/groups/{userGroupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUserGroup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
