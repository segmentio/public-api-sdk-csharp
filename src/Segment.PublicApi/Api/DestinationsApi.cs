/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 57.2.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Destination
        /// </summary>
        /// <remarks>
        /// Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDestination200Response</returns>
        CreateDestination200Response CreateDestination(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Destination
        /// </summary>
        /// <remarks>
        /// Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDestination200Response</returns>
        ApiResponse<CreateDestination200Response> CreateDestinationWithHttpInfo(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Destination Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDestinationSubscription200Response</returns>
        CreateDestinationSubscription200Response CreateDestinationSubscription(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Create Destination Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDestinationSubscription200Response</returns>
        ApiResponse<CreateDestinationSubscription200Response> CreateDestinationSubscriptionWithHttpInfo(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Delete Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDestination200Response</returns>
        DeleteDestination200Response DeleteDestination(string destinationId, int operationIndex = 0);

        /// <summary>
        /// Delete Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDestination200Response</returns>
        ApiResponse<DeleteDestination200Response> DeleteDestinationWithHttpInfo(string destinationId, int operationIndex = 0);
        /// <summary>
        /// Get Destination
        /// </summary>
        /// <remarks>
        /// Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDestination200Response</returns>
        GetDestination200Response GetDestination(string destinationId, int operationIndex = 0);

        /// <summary>
        /// Get Destination
        /// </summary>
        /// <remarks>
        /// Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDestination200Response</returns>
        ApiResponse<GetDestination200Response> GetDestinationWithHttpInfo(string destinationId, int operationIndex = 0);
        /// <summary>
        /// Get Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSubscriptionFromDestination200Response</returns>
        GetSubscriptionFromDestination200Response GetSubscriptionFromDestination(string destinationId, string id, int operationIndex = 0);

        /// <summary>
        /// Get Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSubscriptionFromDestination200Response</returns>
        ApiResponse<GetSubscriptionFromDestination200Response> GetSubscriptionFromDestinationWithHttpInfo(string destinationId, string id, int operationIndex = 0);
        /// <summary>
        /// List Delivery Metrics Summary from Destination
        /// </summary>
        /// <remarks>
        /// Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeliveryMetricsSummaryFromDestination200Response</returns>
        ListDeliveryMetricsSummaryFromDestination200Response ListDeliveryMetricsSummaryFromDestination(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Delivery Metrics Summary from Destination
        /// </summary>
        /// <remarks>
        /// Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeliveryMetricsSummaryFromDestination200Response</returns>
        ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response> ListDeliveryMetricsSummaryFromDestinationWithHttpInfo(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Destinations
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDestinations200Response</returns>
        ListDestinations200Response ListDestinations(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Destinations
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDestinations200Response</returns>
        ApiResponse<ListDestinations200Response> ListDestinationsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Subscriptions from Destination
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsFromDestination200Response</returns>
        ListSubscriptionsFromDestination200Response ListSubscriptionsFromDestination(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Subscriptions from Destination
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsFromDestination200Response</returns>
        ApiResponse<ListSubscriptionsFromDestination200Response> ListSubscriptionsFromDestinationWithHttpInfo(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Remove Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSubscriptionFromDestination200Response</returns>
        RemoveSubscriptionFromDestination200Response RemoveSubscriptionFromDestination(string destinationId, string id, int operationIndex = 0);

        /// <summary>
        /// Remove Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSubscriptionFromDestination200Response</returns>
        ApiResponse<RemoveSubscriptionFromDestination200Response> RemoveSubscriptionFromDestinationWithHttpInfo(string destinationId, string id, int operationIndex = 0);
        /// <summary>
        /// Update Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDestination200Response</returns>
        UpdateDestination200Response UpdateDestination(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDestination200Response</returns>
        ApiResponse<UpdateDestination200Response> UpdateDestinationWithHttpInfo(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Subscription for Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSubscriptionForDestination200Response</returns>
        UpdateSubscriptionForDestination200Response UpdateSubscriptionForDestination(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Update Subscription for Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSubscriptionForDestination200Response</returns>
        ApiResponse<UpdateSubscriptionForDestination200Response> UpdateSubscriptionForDestinationWithHttpInfo(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Destination
        /// </summary>
        /// <remarks>
        /// Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDestination200Response</returns>
        System.Threading.Tasks.Task<CreateDestination200Response> CreateDestinationAsync(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Destination
        /// </summary>
        /// <remarks>
        /// Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDestination200Response>> CreateDestinationWithHttpInfoAsync(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Destination Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDestinationSubscription200Response</returns>
        System.Threading.Tasks.Task<CreateDestinationSubscription200Response> CreateDestinationSubscriptionAsync(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Destination Subscription
        /// </summary>
        /// <remarks>
        /// Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDestinationSubscription200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDestinationSubscription200Response>> CreateDestinationSubscriptionWithHttpInfoAsync(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDestination200Response</returns>
        System.Threading.Tasks.Task<DeleteDestination200Response> DeleteDestinationAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteDestination200Response>> DeleteDestinationWithHttpInfoAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Destination
        /// </summary>
        /// <remarks>
        /// Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDestination200Response</returns>
        System.Threading.Tasks.Task<GetDestination200Response> GetDestinationAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Destination
        /// </summary>
        /// <remarks>
        /// Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDestination200Response>> GetDestinationWithHttpInfoAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscriptionFromDestination200Response</returns>
        System.Threading.Tasks.Task<GetSubscriptionFromDestination200Response> GetSubscriptionFromDestinationAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscriptionFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriptionFromDestination200Response>> GetSubscriptionFromDestinationWithHttpInfoAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Delivery Metrics Summary from Destination
        /// </summary>
        /// <remarks>
        /// Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeliveryMetricsSummaryFromDestination200Response</returns>
        System.Threading.Tasks.Task<ListDeliveryMetricsSummaryFromDestination200Response> ListDeliveryMetricsSummaryFromDestinationAsync(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Delivery Metrics Summary from Destination
        /// </summary>
        /// <remarks>
        /// Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeliveryMetricsSummaryFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response>> ListDeliveryMetricsSummaryFromDestinationWithHttpInfoAsync(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Destinations
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDestinations200Response</returns>
        System.Threading.Tasks.Task<ListDestinations200Response> ListDestinationsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Destinations
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDestinations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDestinations200Response>> ListDestinationsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Subscriptions from Destination
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsFromDestination200Response</returns>
        System.Threading.Tasks.Task<ListSubscriptionsFromDestination200Response> ListSubscriptionsFromDestinationAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Subscriptions from Destination
        /// </summary>
        /// <remarks>
        /// Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSubscriptionsFromDestination200Response>> ListSubscriptionsFromDestinationWithHttpInfoAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSubscriptionFromDestination200Response</returns>
        System.Threading.Tasks.Task<RemoveSubscriptionFromDestination200Response> RemoveSubscriptionFromDestinationAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Subscription from Destination
        /// </summary>
        /// <remarks>
        /// Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSubscriptionFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveSubscriptionFromDestination200Response>> RemoveSubscriptionFromDestinationWithHttpInfoAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDestination200Response</returns>
        System.Threading.Tasks.Task<UpdateDestination200Response> UpdateDestinationAsync(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDestination200Response>> UpdateDestinationWithHttpInfoAsync(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Subscription for Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSubscriptionForDestination200Response</returns>
        System.Threading.Tasks.Task<UpdateSubscriptionForDestination200Response> UpdateSubscriptionForDestinationAsync(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Subscription for Destination
        /// </summary>
        /// <remarks>
        /// Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSubscriptionForDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSubscriptionForDestination200Response>> UpdateSubscriptionForDestinationWithHttpInfoAsync(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationsApi : IDestinationsApiSync, IDestinationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DestinationsApi : IDestinationsApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DestinationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DestinationsApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DestinationsApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DestinationsApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Destination Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDestination200Response</returns>
        public CreateDestination200Response CreateDestination(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateDestination200Response> localVarResponse = CreateDestinationWithHttpInfo(createDestinationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Destination Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateDestination200Response> CreateDestinationWithHttpInfo(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createDestinationV1Input' is set
            if (createDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createDestinationV1Input' when calling DestinationsApi->CreateDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationsApi.CreateDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateDestination200Response>("/destinations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Destination Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDestination200Response</returns>
        public async System.Threading.Tasks.Task<CreateDestination200Response> CreateDestinationAsync(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateDestination200Response> localVarResponse = await CreateDestinationWithHttpInfoAsync(createDestinationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Destination Creates a new Destination.    • When called, this endpoint may generate the &#x60;Integration Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateDestination200Response>> CreateDestinationWithHttpInfoAsync(CreateDestinationV1Input createDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDestinationV1Input' is set
            if (createDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createDestinationV1Input' when calling DestinationsApi->CreateDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationsApi.CreateDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateDestination200Response>("/destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Destination Subscription Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDestinationSubscription200Response</returns>
        public CreateDestinationSubscription200Response CreateDestinationSubscription(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateDestinationSubscription200Response> localVarResponse = CreateDestinationSubscriptionWithHttpInfo(destinationId, createDestinationSubscriptionAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Destination Subscription Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDestinationSubscription200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateDestinationSubscription200Response> CreateDestinationSubscriptionWithHttpInfo(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->CreateDestinationSubscription");
            }

            // verify the required parameter 'createDestinationSubscriptionAlphaInput' is set
            if (createDestinationSubscriptionAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createDestinationSubscriptionAlphaInput' when calling DestinationsApi->CreateDestinationSubscription");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = createDestinationSubscriptionAlphaInput;

            localVarRequestOptions.Operation = "DestinationsApi.CreateDestinationSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateDestinationSubscription200Response>("/destinations/{destinationId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDestinationSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Destination Subscription Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDestinationSubscription200Response</returns>
        public async System.Threading.Tasks.Task<CreateDestinationSubscription200Response> CreateDestinationSubscriptionAsync(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateDestinationSubscription200Response> localVarResponse = await CreateDestinationSubscriptionWithHttpInfoAsync(destinationId, createDestinationSubscriptionAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Destination Subscription Creates a new Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createDestinationSubscriptionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDestinationSubscription200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateDestinationSubscription200Response>> CreateDestinationSubscriptionWithHttpInfoAsync(string destinationId, CreateDestinationSubscriptionAlphaInput createDestinationSubscriptionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->CreateDestinationSubscription");
            }

            // verify the required parameter 'createDestinationSubscriptionAlphaInput' is set
            if (createDestinationSubscriptionAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createDestinationSubscriptionAlphaInput' when calling DestinationsApi->CreateDestinationSubscription");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = createDestinationSubscriptionAlphaInput;

            localVarRequestOptions.Operation = "DestinationsApi.CreateDestinationSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateDestinationSubscription200Response>("/destinations/{destinationId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDestinationSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Destination Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteDestination200Response</returns>
        public DeleteDestination200Response DeleteDestination(string destinationId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteDestination200Response> localVarResponse = DeleteDestinationWithHttpInfo(destinationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Destination Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteDestination200Response> DeleteDestinationWithHttpInfo(string destinationId, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->DeleteDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.DeleteDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Destination Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteDestination200Response</returns>
        public async System.Threading.Tasks.Task<DeleteDestination200Response> DeleteDestinationAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteDestination200Response> localVarResponse = await DeleteDestinationWithHttpInfoAsync(destinationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Destination Deletes an existing Destination.    • When called, this endpoint may generate the &#x60;Integration Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;catalogId&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteDestination200Response>> DeleteDestinationWithHttpInfoAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->DeleteDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.DeleteDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Destination Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDestination200Response</returns>
        public GetDestination200Response GetDestination(string destinationId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetDestination200Response> localVarResponse = GetDestinationWithHttpInfo(destinationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Destination Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetDestination200Response> GetDestinationWithHttpInfo(string destinationId, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->GetDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.GetDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Destination Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDestination200Response</returns>
        public async System.Threading.Tasks.Task<GetDestination200Response> GetDestinationAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetDestination200Response> localVarResponse = await GetDestinationWithHttpInfoAsync(destinationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Destination Returns a Destination by its id.        Config API omitted fields: - &#x60;catalogId&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetDestination200Response>> GetDestinationWithHttpInfoAsync(string destinationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->GetDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.GetDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription from Destination Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSubscriptionFromDestination200Response</returns>
        public GetSubscriptionFromDestination200Response GetSubscriptionFromDestination(string destinationId, string id, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetSubscriptionFromDestination200Response> localVarResponse = GetSubscriptionFromDestinationWithHttpInfo(destinationId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription from Destination Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSubscriptionFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetSubscriptionFromDestination200Response> GetSubscriptionFromDestinationWithHttpInfo(string destinationId, string id, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->GetSubscriptionFromDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->GetSubscriptionFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.GetSubscriptionFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSubscriptionFromDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Subscription from Destination Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSubscriptionFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<GetSubscriptionFromDestination200Response> GetSubscriptionFromDestinationAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetSubscriptionFromDestination200Response> localVarResponse = await GetSubscriptionFromDestinationWithHttpInfoAsync(destinationId, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Subscription from Destination Gets a Destination subscription by id.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSubscriptionFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetSubscriptionFromDestination200Response>> GetSubscriptionFromDestinationWithHttpInfoAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->GetSubscriptionFromDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->GetSubscriptionFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.GetSubscriptionFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSubscriptionFromDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSubscriptionFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDeliveryMetricsSummaryFromDestination200Response</returns>
        public ListDeliveryMetricsSummaryFromDestination200Response ListDeliveryMetricsSummaryFromDestination(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response> localVarResponse = ListDeliveryMetricsSummaryFromDestinationWithHttpInfo(destinationId, sourceId, startTime, endTime, granularity);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDeliveryMetricsSummaryFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response> ListDeliveryMetricsSummaryFromDestinationWithHttpInfo(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->ListDeliveryMetricsSummaryFromDestination");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DestinationsApi->ListDeliveryMetricsSummaryFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListDeliveryMetricsSummaryFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDeliveryMetricsSummaryFromDestination200Response>("/destinations/{destinationId}/delivery-metrics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryMetricsSummaryFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDeliveryMetricsSummaryFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<ListDeliveryMetricsSummaryFromDestination200Response> ListDeliveryMetricsSummaryFromDestinationAsync(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response> localVarResponse = await ListDeliveryMetricsSummaryFromDestinationWithHttpInfoAsync(destinationId, sourceId, startTime, endTime, granularity, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Delivery Metrics Summary from Destination Get an event delivery metrics summary from a Destination.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 7 days - Oldest possible start time: 7 days in the past  **Day**: - Max time range: 14 days - Oldest possible start time: 14 days in the past
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="sourceId">The id of the Source linked to the Destination.  Config API note: analogous to &#x60;parent&#x60;.  This parameter exists in beta.</param>
        /// <param name="startTime">Filter events that happened after this time.  Defaults to: - 1 hour ago if granularity is &#x60;MINUTE&#x60;. - 7 days ago if granularity is &#x60;HOUR&#x60;. - 30 days ago if granularity is &#x60;DAY&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="endTime">Filter events that happened before this time. Defaults to now if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="granularity">The granularity to filter metrics to. Either &#x60;MINUTE&#x60;, &#x60;HOUR&#x60; or &#x60;DAY&#x60;.  Defaults to &#x60;MINUTE&#x60; if not set.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDeliveryMetricsSummaryFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListDeliveryMetricsSummaryFromDestination200Response>> ListDeliveryMetricsSummaryFromDestinationWithHttpInfoAsync(string destinationId, string sourceId, string? startTime = default(string?), string? endTime = default(string?), string? granularity = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->ListDeliveryMetricsSummaryFromDestination");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DestinationsApi->ListDeliveryMetricsSummaryFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            if (startTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            }
            if (endTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            }
            if (granularity != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListDeliveryMetricsSummaryFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDeliveryMetricsSummaryFromDestination200Response>("/destinations/{destinationId}/delivery-metrics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeliveryMetricsSummaryFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Destinations Returns a list of Destinations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListDestinations200Response</returns>
        public ListDestinations200Response ListDestinations(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListDestinations200Response> localVarResponse = ListDestinationsWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Destinations Returns a list of Destinations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListDestinations200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListDestinations200Response> ListDestinationsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListDestinations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListDestinations200Response>("/destinations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDestinations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Destinations Returns a list of Destinations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListDestinations200Response</returns>
        public async System.Threading.Tasks.Task<ListDestinations200Response> ListDestinationsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListDestinations200Response> localVarResponse = await ListDestinationsWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Destinations Returns a list of Destinations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListDestinations200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListDestinations200Response>> ListDestinationsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListDestinations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDestinations200Response>("/destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDestinations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions from Destination Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSubscriptionsFromDestination200Response</returns>
        public ListSubscriptionsFromDestination200Response ListSubscriptionsFromDestination(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListSubscriptionsFromDestination200Response> localVarResponse = ListSubscriptionsFromDestinationWithHttpInfo(destinationId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions from Destination Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSubscriptionsFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListSubscriptionsFromDestination200Response> ListSubscriptionsFromDestinationWithHttpInfo(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->ListSubscriptionsFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListSubscriptionsFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSubscriptionsFromDestination200Response>("/destinations/{destinationId}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Subscriptions from Destination Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSubscriptionsFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<ListSubscriptionsFromDestination200Response> ListSubscriptionsFromDestinationAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListSubscriptionsFromDestination200Response> localVarResponse = await ListSubscriptionsFromDestinationWithHttpInfoAsync(destinationId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Subscriptions from Destination Lists subscriptions for a Destination.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSubscriptionsFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListSubscriptionsFromDestination200Response>> ListSubscriptionsFromDestinationWithHttpInfoAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->ListSubscriptionsFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationsApi.ListSubscriptionsFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSubscriptionsFromDestination200Response>("/destinations/{destinationId}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSubscriptionsFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Subscription from Destination Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSubscriptionFromDestination200Response</returns>
        public RemoveSubscriptionFromDestination200Response RemoveSubscriptionFromDestination(string destinationId, string id, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSubscriptionFromDestination200Response> localVarResponse = RemoveSubscriptionFromDestinationWithHttpInfo(destinationId, id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Subscription from Destination Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSubscriptionFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveSubscriptionFromDestination200Response> RemoveSubscriptionFromDestinationWithHttpInfo(string destinationId, string id, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->RemoveSubscriptionFromDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->RemoveSubscriptionFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.RemoveSubscriptionFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveSubscriptionFromDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Subscription from Destination Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSubscriptionFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<RemoveSubscriptionFromDestination200Response> RemoveSubscriptionFromDestinationAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSubscriptionFromDestination200Response> localVarResponse = await RemoveSubscriptionFromDestinationWithHttpInfoAsync(destinationId, id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Subscription from Destination Deletes an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSubscriptionFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveSubscriptionFromDestination200Response>> RemoveSubscriptionFromDestinationWithHttpInfoAsync(string destinationId, string id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->RemoveSubscriptionFromDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->RemoveSubscriptionFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "DestinationsApi.RemoveSubscriptionFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveSubscriptionFromDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSubscriptionFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Destination Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDestination200Response</returns>
        public UpdateDestination200Response UpdateDestination(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateDestination200Response> localVarResponse = UpdateDestinationWithHttpInfo(destinationId, updateDestinationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Destination Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateDestination200Response> UpdateDestinationWithHttpInfo(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->UpdateDestination");
            }

            // verify the required parameter 'updateDestinationV1Input' is set
            if (updateDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateDestinationV1Input' when calling DestinationsApi->UpdateDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = updateDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationsApi.UpdateDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Destination Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDestination200Response</returns>
        public async System.Threading.Tasks.Task<UpdateDestination200Response> UpdateDestinationAsync(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateDestination200Response> localVarResponse = await UpdateDestinationWithHttpInfoAsync(destinationId, updateDestinationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Destination Updates an existing Destination.  **Note**: if you attempt to update read-only settings for your destination you&#39;ll encounter the following behavior:    * If only read-only properties are being updated, the endpoint will return an HTTP 400 error.   * If there&#39;s a mix of writable and read-only properties in the payload, the request will be accepted, the writable properties will be updated and the read-only properties ignored.     • When called, this endpoint may generate the &#x60;Integration Disabled&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;updateMask&#x60;          
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="updateDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateDestination200Response>> UpdateDestinationWithHttpInfoAsync(string destinationId, UpdateDestinationV1Input updateDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->UpdateDestination");
            }

            // verify the required parameter 'updateDestinationV1Input' is set
            if (updateDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateDestinationV1Input' when calling DestinationsApi->UpdateDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = updateDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationsApi.UpdateDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateDestination200Response>("/destinations/{destinationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription for Destination Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSubscriptionForDestination200Response</returns>
        public UpdateSubscriptionForDestination200Response UpdateSubscriptionForDestination(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSubscriptionForDestination200Response> localVarResponse = UpdateSubscriptionForDestinationWithHttpInfo(destinationId, id, updateSubscriptionForDestinationAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription for Destination Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSubscriptionForDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateSubscriptionForDestination200Response> UpdateSubscriptionForDestinationWithHttpInfo(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }

            // verify the required parameter 'updateSubscriptionForDestinationAlphaInput' is set
            if (updateSubscriptionForDestinationAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSubscriptionForDestinationAlphaInput' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionForDestinationAlphaInput;

            localVarRequestOptions.Operation = "DestinationsApi.UpdateSubscriptionForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateSubscriptionForDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Subscription for Destination Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSubscriptionForDestination200Response</returns>
        public async System.Threading.Tasks.Task<UpdateSubscriptionForDestination200Response> UpdateSubscriptionForDestinationAsync(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSubscriptionForDestination200Response> localVarResponse = await UpdateSubscriptionForDestinationWithHttpInfoAsync(destinationId, id, updateSubscriptionForDestinationAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Subscription for Destination Updates an existing Destination subscription.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Destination Subscriptions feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 5 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="id"></param>
        /// <param name="updateSubscriptionForDestinationAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSubscriptionForDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateSubscriptionForDestination200Response>> UpdateSubscriptionForDestinationWithHttpInfoAsync(string destinationId, string id, UpdateSubscriptionForDestinationAlphaInput updateSubscriptionForDestinationAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }

            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'id' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }

            // verify the required parameter 'updateSubscriptionForDestinationAlphaInput' is set
            if (updateSubscriptionForDestinationAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSubscriptionForDestinationAlphaInput' when calling DestinationsApi->UpdateSubscriptionForDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Segment.PublicApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionForDestinationAlphaInput;

            localVarRequestOptions.Operation = "DestinationsApi.UpdateSubscriptionForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateSubscriptionForDestination200Response>("/destinations/{destinationId}/subscriptions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscriptionForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
