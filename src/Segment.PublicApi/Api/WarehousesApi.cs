/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.6.1
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Connection from Source to Warehouse
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddConnectionFromSourceToWarehouse201Response</returns>
        AddConnectionFromSourceToWarehouse201Response AddConnectionFromSourceToWarehouse(string warehouseId, string sourceId, int operationIndex = 0);

        /// <summary>
        /// Add Connection from Source to Warehouse
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddConnectionFromSourceToWarehouse201Response</returns>
        ApiResponse<AddConnectionFromSourceToWarehouse201Response> AddConnectionFromSourceToWarehouseWithHttpInfo(string warehouseId, string sourceId, int operationIndex = 0);
        /// <summary>
        /// Create Validation in Warehouse
        /// </summary>
        /// <remarks>
        /// Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateValidationInWarehouse200Response</returns>
        CreateValidationInWarehouse200Response CreateValidationInWarehouse(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Validation in Warehouse
        /// </summary>
        /// <remarks>
        /// Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateValidationInWarehouse200Response</returns>
        ApiResponse<CreateValidationInWarehouse200Response> CreateValidationInWarehouseWithHttpInfo(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWarehouse201Response</returns>
        CreateWarehouse201Response CreateWarehouse(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWarehouse201Response</returns>
        ApiResponse<CreateWarehouse201Response> CreateWarehouseWithHttpInfo(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0);
        /// <summary>
        /// Delete Warehouse
        /// </summary>
        /// <remarks>
        /// Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteWarehouse200Response</returns>
        DeleteWarehouse200Response DeleteWarehouse(string warehouseId, int operationIndex = 0);

        /// <summary>
        /// Delete Warehouse
        /// </summary>
        /// <remarks>
        /// Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteWarehouse200Response</returns>
        ApiResponse<DeleteWarehouse200Response> DeleteWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0);
        /// <summary>
        /// Get Connection State from Warehouse
        /// </summary>
        /// <remarks>
        /// Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConnectionStateFromWarehouse200Response</returns>
        GetConnectionStateFromWarehouse200Response GetConnectionStateFromWarehouse(string warehouseId, int operationIndex = 0);

        /// <summary>
        /// Get Connection State from Warehouse
        /// </summary>
        /// <remarks>
        /// Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConnectionStateFromWarehouse200Response</returns>
        ApiResponse<GetConnectionStateFromWarehouse200Response> GetConnectionStateFromWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0);
        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a Warehouse by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWarehouse200Response</returns>
        GetWarehouse200Response GetWarehouse(string warehouseId, int operationIndex = 0);

        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a Warehouse by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWarehouse200Response</returns>
        ApiResponse<GetWarehouse200Response> GetWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0);
        /// <summary>
        /// List Connected Sources from Warehouse
        /// </summary>
        /// <remarks>
        /// Returns the list of Sources that are connected to a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedSourcesFromWarehouse200Response</returns>
        ListConnectedSourcesFromWarehouse200Response ListConnectedSourcesFromWarehouse(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Connected Sources from Warehouse
        /// </summary>
        /// <remarks>
        /// Returns the list of Sources that are connected to a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedSourcesFromWarehouse200Response</returns>
        ApiResponse<ListConnectedSourcesFromWarehouse200Response> ListConnectedSourcesFromWarehouseWithHttpInfo(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWarehouses200Response</returns>
        ListWarehouses200Response ListWarehouses(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWarehouses200Response</returns>
        ApiResponse<ListWarehouses200Response> ListWarehousesWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Remove Source Connection from Warehouse
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSourceConnectionFromWarehouse200Response</returns>
        RemoveSourceConnectionFromWarehouse200Response RemoveSourceConnectionFromWarehouse(string warehouseId, string sourceId, int operationIndex = 0);

        /// <summary>
        /// Remove Source Connection from Warehouse
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSourceConnectionFromWarehouse200Response</returns>
        ApiResponse<RemoveSourceConnectionFromWarehouse200Response> RemoveSourceConnectionFromWarehouseWithHttpInfo(string warehouseId, string sourceId, int operationIndex = 0);
        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateWarehouse200Response</returns>
        UpdateWarehouse200Response UpdateWarehouse(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateWarehouse200Response</returns>
        ApiResponse<UpdateWarehouse200Response> UpdateWarehouseWithHttpInfo(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Connection from Source to Warehouse
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddConnectionFromSourceToWarehouse201Response</returns>
        System.Threading.Tasks.Task<AddConnectionFromSourceToWarehouse201Response> AddConnectionFromSourceToWarehouseAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Connection from Source to Warehouse
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddConnectionFromSourceToWarehouse201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddConnectionFromSourceToWarehouse201Response>> AddConnectionFromSourceToWarehouseWithHttpInfoAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Validation in Warehouse
        /// </summary>
        /// <remarks>
        /// Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateValidationInWarehouse200Response</returns>
        System.Threading.Tasks.Task<CreateValidationInWarehouse200Response> CreateValidationInWarehouseAsync(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Validation in Warehouse
        /// </summary>
        /// <remarks>
        /// Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateValidationInWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateValidationInWarehouse200Response>> CreateValidationInWarehouseWithHttpInfoAsync(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWarehouse201Response</returns>
        System.Threading.Tasks.Task<CreateWarehouse201Response> CreateWarehouseAsync(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Warehouse
        /// </summary>
        /// <remarks>
        /// Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWarehouse201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWarehouse201Response>> CreateWarehouseWithHttpInfoAsync(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Warehouse
        /// </summary>
        /// <remarks>
        /// Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWarehouse200Response</returns>
        System.Threading.Tasks.Task<DeleteWarehouse200Response> DeleteWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Warehouse
        /// </summary>
        /// <remarks>
        /// Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteWarehouse200Response>> DeleteWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Connection State from Warehouse
        /// </summary>
        /// <remarks>
        /// Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionStateFromWarehouse200Response</returns>
        System.Threading.Tasks.Task<GetConnectionStateFromWarehouse200Response> GetConnectionStateFromWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Connection State from Warehouse
        /// </summary>
        /// <remarks>
        /// Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionStateFromWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetConnectionStateFromWarehouse200Response>> GetConnectionStateFromWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a Warehouse by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWarehouse200Response</returns>
        System.Threading.Tasks.Task<GetWarehouse200Response> GetWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Warehouse
        /// </summary>
        /// <remarks>
        /// Returns a Warehouse by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWarehouse200Response>> GetWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Connected Sources from Warehouse
        /// </summary>
        /// <remarks>
        /// Returns the list of Sources that are connected to a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedSourcesFromWarehouse200Response</returns>
        System.Threading.Tasks.Task<ListConnectedSourcesFromWarehouse200Response> ListConnectedSourcesFromWarehouseAsync(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Connected Sources from Warehouse
        /// </summary>
        /// <remarks>
        /// Returns the list of Sources that are connected to a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedSourcesFromWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListConnectedSourcesFromWarehouse200Response>> ListConnectedSourcesFromWarehouseWithHttpInfoAsync(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWarehouses200Response</returns>
        System.Threading.Tasks.Task<ListWarehouses200Response> ListWarehousesAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Warehouses
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWarehouses200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWarehouses200Response>> ListWarehousesWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Source Connection from Warehouse
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSourceConnectionFromWarehouse200Response</returns>
        System.Threading.Tasks.Task<RemoveSourceConnectionFromWarehouse200Response> RemoveSourceConnectionFromWarehouseAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Source Connection from Warehouse
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Warehouse.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSourceConnectionFromWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveSourceConnectionFromWarehouse200Response>> RemoveSourceConnectionFromWarehouseWithHttpInfoAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWarehouse200Response</returns>
        System.Threading.Tasks.Task<UpdateWarehouse200Response> UpdateWarehouseAsync(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Warehouse
        /// </summary>
        /// <remarks>
        /// Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWarehouse200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateWarehouse200Response>> UpdateWarehouseWithHttpInfoAsync(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWarehousesApi : IWarehousesApiSync, IWarehousesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WarehousesApi : IWarehousesApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehousesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WarehousesApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WarehousesApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WarehousesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WarehousesApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Connection from Source to Warehouse Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddConnectionFromSourceToWarehouse201Response</returns>
        public AddConnectionFromSourceToWarehouse201Response AddConnectionFromSourceToWarehouse(string warehouseId, string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<AddConnectionFromSourceToWarehouse201Response> localVarResponse = AddConnectionFromSourceToWarehouseWithHttpInfo(warehouseId, sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Connection from Source to Warehouse Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddConnectionFromSourceToWarehouse201Response</returns>
        public Segment.PublicApi.Client.ApiResponse<AddConnectionFromSourceToWarehouse201Response> AddConnectionFromSourceToWarehouseWithHttpInfo(string warehouseId, string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->AddConnectionFromSourceToWarehouse");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling WarehousesApi->AddConnectionFromSourceToWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.AddConnectionFromSourceToWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddConnectionFromSourceToWarehouse201Response>("/warehouses/{warehouseId}/connected-sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConnectionFromSourceToWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Connection from Source to Warehouse Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddConnectionFromSourceToWarehouse201Response</returns>
        public async System.Threading.Tasks.Task<AddConnectionFromSourceToWarehouse201Response> AddConnectionFromSourceToWarehouseAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<AddConnectionFromSourceToWarehouse201Response> localVarResponse = await AddConnectionFromSourceToWarehouseWithHttpInfoAsync(warehouseId, sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Connection from Source to Warehouse Connects a Source to a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddConnectionFromSourceToWarehouse201Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<AddConnectionFromSourceToWarehouse201Response>> AddConnectionFromSourceToWarehouseWithHttpInfoAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->AddConnectionFromSourceToWarehouse");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling WarehousesApi->AddConnectionFromSourceToWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.AddConnectionFromSourceToWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddConnectionFromSourceToWarehouse201Response>("/warehouses/{warehouseId}/connected-sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddConnectionFromSourceToWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Validation in Warehouse Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateValidationInWarehouse200Response</returns>
        public CreateValidationInWarehouse200Response CreateValidationInWarehouse(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateValidationInWarehouse200Response> localVarResponse = CreateValidationInWarehouseWithHttpInfo(createValidationInWarehouseV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation in Warehouse Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateValidationInWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateValidationInWarehouse200Response> CreateValidationInWarehouseWithHttpInfo(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createValidationInWarehouseV1Input' is set
            if (createValidationInWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createValidationInWarehouseV1Input' when calling WarehousesApi->CreateValidationInWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createValidationInWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.CreateValidationInWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateValidationInWarehouse200Response>("/warehouses/validation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationInWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Validation in Warehouse Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateValidationInWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<CreateValidationInWarehouse200Response> CreateValidationInWarehouseAsync(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateValidationInWarehouse200Response> localVarResponse = await CreateValidationInWarehouseWithHttpInfoAsync(createValidationInWarehouseV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Validation in Warehouse Validates input settings against a Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Settings Validation&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createValidationInWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateValidationInWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateValidationInWarehouse200Response>> CreateValidationInWarehouseWithHttpInfoAsync(CreateValidationInWarehouseV1Input createValidationInWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createValidationInWarehouseV1Input' is set
            if (createValidationInWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createValidationInWarehouseV1Input' when calling WarehousesApi->CreateValidationInWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createValidationInWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.CreateValidationInWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateValidationInWarehouse200Response>("/warehouses/validation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateValidationInWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Warehouse Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWarehouse201Response</returns>
        public CreateWarehouse201Response CreateWarehouse(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateWarehouse201Response> localVarResponse = CreateWarehouseWithHttpInfo(createWarehouseV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Warehouse Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWarehouse201Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateWarehouse201Response> CreateWarehouseWithHttpInfo(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createWarehouseV1Input' is set
            if (createWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createWarehouseV1Input' when calling WarehousesApi->CreateWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.CreateWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWarehouse201Response>("/warehouses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Warehouse Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWarehouse201Response</returns>
        public async System.Threading.Tasks.Task<CreateWarehouse201Response> CreateWarehouseAsync(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateWarehouse201Response> localVarResponse = await CreateWarehouseWithHttpInfoAsync(createWarehouseV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Warehouse Creates a new Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWarehouse201Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateWarehouse201Response>> CreateWarehouseWithHttpInfoAsync(CreateWarehouseV1Input createWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWarehouseV1Input' is set
            if (createWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createWarehouseV1Input' when calling WarehousesApi->CreateWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.CreateWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWarehouse201Response>("/warehouses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Warehouse Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteWarehouse200Response</returns>
        public DeleteWarehouse200Response DeleteWarehouse(string warehouseId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteWarehouse200Response> localVarResponse = DeleteWarehouseWithHttpInfo(warehouseId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Warehouse Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteWarehouse200Response> DeleteWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->DeleteWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.DeleteWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Warehouse Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<DeleteWarehouse200Response> DeleteWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteWarehouse200Response> localVarResponse = await DeleteWarehouseWithHttpInfoAsync(warehouseId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Warehouse Deletes an existing Warehouse.    • When called, this endpoint may generate the &#x60;Storage Destination Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteWarehouse200Response>> DeleteWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->DeleteWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.DeleteWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connection State from Warehouse Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetConnectionStateFromWarehouse200Response</returns>
        public GetConnectionStateFromWarehouse200Response GetConnectionStateFromWarehouse(string warehouseId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetConnectionStateFromWarehouse200Response> localVarResponse = GetConnectionStateFromWarehouseWithHttpInfo(warehouseId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connection State from Warehouse Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetConnectionStateFromWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetConnectionStateFromWarehouse200Response> GetConnectionStateFromWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->GetConnectionStateFromWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.GetConnectionStateFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetConnectionStateFromWarehouse200Response>("/warehouses/{warehouseId}/connection-state", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectionStateFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Connection State from Warehouse Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetConnectionStateFromWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<GetConnectionStateFromWarehouse200Response> GetConnectionStateFromWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetConnectionStateFromWarehouse200Response> localVarResponse = await GetConnectionStateFromWarehouseWithHttpInfoAsync(warehouseId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Connection State from Warehouse Verifies the state of Warehouse connection settings.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetConnectionStateFromWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetConnectionStateFromWarehouse200Response>> GetConnectionStateFromWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->GetConnectionStateFromWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.GetConnectionStateFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetConnectionStateFromWarehouse200Response>("/warehouses/{warehouseId}/connection-state", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetConnectionStateFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Warehouse Returns a Warehouse by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetWarehouse200Response</returns>
        public GetWarehouse200Response GetWarehouse(string warehouseId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetWarehouse200Response> localVarResponse = GetWarehouseWithHttpInfo(warehouseId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Warehouse Returns a Warehouse by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetWarehouse200Response> GetWarehouseWithHttpInfo(string warehouseId, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->GetWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.GetWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Warehouse Returns a Warehouse by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<GetWarehouse200Response> GetWarehouseAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetWarehouse200Response> localVarResponse = await GetWarehouseWithHttpInfoAsync(warehouseId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Warehouse Returns a Warehouse by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetWarehouse200Response>> GetWarehouseWithHttpInfoAsync(string warehouseId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->GetWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.GetWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Sources from Warehouse Returns the list of Sources that are connected to a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedSourcesFromWarehouse200Response</returns>
        public ListConnectedSourcesFromWarehouse200Response ListConnectedSourcesFromWarehouse(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedSourcesFromWarehouse200Response> localVarResponse = ListConnectedSourcesFromWarehouseWithHttpInfo(warehouseId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Sources from Warehouse Returns the list of Sources that are connected to a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedSourcesFromWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListConnectedSourcesFromWarehouse200Response> ListConnectedSourcesFromWarehouseWithHttpInfo(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->ListConnectedSourcesFromWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "WarehousesApi.ListConnectedSourcesFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListConnectedSourcesFromWarehouse200Response>("/warehouses/{warehouseId}/connected-sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedSourcesFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Sources from Warehouse Returns the list of Sources that are connected to a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedSourcesFromWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<ListConnectedSourcesFromWarehouse200Response> ListConnectedSourcesFromWarehouseAsync(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedSourcesFromWarehouse200Response> localVarResponse = await ListConnectedSourcesFromWarehouseWithHttpInfoAsync(warehouseId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Sources from Warehouse Returns the list of Sources that are connected to a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedSourcesFromWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListConnectedSourcesFromWarehouse200Response>> ListConnectedSourcesFromWarehouseWithHttpInfoAsync(string warehouseId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->ListConnectedSourcesFromWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "WarehousesApi.ListConnectedSourcesFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListConnectedSourcesFromWarehouse200Response>("/warehouses/{warehouseId}/connected-sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedSourcesFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Warehouses Returns a list of Warehouses.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWarehouses200Response</returns>
        public ListWarehouses200Response ListWarehouses(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListWarehouses200Response> localVarResponse = ListWarehousesWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Warehouses Returns a list of Warehouses.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWarehouses200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListWarehouses200Response> ListWarehousesWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "WarehousesApi.ListWarehouses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWarehouses200Response>("/warehouses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWarehouses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Warehouses Returns a list of Warehouses.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWarehouses200Response</returns>
        public async System.Threading.Tasks.Task<ListWarehouses200Response> ListWarehousesAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListWarehouses200Response> localVarResponse = await ListWarehousesWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Warehouses Returns a list of Warehouses.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWarehouses200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListWarehouses200Response>> ListWarehousesWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "WarehousesApi.ListWarehouses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWarehouses200Response>("/warehouses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWarehouses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Source Connection from Warehouse Disconnects a Source from a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSourceConnectionFromWarehouse200Response</returns>
        public RemoveSourceConnectionFromWarehouse200Response RemoveSourceConnectionFromWarehouse(string warehouseId, string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSourceConnectionFromWarehouse200Response> localVarResponse = RemoveSourceConnectionFromWarehouseWithHttpInfo(warehouseId, sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Source Connection from Warehouse Disconnects a Source from a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSourceConnectionFromWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveSourceConnectionFromWarehouse200Response> RemoveSourceConnectionFromWarehouseWithHttpInfo(string warehouseId, string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->RemoveSourceConnectionFromWarehouse");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling WarehousesApi->RemoveSourceConnectionFromWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.RemoveSourceConnectionFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveSourceConnectionFromWarehouse200Response>("/warehouses/{warehouseId}/connected-sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSourceConnectionFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Source Connection from Warehouse Disconnects a Source from a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSourceConnectionFromWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<RemoveSourceConnectionFromWarehouse200Response> RemoveSourceConnectionFromWarehouseAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSourceConnectionFromWarehouse200Response> localVarResponse = await RemoveSourceConnectionFromWarehouseWithHttpInfoAsync(warehouseId, sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Source Connection from Warehouse Disconnects a Source from a Warehouse.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSourceConnectionFromWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveSourceConnectionFromWarehouse200Response>> RemoveSourceConnectionFromWarehouseWithHttpInfoAsync(string warehouseId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->RemoveSourceConnectionFromWarehouse");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling WarehousesApi->RemoveSourceConnectionFromWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "WarehousesApi.RemoveSourceConnectionFromWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveSourceConnectionFromWarehouse200Response>("/warehouses/{warehouseId}/connected-sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSourceConnectionFromWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Warehouse Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateWarehouse200Response</returns>
        public UpdateWarehouse200Response UpdateWarehouse(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateWarehouse200Response> localVarResponse = UpdateWarehouseWithHttpInfo(warehouseId, updateWarehouseV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Warehouse Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateWarehouse200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateWarehouse200Response> UpdateWarehouseWithHttpInfo(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->UpdateWarehouse");
            }

            // verify the required parameter 'updateWarehouseV1Input' is set
            if (updateWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateWarehouseV1Input' when calling WarehousesApi->UpdateWarehouse");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.Data = updateWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.UpdateWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Warehouse Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateWarehouse200Response</returns>
        public async System.Threading.Tasks.Task<UpdateWarehouse200Response> UpdateWarehouseAsync(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateWarehouse200Response> localVarResponse = await UpdateWarehouseWithHttpInfoAsync(warehouseId, updateWarehouseV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Warehouse Updates an existing Warehouse.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Storage Destination Modified * Storage Destination Enabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warehouseId"></param>
        /// <param name="updateWarehouseV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateWarehouse200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateWarehouse200Response>> UpdateWarehouseWithHttpInfoAsync(string warehouseId, UpdateWarehouseV1Input updateWarehouseV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'warehouseId' is set
            if (warehouseId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'warehouseId' when calling WarehousesApi->UpdateWarehouse");
            }

            // verify the required parameter 'updateWarehouseV1Input' is set
            if (updateWarehouseV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateWarehouseV1Input' when calling WarehousesApi->UpdateWarehouse");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("warehouseId", Segment.PublicApi.Client.ClientUtils.ParameterToString(warehouseId)); // path parameter
            localVarRequestOptions.Data = updateWarehouseV1Input;

            localVarRequestOptions.Operation = "WarehousesApi.UpdateWarehouse";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateWarehouse200Response>("/warehouses/{warehouseId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateWarehouse", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
