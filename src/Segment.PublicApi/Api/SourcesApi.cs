/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Labels to Source
        /// </summary>
        /// <remarks>
        /// Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLabelsToSource200Response</returns>
        AddLabelsToSource200Response AddLabelsToSource(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0);

        /// <summary>
        /// Add Labels to Source
        /// </summary>
        /// <remarks>
        /// Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLabelsToSource200Response</returns>
        ApiResponse<AddLabelsToSource200Response> AddLabelsToSourceWithHttpInfo(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Source
        /// </summary>
        /// <remarks>
        /// Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSource201Response</returns>
        CreateSource201Response CreateSource(CreateSourceV1Input createSourceV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Source
        /// </summary>
        /// <remarks>
        /// Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSource201Response</returns>
        ApiResponse<CreateSource201Response> CreateSourceWithHttpInfo(CreateSourceV1Input createSourceV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Write Key for Source
        /// </summary>
        /// <remarks>
        /// Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWriteKeyForSource200Response</returns>
        CreateWriteKeyForSource200Response CreateWriteKeyForSource(string sourceId, int operationIndex = 0);

        /// <summary>
        /// Create Write Key for Source
        /// </summary>
        /// <remarks>
        /// Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWriteKeyForSource200Response</returns>
        ApiResponse<CreateWriteKeyForSource200Response> CreateWriteKeyForSourceWithHttpInfo(string sourceId, int operationIndex = 0);
        /// <summary>
        /// Delete Source
        /// </summary>
        /// <remarks>
        /// Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSource200Response</returns>
        DeleteSource200Response DeleteSource(string sourceId, int operationIndex = 0);

        /// <summary>
        /// Delete Source
        /// </summary>
        /// <remarks>
        /// Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSource200Response</returns>
        ApiResponse<DeleteSource200Response> DeleteSourceWithHttpInfo(string sourceId, int operationIndex = 0);
        /// <summary>
        /// Get Source
        /// </summary>
        /// <remarks>
        /// Returns a Source by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSource200Response</returns>
        GetSource200Response GetSource(string sourceId, int operationIndex = 0);

        /// <summary>
        /// Get Source
        /// </summary>
        /// <remarks>
        /// Returns a Source by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSource200Response</returns>
        ApiResponse<GetSource200Response> GetSourceWithHttpInfo(string sourceId, int operationIndex = 0);
        /// <summary>
        /// List Connected Destinations from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedDestinationsFromSource200Response</returns>
        ListConnectedDestinationsFromSource200Response ListConnectedDestinationsFromSource(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Connected Destinations from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedDestinationsFromSource200Response</returns>
        ApiResponse<ListConnectedDestinationsFromSource200Response> ListConnectedDestinationsFromSourceWithHttpInfo(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Connected Warehouses from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedWarehousesFromSource200Response</returns>
        ListConnectedWarehousesFromSource200Response ListConnectedWarehousesFromSource(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Connected Warehouses from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedWarehousesFromSource200Response</returns>
        ApiResponse<ListConnectedWarehousesFromSource200Response> ListConnectedWarehousesFromSourceWithHttpInfo(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSchemaSettingsInSource200Response</returns>
        ListSchemaSettingsInSource200Response ListSchemaSettingsInSource(string sourceId, int operationIndex = 0);

        /// <summary>
        /// List Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSchemaSettingsInSource200Response</returns>
        ApiResponse<ListSchemaSettingsInSource200Response> ListSchemaSettingsInSourceWithHttpInfo(string sourceId, int operationIndex = 0);
        /// <summary>
        /// List Sources
        /// </summary>
        /// <remarks>
        /// Returns a list of Sources.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSources200Response</returns>
        ListSources200Response ListSources(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Sources
        /// </summary>
        /// <remarks>
        /// Returns a list of Sources.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSources200Response</returns>
        ApiResponse<ListSources200Response> ListSourcesWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Remove Write Key from Source
        /// </summary>
        /// <remarks>
        /// Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveWriteKeyFromSource200Response</returns>
        RemoveWriteKeyFromSource200Response RemoveWriteKeyFromSource(string sourceId, string writeKey, int operationIndex = 0);

        /// <summary>
        /// Remove Write Key from Source
        /// </summary>
        /// <remarks>
        /// Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveWriteKeyFromSource200Response</returns>
        ApiResponse<RemoveWriteKeyFromSource200Response> RemoveWriteKeyFromSourceWithHttpInfo(string sourceId, string writeKey, int operationIndex = 0);
        /// <summary>
        /// Replace Labels in Source
        /// </summary>
        /// <remarks>
        /// Replaces all labels in a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceLabelsInSource200Response</returns>
        ReplaceLabelsInSource200Response ReplaceLabelsInSource(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0);

        /// <summary>
        /// Replace Labels in Source
        /// </summary>
        /// <remarks>
        /// Replaces all labels in a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceLabelsInSource200Response</returns>
        ApiResponse<ReplaceLabelsInSource200Response> ReplaceLabelsInSourceWithHttpInfo(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSchemaSettingsInSource200Response</returns>
        UpdateSchemaSettingsInSource200Response UpdateSchemaSettingsInSource(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSchemaSettingsInSource200Response</returns>
        ApiResponse<UpdateSchemaSettingsInSource200Response> UpdateSchemaSettingsInSourceWithHttpInfo(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSource200Response</returns>
        UpdateSource200Response UpdateSource(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSource200Response</returns>
        ApiResponse<UpdateSource200Response> UpdateSourceWithHttpInfo(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Labels to Source
        /// </summary>
        /// <remarks>
        /// Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLabelsToSource200Response</returns>
        System.Threading.Tasks.Task<AddLabelsToSource200Response> AddLabelsToSourceAsync(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Labels to Source
        /// </summary>
        /// <remarks>
        /// Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLabelsToSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddLabelsToSource200Response>> AddLabelsToSourceWithHttpInfoAsync(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Source
        /// </summary>
        /// <remarks>
        /// Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSource201Response</returns>
        System.Threading.Tasks.Task<CreateSource201Response> CreateSourceAsync(CreateSourceV1Input createSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Source
        /// </summary>
        /// <remarks>
        /// Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSource201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSource201Response>> CreateSourceWithHttpInfoAsync(CreateSourceV1Input createSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Write Key for Source
        /// </summary>
        /// <remarks>
        /// Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWriteKeyForSource200Response</returns>
        System.Threading.Tasks.Task<CreateWriteKeyForSource200Response> CreateWriteKeyForSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Write Key for Source
        /// </summary>
        /// <remarks>
        /// Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWriteKeyForSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWriteKeyForSource200Response>> CreateWriteKeyForSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Source
        /// </summary>
        /// <remarks>
        /// Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSource200Response</returns>
        System.Threading.Tasks.Task<DeleteSource200Response> DeleteSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Source
        /// </summary>
        /// <remarks>
        /// Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSource200Response>> DeleteSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Source
        /// </summary>
        /// <remarks>
        /// Returns a Source by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSource200Response</returns>
        System.Threading.Tasks.Task<GetSource200Response> GetSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Source
        /// </summary>
        /// <remarks>
        /// Returns a Source by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSource200Response>> GetSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Connected Destinations from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedDestinationsFromSource200Response</returns>
        System.Threading.Tasks.Task<ListConnectedDestinationsFromSource200Response> ListConnectedDestinationsFromSourceAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Connected Destinations from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Destinations connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedDestinationsFromSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListConnectedDestinationsFromSource200Response>> ListConnectedDestinationsFromSourceWithHttpInfoAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Connected Warehouses from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedWarehousesFromSource200Response</returns>
        System.Threading.Tasks.Task<ListConnectedWarehousesFromSource200Response> ListConnectedWarehousesFromSourceAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Connected Warehouses from Source
        /// </summary>
        /// <remarks>
        /// Returns a list of Warehouses connected to a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedWarehousesFromSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListConnectedWarehousesFromSource200Response>> ListConnectedWarehousesFromSourceWithHttpInfoAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchemaSettingsInSource200Response</returns>
        System.Threading.Tasks.Task<ListSchemaSettingsInSource200Response> ListSchemaSettingsInSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchemaSettingsInSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSchemaSettingsInSource200Response>> ListSchemaSettingsInSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Sources
        /// </summary>
        /// <remarks>
        /// Returns a list of Sources.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSources200Response</returns>
        System.Threading.Tasks.Task<ListSources200Response> ListSourcesAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Sources
        /// </summary>
        /// <remarks>
        /// Returns a list of Sources.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSources200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSources200Response>> ListSourcesWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Write Key from Source
        /// </summary>
        /// <remarks>
        /// Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveWriteKeyFromSource200Response</returns>
        System.Threading.Tasks.Task<RemoveWriteKeyFromSource200Response> RemoveWriteKeyFromSourceAsync(string sourceId, string writeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Write Key from Source
        /// </summary>
        /// <remarks>
        /// Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveWriteKeyFromSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveWriteKeyFromSource200Response>> RemoveWriteKeyFromSourceWithHttpInfoAsync(string sourceId, string writeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Labels in Source
        /// </summary>
        /// <remarks>
        /// Replaces all labels in a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceLabelsInSource200Response</returns>
        System.Threading.Tasks.Task<ReplaceLabelsInSource200Response> ReplaceLabelsInSourceAsync(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Labels in Source
        /// </summary>
        /// <remarks>
        /// Replaces all labels in a Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceLabelsInSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceLabelsInSource200Response>> ReplaceLabelsInSourceWithHttpInfoAsync(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSchemaSettingsInSource200Response</returns>
        System.Threading.Tasks.Task<UpdateSchemaSettingsInSource200Response> UpdateSchemaSettingsInSourceAsync(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Schema Settings in Source
        /// </summary>
        /// <remarks>
        /// Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSchemaSettingsInSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSchemaSettingsInSource200Response>> UpdateSchemaSettingsInSourceWithHttpInfoAsync(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSource200Response</returns>
        System.Threading.Tasks.Task<UpdateSource200Response> UpdateSourceAsync(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Source
        /// </summary>
        /// <remarks>
        /// Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateSource200Response>> UpdateSourceWithHttpInfoAsync(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISourcesApi : ISourcesApiSync, ISourcesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SourcesApi : ISourcesApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourcesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SourcesApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SourcesApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SourcesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SourcesApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Labels to Source Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddLabelsToSource200Response</returns>
        public AddLabelsToSource200Response AddLabelsToSource(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<AddLabelsToSource200Response> localVarResponse = AddLabelsToSourceWithHttpInfo(sourceId, addLabelsToSourceV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Labels to Source Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddLabelsToSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<AddLabelsToSource200Response> AddLabelsToSourceWithHttpInfo(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->AddLabelsToSource");
            }

            // verify the required parameter 'addLabelsToSourceV1Input' is set
            if (addLabelsToSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addLabelsToSourceV1Input' when calling SourcesApi->AddLabelsToSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = addLabelsToSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.AddLabelsToSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddLabelsToSource200Response>("/sources/{sourceId}/labels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLabelsToSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Labels to Source Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddLabelsToSource200Response</returns>
        public async System.Threading.Tasks.Task<AddLabelsToSource200Response> AddLabelsToSourceAsync(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<AddLabelsToSource200Response> localVarResponse = await AddLabelsToSourceWithHttpInfoAsync(sourceId, addLabelsToSourceV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Labels to Source Adds an existing label to a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="addLabelsToSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddLabelsToSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<AddLabelsToSource200Response>> AddLabelsToSourceWithHttpInfoAsync(string sourceId, AddLabelsToSourceV1Input addLabelsToSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->AddLabelsToSource");
            }

            // verify the required parameter 'addLabelsToSourceV1Input' is set
            if (addLabelsToSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addLabelsToSourceV1Input' when calling SourcesApi->AddLabelsToSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = addLabelsToSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.AddLabelsToSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddLabelsToSource200Response>("/sources/{sourceId}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddLabelsToSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Source Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSource201Response</returns>
        public CreateSource201Response CreateSource(CreateSourceV1Input createSourceV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateSource201Response> localVarResponse = CreateSourceWithHttpInfo(createSourceV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Source Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSource201Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateSource201Response> CreateSourceWithHttpInfo(CreateSourceV1Input createSourceV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createSourceV1Input' is set
            if (createSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createSourceV1Input' when calling SourcesApi->CreateSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.CreateSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSource201Response>("/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Source Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSource201Response</returns>
        public async System.Threading.Tasks.Task<CreateSource201Response> CreateSourceAsync(CreateSourceV1Input createSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateSource201Response> localVarResponse = await CreateSourceWithHttpInfoAsync(createSourceV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Source Creates a new Source.    • When called, this endpoint may generate the &#x60;Source Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSource201Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateSource201Response>> CreateSourceWithHttpInfoAsync(CreateSourceV1Input createSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSourceV1Input' is set
            if (createSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createSourceV1Input' when calling SourcesApi->CreateSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.CreateSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSource201Response>("/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Write Key for Source Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWriteKeyForSource200Response</returns>
        public CreateWriteKeyForSource200Response CreateWriteKeyForSource(string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateWriteKeyForSource200Response> localVarResponse = CreateWriteKeyForSourceWithHttpInfo(sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Write Key for Source Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWriteKeyForSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateWriteKeyForSource200Response> CreateWriteKeyForSourceWithHttpInfo(string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->CreateWriteKeyForSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.CreateWriteKeyForSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWriteKeyForSource200Response>("/sources/{sourceId}/writekey", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWriteKeyForSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Write Key for Source Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWriteKeyForSource200Response</returns>
        public async System.Threading.Tasks.Task<CreateWriteKeyForSource200Response> CreateWriteKeyForSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateWriteKeyForSource200Response> localVarResponse = await CreateWriteKeyForSourceWithHttpInfoAsync(sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Write Key for Source Creates a new Write Key for the Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWriteKeyForSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateWriteKeyForSource200Response>> CreateWriteKeyForSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->CreateWriteKeyForSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.CreateWriteKeyForSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWriteKeyForSource200Response>("/sources/{sourceId}/writekey", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWriteKeyForSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Source Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSource200Response</returns>
        public DeleteSource200Response DeleteSource(string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteSource200Response> localVarResponse = DeleteSourceWithHttpInfo(sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Source Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteSource200Response> DeleteSourceWithHttpInfo(string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->DeleteSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.DeleteSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Source Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSource200Response</returns>
        public async System.Threading.Tasks.Task<DeleteSource200Response> DeleteSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteSource200Response> localVarResponse = await DeleteSourceWithHttpInfoAsync(sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Source Deletes an existing Source.    • When called, this endpoint may generate the &#x60;Source Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteSource200Response>> DeleteSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->DeleteSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.DeleteSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Source Returns a Source by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSource200Response</returns>
        public GetSource200Response GetSource(string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetSource200Response> localVarResponse = GetSourceWithHttpInfo(sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Source Returns a Source by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetSource200Response> GetSourceWithHttpInfo(string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.GetSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Source Returns a Source by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSource200Response</returns>
        public async System.Threading.Tasks.Task<GetSource200Response> GetSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetSource200Response> localVarResponse = await GetSourceWithHttpInfoAsync(sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Source Returns a Source by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetSource200Response>> GetSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->GetSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.GetSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Destinations from Source Returns a list of Destinations connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedDestinationsFromSource200Response</returns>
        public ListConnectedDestinationsFromSource200Response ListConnectedDestinationsFromSource(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedDestinationsFromSource200Response> localVarResponse = ListConnectedDestinationsFromSourceWithHttpInfo(sourceId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Destinations from Source Returns a list of Destinations connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedDestinationsFromSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListConnectedDestinationsFromSource200Response> ListConnectedDestinationsFromSourceWithHttpInfo(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListConnectedDestinationsFromSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListConnectedDestinationsFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListConnectedDestinationsFromSource200Response>("/sources/{sourceId}/connected-destinations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedDestinationsFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Destinations from Source Returns a list of Destinations connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedDestinationsFromSource200Response</returns>
        public async System.Threading.Tasks.Task<ListConnectedDestinationsFromSource200Response> ListConnectedDestinationsFromSourceAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedDestinationsFromSource200Response> localVarResponse = await ListConnectedDestinationsFromSourceWithHttpInfoAsync(sourceId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Destinations from Source Returns a list of Destinations connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedDestinationsFromSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListConnectedDestinationsFromSource200Response>> ListConnectedDestinationsFromSourceWithHttpInfoAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListConnectedDestinationsFromSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListConnectedDestinationsFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListConnectedDestinationsFromSource200Response>("/sources/{sourceId}/connected-destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedDestinationsFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Warehouses from Source Returns a list of Warehouses connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListConnectedWarehousesFromSource200Response</returns>
        public ListConnectedWarehousesFromSource200Response ListConnectedWarehousesFromSource(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedWarehousesFromSource200Response> localVarResponse = ListConnectedWarehousesFromSourceWithHttpInfo(sourceId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Warehouses from Source Returns a list of Warehouses connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListConnectedWarehousesFromSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListConnectedWarehousesFromSource200Response> ListConnectedWarehousesFromSourceWithHttpInfo(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListConnectedWarehousesFromSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListConnectedWarehousesFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListConnectedWarehousesFromSource200Response>("/sources/{sourceId}/connected-warehouses", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedWarehousesFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Connected Warehouses from Source Returns a list of Warehouses connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListConnectedWarehousesFromSource200Response</returns>
        public async System.Threading.Tasks.Task<ListConnectedWarehousesFromSource200Response> ListConnectedWarehousesFromSourceAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListConnectedWarehousesFromSource200Response> localVarResponse = await ListConnectedWarehousesFromSourceWithHttpInfoAsync(sourceId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Connected Warehouses from Source Returns a list of Warehouses connected to a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="pagination">Required pagination params for the request.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListConnectedWarehousesFromSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListConnectedWarehousesFromSource200Response>> ListConnectedWarehousesFromSourceWithHttpInfoAsync(string sourceId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListConnectedWarehousesFromSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListConnectedWarehousesFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListConnectedWarehousesFromSource200Response>("/sources/{sourceId}/connected-warehouses", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListConnectedWarehousesFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Schema Settings in Source Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSchemaSettingsInSource200Response</returns>
        public ListSchemaSettingsInSource200Response ListSchemaSettingsInSource(string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListSchemaSettingsInSource200Response> localVarResponse = ListSchemaSettingsInSourceWithHttpInfo(sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Schema Settings in Source Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSchemaSettingsInSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListSchemaSettingsInSource200Response> ListSchemaSettingsInSourceWithHttpInfo(string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListSchemaSettingsInSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.ListSchemaSettingsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSchemaSettingsInSource200Response>("/sources/{sourceId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaSettingsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Schema Settings in Source Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSchemaSettingsInSource200Response</returns>
        public async System.Threading.Tasks.Task<ListSchemaSettingsInSource200Response> ListSchemaSettingsInSourceAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListSchemaSettingsInSource200Response> localVarResponse = await ListSchemaSettingsInSourceWithHttpInfoAsync(sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Schema Settings in Source Retrieves the schema configuration settings for a Source. If Protocols is not enabled for the Source, the configurations specific to Protocols will have default values.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSchemaSettingsInSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListSchemaSettingsInSource200Response>> ListSchemaSettingsInSourceWithHttpInfoAsync(string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ListSchemaSettingsInSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.ListSchemaSettingsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSchemaSettingsInSource200Response>("/sources/{sourceId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSchemaSettingsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Sources Returns a list of Sources.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSources200Response</returns>
        public ListSources200Response ListSources(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListSources200Response> localVarResponse = ListSourcesWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Sources Returns a list of Sources.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSources200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListSources200Response> ListSourcesWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSources200Response>("/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Sources Returns a list of Sources.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSources200Response</returns>
        public async System.Threading.Tasks.Task<ListSources200Response> ListSourcesAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListSources200Response> localVarResponse = await ListSourcesWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Sources Returns a list of Sources.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSources200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListSources200Response>> ListSourcesWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "SourcesApi.ListSources";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSources200Response>("/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSources", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Write Key from Source Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveWriteKeyFromSource200Response</returns>
        public RemoveWriteKeyFromSource200Response RemoveWriteKeyFromSource(string sourceId, string writeKey, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveWriteKeyFromSource200Response> localVarResponse = RemoveWriteKeyFromSourceWithHttpInfo(sourceId, writeKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Write Key from Source Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveWriteKeyFromSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveWriteKeyFromSource200Response> RemoveWriteKeyFromSourceWithHttpInfo(string sourceId, string writeKey, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->RemoveWriteKeyFromSource");
            }

            // verify the required parameter 'writeKey' is set
            if (writeKey == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'writeKey' when calling SourcesApi->RemoveWriteKeyFromSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("writeKey", Segment.PublicApi.Client.ClientUtils.ParameterToString(writeKey)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.RemoveWriteKeyFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveWriteKeyFromSource200Response>("/sources/{sourceId}/writekey/{writeKey}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWriteKeyFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Write Key from Source Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveWriteKeyFromSource200Response</returns>
        public async System.Threading.Tasks.Task<RemoveWriteKeyFromSource200Response> RemoveWriteKeyFromSourceAsync(string sourceId, string writeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveWriteKeyFromSource200Response> localVarResponse = await RemoveWriteKeyFromSourceWithHttpInfoAsync(sourceId, writeKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Write Key from Source Removes a Write Key from a Source.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail). 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="writeKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveWriteKeyFromSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveWriteKeyFromSource200Response>> RemoveWriteKeyFromSourceWithHttpInfoAsync(string sourceId, string writeKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->RemoveWriteKeyFromSource");
            }

            // verify the required parameter 'writeKey' is set
            if (writeKey == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'writeKey' when calling SourcesApi->RemoveWriteKeyFromSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("writeKey", Segment.PublicApi.Client.ClientUtils.ParameterToString(writeKey)); // path parameter

            localVarRequestOptions.Operation = "SourcesApi.RemoveWriteKeyFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveWriteKeyFromSource200Response>("/sources/{sourceId}/writekey/{writeKey}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveWriteKeyFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Labels in Source Replaces all labels in a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceLabelsInSource200Response</returns>
        public ReplaceLabelsInSource200Response ReplaceLabelsInSource(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceLabelsInSource200Response> localVarResponse = ReplaceLabelsInSourceWithHttpInfo(sourceId, replaceLabelsInSourceV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Labels in Source Replaces all labels in a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceLabelsInSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ReplaceLabelsInSource200Response> ReplaceLabelsInSourceWithHttpInfo(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ReplaceLabelsInSource");
            }

            // verify the required parameter 'replaceLabelsInSourceV1Input' is set
            if (replaceLabelsInSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceLabelsInSourceV1Input' when calling SourcesApi->ReplaceLabelsInSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = replaceLabelsInSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.ReplaceLabelsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReplaceLabelsInSource200Response>("/sources/{sourceId}/labels", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceLabelsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Labels in Source Replaces all labels in a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceLabelsInSource200Response</returns>
        public async System.Threading.Tasks.Task<ReplaceLabelsInSource200Response> ReplaceLabelsInSourceAsync(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceLabelsInSource200Response> localVarResponse = await ReplaceLabelsInSourceWithHttpInfoAsync(sourceId, replaceLabelsInSourceV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Labels in Source Replaces all labels in a Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="replaceLabelsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceLabelsInSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ReplaceLabelsInSource200Response>> ReplaceLabelsInSourceWithHttpInfoAsync(string sourceId, ReplaceLabelsInSourceV1Input replaceLabelsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->ReplaceLabelsInSource");
            }

            // verify the required parameter 'replaceLabelsInSourceV1Input' is set
            if (replaceLabelsInSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceLabelsInSourceV1Input' when calling SourcesApi->ReplaceLabelsInSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = replaceLabelsInSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.ReplaceLabelsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplaceLabelsInSource200Response>("/sources/{sourceId}/labels", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceLabelsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Schema Settings in Source Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSchemaSettingsInSource200Response</returns>
        public UpdateSchemaSettingsInSource200Response UpdateSchemaSettingsInSource(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSchemaSettingsInSource200Response> localVarResponse = UpdateSchemaSettingsInSourceWithHttpInfo(sourceId, updateSchemaSettingsInSourceV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Schema Settings in Source Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSchemaSettingsInSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateSchemaSettingsInSource200Response> UpdateSchemaSettingsInSourceWithHttpInfo(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSchemaSettingsInSource");
            }

            // verify the required parameter 'updateSchemaSettingsInSourceV1Input' is set
            if (updateSchemaSettingsInSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSchemaSettingsInSourceV1Input' when calling SourcesApi->UpdateSchemaSettingsInSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = updateSchemaSettingsInSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.UpdateSchemaSettingsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateSchemaSettingsInSource200Response>("/sources/{sourceId}/settings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchemaSettingsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Schema Settings in Source Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSchemaSettingsInSource200Response</returns>
        public async System.Threading.Tasks.Task<UpdateSchemaSettingsInSource200Response> UpdateSchemaSettingsInSourceAsync(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSchemaSettingsInSource200Response> localVarResponse = await UpdateSchemaSettingsInSourceWithHttpInfoAsync(sourceId, updateSchemaSettingsInSourceV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Schema Settings in Source Updates the schema configuration for a Source. If Protocols is not enabled for the Source, any updates to Protocols-specific configurations will not be applied.        Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSchemaSettingsInSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSchemaSettingsInSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateSchemaSettingsInSource200Response>> UpdateSchemaSettingsInSourceWithHttpInfoAsync(string sourceId, UpdateSchemaSettingsInSourceV1Input updateSchemaSettingsInSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSchemaSettingsInSource");
            }

            // verify the required parameter 'updateSchemaSettingsInSourceV1Input' is set
            if (updateSchemaSettingsInSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSchemaSettingsInSourceV1Input' when calling SourcesApi->UpdateSchemaSettingsInSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = updateSchemaSettingsInSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.UpdateSchemaSettingsInSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateSchemaSettingsInSource200Response>("/sources/{sourceId}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSchemaSettingsInSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Source Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateSource200Response</returns>
        public UpdateSource200Response UpdateSource(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSource200Response> localVarResponse = UpdateSourceWithHttpInfo(sourceId, updateSourceV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Source Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateSource200Response> UpdateSourceWithHttpInfo(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");
            }

            // verify the required parameter 'updateSourceV1Input' is set
            if (updateSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSourceV1Input' when calling SourcesApi->UpdateSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = updateSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.UpdateSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Source Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateSource200Response</returns>
        public async System.Threading.Tasks.Task<UpdateSource200Response> UpdateSourceAsync(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateSource200Response> localVarResponse = await UpdateSourceWithHttpInfoAsync(sourceId, updateSourceV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Source Updates an existing Source.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Source Modified * Source Enabled * Source Settings Modified * Source Disabled  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="updateSourceV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateSource200Response>> UpdateSourceWithHttpInfoAsync(string sourceId, UpdateSourceV1Input updateSourceV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling SourcesApi->UpdateSource");
            }

            // verify the required parameter 'updateSourceV1Input' is set
            if (updateSourceV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateSourceV1Input' when calling SourcesApi->UpdateSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = updateSourceV1Input;

            localVarRequestOptions.Operation = "SourcesApi.UpdateSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateSource200Response>("/sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
