/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 54.2.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryOverviewApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed to be delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetEgressFailedMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed to be delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events successfully delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetEgressSuccessMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events successfully delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetFilteredAtDestinationMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetFilteredAtSourceMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed on ingest.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetIngressFailedMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed on ingest.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were successfully received by Segment.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        GetEgressFailedMetricsFromDeliveryOverview200Response GetIngressSuccessMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were successfully received by Segment.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryOverviewApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed to be delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressFailedMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed to be delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events successfully delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressSuccessMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events successfully delivered to Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtDestinationMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtSourceMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were filtered at Source.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed on ingest.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressFailedMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that failed on ingest.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were successfully received by Segment.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressSuccessMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview
        /// </summary>
        /// <remarks>
        /// Get events that were successfully received by Segment.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeliveryOverviewApi : IDeliveryOverviewApiSync, IDeliveryOverviewApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeliveryOverviewApi : IDeliveryOverviewApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryOverviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryOverviewApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryOverviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeliveryOverviewApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryOverviewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeliveryOverviewApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryOverviewApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeliveryOverviewApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetEgressFailedMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfo(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetEgressFailedMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/failed-delivery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEgressFailedMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressFailedMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Egress Failed Metrics from Delivery Overview Get events that failed to be delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetEgressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetEgressFailedMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetEgressFailedMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/failed-delivery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEgressFailedMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview Get events successfully delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetEgressSuccessMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfo(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview Get events successfully delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetEgressSuccessMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/successful-delivery", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEgressSuccessMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview Get events successfully delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetEgressSuccessMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Egress Success Metrics from Delivery Overview Get events successfully delivered to Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;appVersion&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;. If you would like to view retry attempts for a successful delivery, you can filter &#x60;discard Reason&#x60; from &#x60;successes.attempt.1&#x60; through &#x60;successes.attempt.10&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetEgressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetEgressSuccessMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetEgressSuccessMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/successful-delivery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEgressSuccessMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetFilteredAtDestinationMetricsFromDeliveryOverview(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfo(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetFilteredAtDestinationMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/filtered-at-destination", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredAtDestinationMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtDestinationMetricsFromDeliveryOverviewAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, destinationConfigId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered At Destination Metrics from Delivery Overview Get events that were filtered at Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="destinationConfigId">The id tied to a Workspace Destination.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and &#x60;spaceId&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, &#x60;app Version&#x60;, &#x60;subscription Id&#x60;, &#x60;activationId&#x60;, &#x60;audienceId&#x60;, and/or &#x60;spaceId&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetFilteredAtDestinationMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string destinationConfigId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewDestinationFilterBy? filter = default(DeliveryOverviewDestinationFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'destinationConfigId' is set
            if (destinationConfigId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationConfigId' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetFilteredAtDestinationMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "destinationConfigId", destinationConfigId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetFilteredAtDestinationMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/filtered-at-destination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredAtDestinationMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetFilteredAtSourceMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfo(sourceId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetFilteredAtSourceMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/filtered-at-source", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredAtSourceMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetFilteredAtSourceMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filtered At Source Metrics from Delivery Overview Get events that were filtered at Source.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetFilteredAtSourceMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetFilteredAtSourceMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetFilteredAtSourceMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/filtered-at-source", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilteredAtSourceMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetIngressFailedMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfo(sourceId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetIngressFailedMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/failed-on-ingest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngressFailedMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressFailedMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingress Failed Metrics from Delivery Overview Get events that failed on ingest.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;appVersion&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, &#x60;discard Reason&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetIngressFailedMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSourceFilterBy? filter = default(DeliveryOverviewSourceFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetIngressFailedMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetIngressFailedMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/failed-on-ingest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngressFailedMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview Get events that were successfully received by Segment.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public GetEgressFailedMetricsFromDeliveryOverview200Response GetIngressSuccessMetricsFromDeliveryOverview(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfo(sourceId, startTime, endTime, granularity, groupBy, filter, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview Get events that were successfully received by Segment.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfo(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetIngressSuccessMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/successfully-received", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngressSuccessMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview Get events that were successfully received by Segment.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEgressFailedMetricsFromDeliveryOverview200Response</returns>
        public async System.Threading.Tasks.Task<GetEgressFailedMetricsFromDeliveryOverview200Response> GetIngressSuccessMetricsFromDeliveryOverviewAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response> localVarResponse = await GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(sourceId, startTime, endTime, granularity, groupBy, filter, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ingress Success Metrics from Delivery Overview Get events that were successfully received by Segment.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId">The sourceId for the Workspace.  This parameter exists in beta.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp corresponding to the beginning of the requested time frame, inclusive.  This parameter exists in beta.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp corresponding to the end of the requested time frame, noninclusive.  This parameter exists in beta.</param>
        /// <param name="granularity">The size of each bucket in the requested window.  Based on the granularity chosen, there are restrictions on the time range you can query:  **Minute**: - Max time range: 4 hours - Oldest possible start time: 48 hours in the past  **Hour**: - Max Time range: 14 days - Oldest possible start time: 30 days in the past  **Day**: - Max time range: 30 days - Oldest possible start time: 30 days in the past  This parameter exists in beta.</param>
        /// <param name="groupBy">A comma-delimited list of strings representing one or more dimensions to group the result by.  Valid options are: &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="filter">An optional filter for &#x60;event Name&#x60;, &#x60;event Type&#x60;, and/or &#x60;app Version&#x60; that can be applied in addition to a &#x60;group By&#x60;.  This parameter exists in beta. (optional)</param>
        /// <param name="pagination">Optional params to specify the page cursor and count.  This parameter exists in beta. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEgressFailedMetricsFromDeliveryOverview200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEgressFailedMetricsFromDeliveryOverview200Response>> GetIngressSuccessMetricsFromDeliveryOverviewWithHttpInfoAsync(string sourceId, string startTime, string endTime, string granularity, List<string>? groupBy = default(List<string>?), DeliveryOverviewSuccessfullyReceivedFilterBy? filter = default(DeliveryOverviewSuccessfullyReceivedFilterBy?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }

            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling DeliveryOverviewApi->GetIngressSuccessMetricsFromDeliveryOverview");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1beta+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeliveryOverviewApi.GetIngressSuccessMetricsFromDeliveryOverview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEgressFailedMetricsFromDeliveryOverview200Response>("/delivery-overview/successfully-received", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngressSuccessMetricsFromDeliveryOverview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
