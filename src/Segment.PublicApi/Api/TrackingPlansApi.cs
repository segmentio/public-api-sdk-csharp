/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 59.1.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackingPlansApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Source to Tracking Plan
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddSourceToTrackingPlan200Response</returns>
        AddSourceToTrackingPlan200Response AddSourceToTrackingPlan(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0);

        /// <summary>
        /// Add Source to Tracking Plan
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddSourceToTrackingPlan200Response</returns>
        ApiResponse<AddSourceToTrackingPlan200Response> AddSourceToTrackingPlanWithHttpInfo(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Tracking Plan
        /// </summary>
        /// <remarks>
        /// Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTrackingPlan200Response</returns>
        CreateTrackingPlan200Response CreateTrackingPlan(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Tracking Plan
        /// </summary>
        /// <remarks>
        /// Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTrackingPlan200Response</returns>
        ApiResponse<CreateTrackingPlan200Response> CreateTrackingPlanWithHttpInfo(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0);
        /// <summary>
        /// Delete Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTrackingPlan200Response</returns>
        DeleteTrackingPlan200Response DeleteTrackingPlan(string trackingPlanId, int operationIndex = 0);

        /// <summary>
        /// Delete Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTrackingPlan200Response</returns>
        ApiResponse<DeleteTrackingPlan200Response> DeleteTrackingPlanWithHttpInfo(string trackingPlanId, int operationIndex = 0);
        /// <summary>
        /// Get Tracking Plan
        /// </summary>
        /// <remarks>
        /// Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTrackingPlan200Response</returns>
        GetTrackingPlan200Response GetTrackingPlan(string trackingPlanId, int operationIndex = 0);

        /// <summary>
        /// Get Tracking Plan
        /// </summary>
        /// <remarks>
        /// Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTrackingPlan200Response</returns>
        ApiResponse<GetTrackingPlan200Response> GetTrackingPlanWithHttpInfo(string trackingPlanId, int operationIndex = 0);
        /// <summary>
        /// List Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRulesFromTrackingPlan200Response</returns>
        ListRulesFromTrackingPlan200Response ListRulesFromTrackingPlan(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRulesFromTrackingPlan200Response</returns>
        ApiResponse<ListRulesFromTrackingPlan200Response> ListRulesFromTrackingPlanWithHttpInfo(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Sources from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSourcesFromTrackingPlan200Response</returns>
        ListSourcesFromTrackingPlan200Response ListSourcesFromTrackingPlan(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Sources from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSourcesFromTrackingPlan200Response</returns>
        ApiResponse<ListSourcesFromTrackingPlan200Response> ListSourcesFromTrackingPlanWithHttpInfo(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Tracking Plans
        /// </summary>
        /// <remarks>
        /// Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTrackingPlans200Response</returns>
        ListTrackingPlans200Response ListTrackingPlans(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Tracking Plans
        /// </summary>
        /// <remarks>
        /// Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTrackingPlans200Response</returns>
        ApiResponse<ListTrackingPlans200Response> ListTrackingPlansWithHttpInfo(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Remove Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveRulesFromTrackingPlan200Response</returns>
        RemoveRulesFromTrackingPlan200Response RemoveRulesFromTrackingPlan(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0);

        /// <summary>
        /// Remove Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveRulesFromTrackingPlan200Response</returns>
        ApiResponse<RemoveRulesFromTrackingPlan200Response> RemoveRulesFromTrackingPlanWithHttpInfo(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0);
        /// <summary>
        /// Remove Source from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSourceFromTrackingPlan200Response</returns>
        RemoveSourceFromTrackingPlan200Response RemoveSourceFromTrackingPlan(string trackingPlanId, string sourceId, int operationIndex = 0);

        /// <summary>
        /// Remove Source from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSourceFromTrackingPlan200Response</returns>
        ApiResponse<RemoveSourceFromTrackingPlan200Response> RemoveSourceFromTrackingPlanWithHttpInfo(string trackingPlanId, string sourceId, int operationIndex = 0);
        /// <summary>
        /// Replace Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceRulesInTrackingPlan200Response</returns>
        ReplaceRulesInTrackingPlan200Response ReplaceRulesInTrackingPlan(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0);

        /// <summary>
        /// Replace Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceRulesInTrackingPlan200Response</returns>
        ApiResponse<ReplaceRulesInTrackingPlan200Response> ReplaceRulesInTrackingPlanWithHttpInfo(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateRulesInTrackingPlan200Response</returns>
        UpdateRulesInTrackingPlan200Response UpdateRulesInTrackingPlan(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateRulesInTrackingPlan200Response</returns>
        ApiResponse<UpdateRulesInTrackingPlan200Response> UpdateRulesInTrackingPlanWithHttpInfo(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTrackingPlan200Response</returns>
        UpdateTrackingPlan200Response UpdateTrackingPlan(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTrackingPlan200Response</returns>
        ApiResponse<UpdateTrackingPlan200Response> UpdateTrackingPlanWithHttpInfo(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackingPlansApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Source to Tracking Plan
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddSourceToTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<AddSourceToTrackingPlan200Response> AddSourceToTrackingPlanAsync(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Source to Tracking Plan
        /// </summary>
        /// <remarks>
        /// Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddSourceToTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddSourceToTrackingPlan200Response>> AddSourceToTrackingPlanWithHttpInfoAsync(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Tracking Plan
        /// </summary>
        /// <remarks>
        /// Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<CreateTrackingPlan200Response> CreateTrackingPlanAsync(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Tracking Plan
        /// </summary>
        /// <remarks>
        /// Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTrackingPlan200Response>> CreateTrackingPlanWithHttpInfoAsync(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<DeleteTrackingPlan200Response> DeleteTrackingPlanAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTrackingPlan200Response>> DeleteTrackingPlanWithHttpInfoAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Tracking Plan
        /// </summary>
        /// <remarks>
        /// Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<GetTrackingPlan200Response> GetTrackingPlanAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Tracking Plan
        /// </summary>
        /// <remarks>
        /// Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTrackingPlan200Response>> GetTrackingPlanWithHttpInfoAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRulesFromTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<ListRulesFromTrackingPlan200Response> ListRulesFromTrackingPlanAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRulesFromTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRulesFromTrackingPlan200Response>> ListRulesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Sources from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSourcesFromTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<ListSourcesFromTrackingPlan200Response> ListSourcesFromTrackingPlanAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Sources from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSourcesFromTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSourcesFromTrackingPlan200Response>> ListSourcesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Tracking Plans
        /// </summary>
        /// <remarks>
        /// Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTrackingPlans200Response</returns>
        System.Threading.Tasks.Task<ListTrackingPlans200Response> ListTrackingPlansAsync(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Tracking Plans
        /// </summary>
        /// <remarks>
        /// Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTrackingPlans200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTrackingPlans200Response>> ListTrackingPlansWithHttpInfoAsync(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveRulesFromTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<RemoveRulesFromTrackingPlan200Response> RemoveRulesFromTrackingPlanAsync(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Rules from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveRulesFromTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveRulesFromTrackingPlan200Response>> RemoveRulesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Source from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSourceFromTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<RemoveSourceFromTrackingPlan200Response> RemoveSourceFromTrackingPlanAsync(string trackingPlanId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Source from Tracking Plan
        /// </summary>
        /// <remarks>
        /// Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSourceFromTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveSourceFromTrackingPlan200Response>> RemoveSourceFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceRulesInTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<ReplaceRulesInTrackingPlan200Response> ReplaceRulesInTrackingPlanAsync(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceRulesInTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceRulesInTrackingPlan200Response>> ReplaceRulesInTrackingPlanWithHttpInfoAsync(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRulesInTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<UpdateRulesInTrackingPlan200Response> UpdateRulesInTrackingPlanAsync(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Rules in Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRulesInTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateRulesInTrackingPlan200Response>> UpdateRulesInTrackingPlanWithHttpInfoAsync(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTrackingPlan200Response</returns>
        System.Threading.Tasks.Task<UpdateTrackingPlan200Response> UpdateTrackingPlanAsync(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Tracking Plan
        /// </summary>
        /// <remarks>
        /// Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTrackingPlan200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTrackingPlan200Response>> UpdateTrackingPlanWithHttpInfoAsync(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrackingPlansApi : ITrackingPlansApiSync, ITrackingPlansApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrackingPlansApi : ITrackingPlansApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackingPlansApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingPlansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrackingPlansApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingPlansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrackingPlansApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingPlansApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TrackingPlansApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Source to Tracking Plan Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddSourceToTrackingPlan200Response</returns>
        public AddSourceToTrackingPlan200Response AddSourceToTrackingPlan(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<AddSourceToTrackingPlan200Response> localVarResponse = AddSourceToTrackingPlanWithHttpInfo(trackingPlanId, addSourceToTrackingPlanV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Source to Tracking Plan Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddSourceToTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<AddSourceToTrackingPlan200Response> AddSourceToTrackingPlanWithHttpInfo(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->AddSourceToTrackingPlan");
            }

            // verify the required parameter 'addSourceToTrackingPlanV1Input' is set
            if (addSourceToTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addSourceToTrackingPlanV1Input' when calling TrackingPlansApi->AddSourceToTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = addSourceToTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.AddSourceToTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddSourceToTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSourceToTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Source to Tracking Plan Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddSourceToTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<AddSourceToTrackingPlan200Response> AddSourceToTrackingPlanAsync(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<AddSourceToTrackingPlan200Response> localVarResponse = await AddSourceToTrackingPlanWithHttpInfoAsync(trackingPlanId, addSourceToTrackingPlanV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Source to Tracking Plan Connects a Source to a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="addSourceToTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddSourceToTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<AddSourceToTrackingPlan200Response>> AddSourceToTrackingPlanWithHttpInfoAsync(string trackingPlanId, AddSourceToTrackingPlanV1Input addSourceToTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->AddSourceToTrackingPlan");
            }

            // verify the required parameter 'addSourceToTrackingPlanV1Input' is set
            if (addSourceToTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'addSourceToTrackingPlanV1Input' when calling TrackingPlansApi->AddSourceToTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = addSourceToTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.AddSourceToTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddSourceToTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddSourceToTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tracking Plan Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTrackingPlan200Response</returns>
        public CreateTrackingPlan200Response CreateTrackingPlan(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateTrackingPlan200Response> localVarResponse = CreateTrackingPlanWithHttpInfo(createTrackingPlanV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tracking Plan Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateTrackingPlan200Response> CreateTrackingPlanWithHttpInfo(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createTrackingPlanV1Input' is set
            if (createTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createTrackingPlanV1Input' when calling TrackingPlansApi->CreateTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.CreateTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTrackingPlan200Response>("/tracking-plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Tracking Plan Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<CreateTrackingPlan200Response> CreateTrackingPlanAsync(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateTrackingPlan200Response> localVarResponse = await CreateTrackingPlanWithHttpInfoAsync(createTrackingPlanV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Tracking Plan Creates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateTrackingPlan200Response>> CreateTrackingPlanWithHttpInfoAsync(CreateTrackingPlanV1Input createTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTrackingPlanV1Input' is set
            if (createTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createTrackingPlanV1Input' when calling TrackingPlansApi->CreateTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.CreateTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTrackingPlan200Response>("/tracking-plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tracking Plan Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTrackingPlan200Response</returns>
        public DeleteTrackingPlan200Response DeleteTrackingPlan(string trackingPlanId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteTrackingPlan200Response> localVarResponse = DeleteTrackingPlanWithHttpInfo(trackingPlanId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tracking Plan Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteTrackingPlan200Response> DeleteTrackingPlanWithHttpInfo(string trackingPlanId, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->DeleteTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter

            localVarRequestOptions.Operation = "TrackingPlansApi.DeleteTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tracking Plan Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<DeleteTrackingPlan200Response> DeleteTrackingPlanAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteTrackingPlan200Response> localVarResponse = await DeleteTrackingPlanWithHttpInfoAsync(trackingPlanId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tracking Plan Deletes a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteTrackingPlan200Response>> DeleteTrackingPlanWithHttpInfoAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->DeleteTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter

            localVarRequestOptions.Operation = "TrackingPlansApi.DeleteTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tracking Plan Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTrackingPlan200Response</returns>
        public GetTrackingPlan200Response GetTrackingPlan(string trackingPlanId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetTrackingPlan200Response> localVarResponse = GetTrackingPlanWithHttpInfo(trackingPlanId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tracking Plan Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetTrackingPlan200Response> GetTrackingPlanWithHttpInfo(string trackingPlanId, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->GetTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter

            localVarRequestOptions.Operation = "TrackingPlansApi.GetTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Tracking Plan Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<GetTrackingPlan200Response> GetTrackingPlanAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetTrackingPlan200Response> localVarResponse = await GetTrackingPlanWithHttpInfoAsync(trackingPlanId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Tracking Plan Returns a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetTrackingPlan200Response>> GetTrackingPlanWithHttpInfoAsync(string trackingPlanId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->GetTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter

            localVarRequestOptions.Operation = "TrackingPlansApi.GetTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rules from Tracking Plan Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRulesFromTrackingPlan200Response</returns>
        public ListRulesFromTrackingPlan200Response ListRulesFromTrackingPlan(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListRulesFromTrackingPlan200Response> localVarResponse = ListRulesFromTrackingPlanWithHttpInfo(trackingPlanId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rules from Tracking Plan Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRulesFromTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListRulesFromTrackingPlan200Response> ListRulesFromTrackingPlanWithHttpInfo(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ListRulesFromTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListRulesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRulesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRulesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Rules from Tracking Plan Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRulesFromTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<ListRulesFromTrackingPlan200Response> ListRulesFromTrackingPlanAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListRulesFromTrackingPlan200Response> localVarResponse = await ListRulesFromTrackingPlanWithHttpInfoAsync(trackingPlanId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Rules from Tracking Plan Lists Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   The rate limit for this endpoint is 200 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRulesFromTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListRulesFromTrackingPlan200Response>> ListRulesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ListRulesFromTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListRulesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRulesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRulesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Sources from Tracking Plan Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSourcesFromTrackingPlan200Response</returns>
        public ListSourcesFromTrackingPlan200Response ListSourcesFromTrackingPlan(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListSourcesFromTrackingPlan200Response> localVarResponse = ListSourcesFromTrackingPlanWithHttpInfo(trackingPlanId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Sources from Tracking Plan Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSourcesFromTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListSourcesFromTrackingPlan200Response> ListSourcesFromTrackingPlanWithHttpInfo(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ListSourcesFromTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListSourcesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSourcesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSourcesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Sources from Tracking Plan Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSourcesFromTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<ListSourcesFromTrackingPlan200Response> ListSourcesFromTrackingPlanAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListSourcesFromTrackingPlan200Response> localVarResponse = await ListSourcesFromTrackingPlanWithHttpInfoAsync(trackingPlanId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Sources from Tracking Plan Lists Sources connected to a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.   This endpoint requires the user to have at least the following permission(s):   * Source Read-only  * Tracking Plan Read-only
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSourcesFromTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListSourcesFromTrackingPlan200Response>> ListSourcesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ListSourcesFromTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListSourcesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSourcesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSourcesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tracking Plans Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTrackingPlans200Response</returns>
        public ListTrackingPlans200Response ListTrackingPlans(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListTrackingPlans200Response> localVarResponse = ListTrackingPlansWithHttpInfo(type, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tracking Plans Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTrackingPlans200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListTrackingPlans200Response> ListTrackingPlansWithHttpInfo(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListTrackingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTrackingPlans200Response>("/tracking-plans", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrackingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Tracking Plans Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTrackingPlans200Response</returns>
        public async System.Threading.Tasks.Task<ListTrackingPlans200Response> ListTrackingPlansAsync(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListTrackingPlans200Response> localVarResponse = await ListTrackingPlansWithHttpInfoAsync(type, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Tracking Plans Returns a list of Tracking Plans.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Requests Tracking Plans of a certain type. If omitted, lists all types.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTrackingPlans200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListTrackingPlans200Response>> ListTrackingPlansWithHttpInfoAsync(string? type = default(string?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TrackingPlansApi.ListTrackingPlans";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTrackingPlans200Response>("/tracking-plans", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTrackingPlans", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Rules from Tracking Plan Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveRulesFromTrackingPlan200Response</returns>
        public RemoveRulesFromTrackingPlan200Response RemoveRulesFromTrackingPlan(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveRulesFromTrackingPlan200Response> localVarResponse = RemoveRulesFromTrackingPlanWithHttpInfo(trackingPlanId, rules);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Rules from Tracking Plan Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveRulesFromTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveRulesFromTrackingPlan200Response> RemoveRulesFromTrackingPlanWithHttpInfo(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->RemoveRulesFromTrackingPlan");
            }

            // verify the required parameter 'rules' is set
            if (rules == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'rules' when calling TrackingPlansApi->RemoveRulesFromTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "rules", rules));

            localVarRequestOptions.Operation = "TrackingPlansApi.RemoveRulesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveRulesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRulesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Rules from Tracking Plan Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveRulesFromTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<RemoveRulesFromTrackingPlan200Response> RemoveRulesFromTrackingPlanAsync(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveRulesFromTrackingPlan200Response> localVarResponse = await RemoveRulesFromTrackingPlanWithHttpInfoAsync(trackingPlanId, rules, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Rules from Tracking Plan Deletes Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="rules">Rules to delete.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveRulesFromTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveRulesFromTrackingPlan200Response>> RemoveRulesFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, List<RemoveRuleV1> rules, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->RemoveRulesFromTrackingPlan");
            }

            // verify the required parameter 'rules' is set
            if (rules == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'rules' when calling TrackingPlansApi->RemoveRulesFromTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "rules", rules));

            localVarRequestOptions.Operation = "TrackingPlansApi.RemoveRulesFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveRulesFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveRulesFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveSourceFromTrackingPlan200Response</returns>
        public RemoveSourceFromTrackingPlan200Response RemoveSourceFromTrackingPlan(string trackingPlanId, string sourceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSourceFromTrackingPlan200Response> localVarResponse = RemoveSourceFromTrackingPlanWithHttpInfo(trackingPlanId, sourceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveSourceFromTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveSourceFromTrackingPlan200Response> RemoveSourceFromTrackingPlanWithHttpInfo(string trackingPlanId, string sourceId, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->RemoveSourceFromTrackingPlan");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling TrackingPlansApi->RemoveSourceFromTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));

            localVarRequestOptions.Operation = "TrackingPlansApi.RemoveSourceFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveSourceFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSourceFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveSourceFromTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<RemoveSourceFromTrackingPlan200Response> RemoveSourceFromTrackingPlanAsync(string trackingPlanId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveSourceFromTrackingPlan200Response> localVarResponse = await RemoveSourceFromTrackingPlanWithHttpInfoAsync(trackingPlanId, sourceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Source from Tracking Plan Disconnects a Source from a Tracking Plan.    • When called, this endpoint may generate the &#x60;Source Modified&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="sourceId">The id of the Source associated with the Tracking Plan.  Config API note: analogous to &#x60;sourceName&#x60;.  This parameter exists in v1.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveSourceFromTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveSourceFromTrackingPlan200Response>> RemoveSourceFromTrackingPlanWithHttpInfoAsync(string trackingPlanId, string sourceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->RemoveSourceFromTrackingPlan");
            }

            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling TrackingPlansApi->RemoveSourceFromTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "sourceId", sourceId));

            localVarRequestOptions.Operation = "TrackingPlansApi.RemoveSourceFromTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveSourceFromTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveSourceFromTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Rules in Tracking Plan Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceRulesInTrackingPlan200Response</returns>
        public ReplaceRulesInTrackingPlan200Response ReplaceRulesInTrackingPlan(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceRulesInTrackingPlan200Response> localVarResponse = ReplaceRulesInTrackingPlanWithHttpInfo(trackingPlanId, replaceRulesInTrackingPlanV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Rules in Tracking Plan Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceRulesInTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ReplaceRulesInTrackingPlan200Response> ReplaceRulesInTrackingPlanWithHttpInfo(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ReplaceRulesInTrackingPlan");
            }

            // verify the required parameter 'replaceRulesInTrackingPlanV1Input' is set
            if (replaceRulesInTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceRulesInTrackingPlanV1Input' when calling TrackingPlansApi->ReplaceRulesInTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = replaceRulesInTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.ReplaceRulesInTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReplaceRulesInTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceRulesInTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Rules in Tracking Plan Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceRulesInTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<ReplaceRulesInTrackingPlan200Response> ReplaceRulesInTrackingPlanAsync(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceRulesInTrackingPlan200Response> localVarResponse = await ReplaceRulesInTrackingPlanWithHttpInfoAsync(trackingPlanId, replaceRulesInTrackingPlanV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Rules in Tracking Plan Replaces Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="replaceRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceRulesInTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ReplaceRulesInTrackingPlan200Response>> ReplaceRulesInTrackingPlanWithHttpInfoAsync(string trackingPlanId, ReplaceRulesInTrackingPlanV1Input replaceRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->ReplaceRulesInTrackingPlan");
            }

            // verify the required parameter 'replaceRulesInTrackingPlanV1Input' is set
            if (replaceRulesInTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceRulesInTrackingPlanV1Input' when calling TrackingPlansApi->ReplaceRulesInTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = replaceRulesInTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.ReplaceRulesInTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplaceRulesInTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceRulesInTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Rules in Tracking Plan Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateRulesInTrackingPlan200Response</returns>
        public UpdateRulesInTrackingPlan200Response UpdateRulesInTrackingPlan(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateRulesInTrackingPlan200Response> localVarResponse = UpdateRulesInTrackingPlanWithHttpInfo(trackingPlanId, updateRulesInTrackingPlanV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Rules in Tracking Plan Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateRulesInTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateRulesInTrackingPlan200Response> UpdateRulesInTrackingPlanWithHttpInfo(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->UpdateRulesInTrackingPlan");
            }

            // verify the required parameter 'updateRulesInTrackingPlanV1Input' is set
            if (updateRulesInTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateRulesInTrackingPlanV1Input' when calling TrackingPlansApi->UpdateRulesInTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = updateRulesInTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.UpdateRulesInTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateRulesInTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRulesInTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Rules in Tracking Plan Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateRulesInTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<UpdateRulesInTrackingPlan200Response> UpdateRulesInTrackingPlanAsync(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateRulesInTrackingPlan200Response> localVarResponse = await UpdateRulesInTrackingPlanWithHttpInfoAsync(trackingPlanId, updateRulesInTrackingPlanV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Rules in Tracking Plan Updates Tracking Plan rules.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateRulesInTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateRulesInTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateRulesInTrackingPlan200Response>> UpdateRulesInTrackingPlanWithHttpInfoAsync(string trackingPlanId, UpdateRulesInTrackingPlanV1Input updateRulesInTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->UpdateRulesInTrackingPlan");
            }

            // verify the required parameter 'updateRulesInTrackingPlanV1Input' is set
            if (updateRulesInTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateRulesInTrackingPlanV1Input' when calling TrackingPlansApi->UpdateRulesInTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = updateRulesInTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.UpdateRulesInTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateRulesInTrackingPlan200Response>("/tracking-plans/{trackingPlanId}/rules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRulesInTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tracking Plan Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTrackingPlan200Response</returns>
        public UpdateTrackingPlan200Response UpdateTrackingPlan(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateTrackingPlan200Response> localVarResponse = UpdateTrackingPlanWithHttpInfo(trackingPlanId, updateTrackingPlanV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tracking Plan Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTrackingPlan200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateTrackingPlan200Response> UpdateTrackingPlanWithHttpInfo(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->UpdateTrackingPlan");
            }

            // verify the required parameter 'updateTrackingPlanV1Input' is set
            if (updateTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateTrackingPlanV1Input' when calling TrackingPlansApi->UpdateTrackingPlan");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = updateTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.UpdateTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Tracking Plan Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTrackingPlan200Response</returns>
        public async System.Threading.Tasks.Task<UpdateTrackingPlan200Response> UpdateTrackingPlanAsync(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateTrackingPlan200Response> localVarResponse = await UpdateTrackingPlanWithHttpInfoAsync(trackingPlanId, updateTrackingPlanV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Tracking Plan Updates a Tracking Plan.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="trackingPlanId"></param>
        /// <param name="updateTrackingPlanV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTrackingPlan200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateTrackingPlan200Response>> UpdateTrackingPlanWithHttpInfoAsync(string trackingPlanId, UpdateTrackingPlanV1Input updateTrackingPlanV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'trackingPlanId' is set
            if (trackingPlanId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'trackingPlanId' when calling TrackingPlansApi->UpdateTrackingPlan");
            }

            // verify the required parameter 'updateTrackingPlanV1Input' is set
            if (updateTrackingPlanV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateTrackingPlanV1Input' when calling TrackingPlansApi->UpdateTrackingPlan");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("trackingPlanId", Segment.PublicApi.Client.ClientUtils.ParameterToString(trackingPlanId)); // path parameter
            localVarRequestOptions.Data = updateTrackingPlanV1Input;

            localVarRequestOptions.Operation = "TrackingPlansApi.UpdateTrackingPlan";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateTrackingPlan200Response>("/tracking-plans/{trackingPlanId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTrackingPlan", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
