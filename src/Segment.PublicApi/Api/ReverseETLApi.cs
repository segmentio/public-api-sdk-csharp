/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.2.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReverseETLApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Reverse ETL Sync for Model
        /// </summary>
        /// <remarks>
        /// Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelReverseETLSyncForModel200Response</returns>
        CancelReverseETLSyncForModel200Response CancelReverseETLSyncForModel(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0);

        /// <summary>
        /// Cancel Reverse ETL Sync for Model
        /// </summary>
        /// <remarks>
        /// Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelReverseETLSyncForModel200Response</returns>
        ApiResponse<CancelReverseETLSyncForModel200Response> CancelReverseETLSyncForModelWithHttpInfo(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0);
        /// <summary>
        /// Create Reverse ETL Manual Sync
        /// </summary>
        /// <remarks>
        /// Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReverseETLManualSync200Response</returns>
        CreateReverseETLManualSync200Response CreateReverseETLManualSync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0);

        /// <summary>
        /// Create Reverse ETL Manual Sync
        /// </summary>
        /// <remarks>
        /// Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReverseETLManualSync200Response</returns>
        ApiResponse<CreateReverseETLManualSync200Response> CreateReverseETLManualSyncWithHttpInfo(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0);
        /// <summary>
        /// Create Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReverseEtlModel201Response</returns>
        CreateReverseEtlModel201Response CreateReverseEtlModel(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0);

        /// <summary>
        /// Create Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReverseEtlModel201Response</returns>
        ApiResponse<CreateReverseEtlModel201Response> CreateReverseEtlModelWithHttpInfo(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0);
        /// <summary>
        /// Delete Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteReverseEtlModel200Response</returns>
        DeleteReverseEtlModel200Response DeleteReverseEtlModel(string modelId, int operationIndex = 0);

        /// <summary>
        /// Delete Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteReverseEtlModel200Response</returns>
        ApiResponse<DeleteReverseEtlModel200Response> DeleteReverseEtlModelWithHttpInfo(string modelId, int operationIndex = 0);
        /// <summary>
        /// Get Reverse ETL Sync Status
        /// </summary>
        /// <remarks>
        /// Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReverseETLSyncStatus200Response</returns>
        GetReverseETLSyncStatus200Response GetReverseETLSyncStatus(string modelId, string syncId, int operationIndex = 0);

        /// <summary>
        /// Get Reverse ETL Sync Status
        /// </summary>
        /// <remarks>
        /// Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReverseETLSyncStatus200Response</returns>
        ApiResponse<GetReverseETLSyncStatus200Response> GetReverseETLSyncStatusWithHttpInfo(string modelId, string syncId, int operationIndex = 0);
        /// <summary>
        /// Get Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Returns a Reverse ETL Model by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReverseEtlModel200Response</returns>
        GetReverseEtlModel200Response GetReverseEtlModel(string modelId, int operationIndex = 0);

        /// <summary>
        /// Get Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Returns a Reverse ETL Model by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReverseEtlModel200Response</returns>
        ApiResponse<GetReverseEtlModel200Response> GetReverseEtlModelWithHttpInfo(string modelId, int operationIndex = 0);
        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id
        /// </summary>
        /// <remarks>
        /// Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response ListReverseETLSyncStatusesFromModelAndSubscriptionId(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0);

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id
        /// </summary>
        /// <remarks>
        /// Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfo(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0);
        /// <summary>
        /// List Reverse Etl Models
        /// </summary>
        /// <remarks>
        /// Returns a list of Reverse ETL Models.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReverseEtlModels200Response</returns>
        ListReverseEtlModels200Response ListReverseEtlModels(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Reverse Etl Models
        /// </summary>
        /// <remarks>
        /// Returns a list of Reverse ETL Models.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReverseEtlModels200Response</returns>
        ApiResponse<ListReverseEtlModels200Response> ListReverseEtlModelsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Update Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateReverseEtlModel200Response</returns>
        UpdateReverseEtlModel200Response UpdateReverseEtlModel(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0);

        /// <summary>
        /// Update Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateReverseEtlModel200Response</returns>
        ApiResponse<UpdateReverseEtlModel200Response> UpdateReverseEtlModelWithHttpInfo(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReverseETLApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Reverse ETL Sync for Model
        /// </summary>
        /// <remarks>
        /// Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelReverseETLSyncForModel200Response</returns>
        System.Threading.Tasks.Task<CancelReverseETLSyncForModel200Response> CancelReverseETLSyncForModelAsync(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel Reverse ETL Sync for Model
        /// </summary>
        /// <remarks>
        /// Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelReverseETLSyncForModel200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelReverseETLSyncForModel200Response>> CancelReverseETLSyncForModelWithHttpInfoAsync(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Reverse ETL Manual Sync
        /// </summary>
        /// <remarks>
        /// Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReverseETLManualSync200Response</returns>
        System.Threading.Tasks.Task<CreateReverseETLManualSync200Response> CreateReverseETLManualSyncAsync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Reverse ETL Manual Sync
        /// </summary>
        /// <remarks>
        /// Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReverseETLManualSync200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReverseETLManualSync200Response>> CreateReverseETLManualSyncWithHttpInfoAsync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReverseEtlModel201Response</returns>
        System.Threading.Tasks.Task<CreateReverseEtlModel201Response> CreateReverseEtlModelAsync(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReverseEtlModel201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateReverseEtlModel201Response>> CreateReverseEtlModelWithHttpInfoAsync(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteReverseEtlModel200Response</returns>
        System.Threading.Tasks.Task<DeleteReverseEtlModel200Response> DeleteReverseEtlModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteReverseEtlModel200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteReverseEtlModel200Response>> DeleteReverseEtlModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Reverse ETL Sync Status
        /// </summary>
        /// <remarks>
        /// Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReverseETLSyncStatus200Response</returns>
        System.Threading.Tasks.Task<GetReverseETLSyncStatus200Response> GetReverseETLSyncStatusAsync(string modelId, string syncId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Reverse ETL Sync Status
        /// </summary>
        /// <remarks>
        /// Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReverseETLSyncStatus200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReverseETLSyncStatus200Response>> GetReverseETLSyncStatusWithHttpInfoAsync(string modelId, string syncId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Returns a Reverse ETL Model by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReverseEtlModel200Response</returns>
        System.Threading.Tasks.Task<GetReverseEtlModel200Response> GetReverseEtlModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Returns a Reverse ETL Model by its id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReverseEtlModel200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetReverseEtlModel200Response>> GetReverseEtlModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id
        /// </summary>
        /// <remarks>
        /// Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        System.Threading.Tasks.Task<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> ListReverseETLSyncStatusesFromModelAndSubscriptionIdAsync(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id
        /// </summary>
        /// <remarks>
        /// Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response>> ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfoAsync(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Reverse Etl Models
        /// </summary>
        /// <remarks>
        /// Returns a list of Reverse ETL Models.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReverseEtlModels200Response</returns>
        System.Threading.Tasks.Task<ListReverseEtlModels200Response> ListReverseEtlModelsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Reverse Etl Models
        /// </summary>
        /// <remarks>
        /// Returns a list of Reverse ETL Models.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReverseEtlModels200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListReverseEtlModels200Response>> ListReverseEtlModelsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateReverseEtlModel200Response</returns>
        System.Threading.Tasks.Task<UpdateReverseEtlModel200Response> UpdateReverseEtlModelAsync(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Reverse Etl Model
        /// </summary>
        /// <remarks>
        /// Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateReverseEtlModel200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateReverseEtlModel200Response>> UpdateReverseEtlModelWithHttpInfoAsync(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReverseETLApi : IReverseETLApiSync, IReverseETLApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReverseETLApi : IReverseETLApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseETLApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReverseETLApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseETLApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReverseETLApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseETLApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReverseETLApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReverseETLApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReverseETLApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Cancel Reverse ETL Sync for Model Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelReverseETLSyncForModel200Response</returns>
        public CancelReverseETLSyncForModel200Response CancelReverseETLSyncForModel(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CancelReverseETLSyncForModel200Response> localVarResponse = CancelReverseETLSyncForModelWithHttpInfo(modelId, syncId, cancelReverseETLSyncForModelInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Reverse ETL Sync for Model Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelReverseETLSyncForModel200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CancelReverseETLSyncForModel200Response> CancelReverseETLSyncForModelWithHttpInfo(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }

            // verify the required parameter 'syncId' is set
            if (syncId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'syncId' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }

            // verify the required parameter 'cancelReverseETLSyncForModelInput' is set
            if (cancelReverseETLSyncForModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'cancelReverseETLSyncForModelInput' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("syncId", Segment.PublicApi.Client.ClientUtils.ParameterToString(syncId)); // path parameter
            localVarRequestOptions.Data = cancelReverseETLSyncForModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CancelReverseETLSyncForModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CancelReverseETLSyncForModel200Response>("/reverse-etl-models/{modelId}/syncs/{syncId}/cancel", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReverseETLSyncForModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel Reverse ETL Sync for Model Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelReverseETLSyncForModel200Response</returns>
        public async System.Threading.Tasks.Task<CancelReverseETLSyncForModel200Response> CancelReverseETLSyncForModelAsync(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CancelReverseETLSyncForModel200Response> localVarResponse = await CancelReverseETLSyncForModelWithHttpInfoAsync(modelId, syncId, cancelReverseETLSyncForModelInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Reverse ETL Sync for Model Cancels a sync for a Reverse ETL Connection. It might take a few seconds to completely cancel the sync.   Will return an error if the sync is already completed or cancelled.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="cancelReverseETLSyncForModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelReverseETLSyncForModel200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CancelReverseETLSyncForModel200Response>> CancelReverseETLSyncForModelWithHttpInfoAsync(string modelId, string syncId, CancelReverseETLSyncForModelInput cancelReverseETLSyncForModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }

            // verify the required parameter 'syncId' is set
            if (syncId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'syncId' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }

            // verify the required parameter 'cancelReverseETLSyncForModelInput' is set
            if (cancelReverseETLSyncForModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'cancelReverseETLSyncForModelInput' when calling ReverseETLApi->CancelReverseETLSyncForModel");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("syncId", Segment.PublicApi.Client.ClientUtils.ParameterToString(syncId)); // path parameter
            localVarRequestOptions.Data = cancelReverseETLSyncForModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CancelReverseETLSyncForModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CancelReverseETLSyncForModel200Response>("/reverse-etl-models/{modelId}/syncs/{syncId}/cancel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelReverseETLSyncForModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reverse ETL Manual Sync Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReverseETLManualSync200Response</returns>
        public CreateReverseETLManualSync200Response CreateReverseETLManualSync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateReverseETLManualSync200Response> localVarResponse = CreateReverseETLManualSyncWithHttpInfo(createReverseETLManualSyncInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reverse ETL Manual Sync Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReverseETLManualSync200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateReverseETLManualSync200Response> CreateReverseETLManualSyncWithHttpInfo(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0)
        {
            // verify the required parameter 'createReverseETLManualSyncInput' is set
            if (createReverseETLManualSyncInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createReverseETLManualSyncInput' when calling ReverseETLApi->CreateReverseETLManualSync");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReverseETLManualSyncInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CreateReverseETLManualSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateReverseETLManualSync200Response>("/reverse-etl-syncs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReverseETLManualSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reverse ETL Manual Sync Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReverseETLManualSync200Response</returns>
        public async System.Threading.Tasks.Task<CreateReverseETLManualSync200Response> CreateReverseETLManualSyncAsync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateReverseETLManualSync200Response> localVarResponse = await CreateReverseETLManualSyncWithHttpInfoAsync(createReverseETLManualSyncInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reverse ETL Manual Sync Triggers a manual sync for a Reverse ETL Connection.   In the request body, the &#x60;subscription id&#x60; is the id that follows after &#x60;/mappings/&#x60; portion in the URL of the sync.   For example, the &#x60;subscription id&#x60; would be &#x60;2&#x60; for this sync: https://app.Segment.com/example-workspace/reverse-etl/destinations/example-destination/sources/example-source/instances/1/mappings/2/source-id/3/model-id/4/sync-details   The rate limit for this endpoint is 20 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseETLManualSyncInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReverseETLManualSync200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateReverseETLManualSync200Response>> CreateReverseETLManualSyncWithHttpInfoAsync(CreateReverseETLManualSyncInput createReverseETLManualSyncInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createReverseETLManualSyncInput' is set
            if (createReverseETLManualSyncInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createReverseETLManualSyncInput' when calling ReverseETLApi->CreateReverseETLManualSync");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReverseETLManualSyncInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CreateReverseETLManualSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateReverseETLManualSync200Response>("/reverse-etl-syncs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReverseETLManualSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reverse Etl Model Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateReverseEtlModel201Response</returns>
        public CreateReverseEtlModel201Response CreateReverseEtlModel(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateReverseEtlModel201Response> localVarResponse = CreateReverseEtlModelWithHttpInfo(createReverseEtlModelInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reverse Etl Model Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateReverseEtlModel201Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateReverseEtlModel201Response> CreateReverseEtlModelWithHttpInfo(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0)
        {
            // verify the required parameter 'createReverseEtlModelInput' is set
            if (createReverseEtlModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createReverseEtlModelInput' when calling ReverseETLApi->CreateReverseEtlModel");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReverseEtlModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CreateReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateReverseEtlModel201Response>("/reverse-etl-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Reverse Etl Model Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateReverseEtlModel201Response</returns>
        public async System.Threading.Tasks.Task<CreateReverseEtlModel201Response> CreateReverseEtlModelAsync(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateReverseEtlModel201Response> localVarResponse = await CreateReverseEtlModelWithHttpInfoAsync(createReverseEtlModelInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Reverse Etl Model Creates a new Reverse ETL Model.          • When called, this endpoint may generate the &#x60;Model Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateReverseEtlModel201Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateReverseEtlModel201Response>> CreateReverseEtlModelWithHttpInfoAsync(CreateReverseEtlModelInput createReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createReverseEtlModelInput' is set
            if (createReverseEtlModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createReverseEtlModelInput' when calling ReverseETLApi->CreateReverseEtlModel");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createReverseEtlModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.CreateReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateReverseEtlModel201Response>("/reverse-etl-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reverse Etl Model Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteReverseEtlModel200Response</returns>
        public DeleteReverseEtlModel200Response DeleteReverseEtlModel(string modelId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteReverseEtlModel200Response> localVarResponse = DeleteReverseEtlModelWithHttpInfo(modelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Reverse Etl Model Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteReverseEtlModel200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteReverseEtlModel200Response> DeleteReverseEtlModelWithHttpInfo(string modelId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->DeleteReverseEtlModel");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.DeleteReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Reverse Etl Model Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteReverseEtlModel200Response</returns>
        public async System.Threading.Tasks.Task<DeleteReverseEtlModel200Response> DeleteReverseEtlModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteReverseEtlModel200Response> localVarResponse = await DeleteReverseEtlModelWithHttpInfoAsync(modelId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Reverse Etl Model Deletes an existing Model.          • When called, this endpoint may generate the &#x60;Model Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteReverseEtlModel200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteReverseEtlModel200Response>> DeleteReverseEtlModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->DeleteReverseEtlModel");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.DeleteReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reverse ETL Sync Status Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReverseETLSyncStatus200Response</returns>
        public GetReverseETLSyncStatus200Response GetReverseETLSyncStatus(string modelId, string syncId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetReverseETLSyncStatus200Response> localVarResponse = GetReverseETLSyncStatusWithHttpInfo(modelId, syncId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reverse ETL Sync Status Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReverseETLSyncStatus200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetReverseETLSyncStatus200Response> GetReverseETLSyncStatusWithHttpInfo(string modelId, string syncId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->GetReverseETLSyncStatus");
            }

            // verify the required parameter 'syncId' is set
            if (syncId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'syncId' when calling ReverseETLApi->GetReverseETLSyncStatus");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("syncId", Segment.PublicApi.Client.ClientUtils.ParameterToString(syncId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.GetReverseETLSyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetReverseETLSyncStatus200Response>("/reverse-etl-models/{modelId}/syncs/{syncId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReverseETLSyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reverse ETL Sync Status Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReverseETLSyncStatus200Response</returns>
        public async System.Threading.Tasks.Task<GetReverseETLSyncStatus200Response> GetReverseETLSyncStatusAsync(string modelId, string syncId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetReverseETLSyncStatus200Response> localVarResponse = await GetReverseETLSyncStatusWithHttpInfoAsync(modelId, syncId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reverse ETL Sync Status Get the sync status for a Reverse ETL sync.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.   The rate limit for this endpoint is 250 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="syncId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReverseETLSyncStatus200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetReverseETLSyncStatus200Response>> GetReverseETLSyncStatusWithHttpInfoAsync(string modelId, string syncId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->GetReverseETLSyncStatus");
            }

            // verify the required parameter 'syncId' is set
            if (syncId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'syncId' when calling ReverseETLApi->GetReverseETLSyncStatus");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("syncId", Segment.PublicApi.Client.ClientUtils.ParameterToString(syncId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.GetReverseETLSyncStatus";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetReverseETLSyncStatus200Response>("/reverse-etl-models/{modelId}/syncs/{syncId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReverseETLSyncStatus", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reverse Etl Model Returns a Reverse ETL Model by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetReverseEtlModel200Response</returns>
        public GetReverseEtlModel200Response GetReverseEtlModel(string modelId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetReverseEtlModel200Response> localVarResponse = GetReverseEtlModelWithHttpInfo(modelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reverse Etl Model Returns a Reverse ETL Model by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetReverseEtlModel200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetReverseEtlModel200Response> GetReverseEtlModelWithHttpInfo(string modelId, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->GetReverseEtlModel");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.GetReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Reverse Etl Model Returns a Reverse ETL Model by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetReverseEtlModel200Response</returns>
        public async System.Threading.Tasks.Task<GetReverseEtlModel200Response> GetReverseEtlModelAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetReverseEtlModel200Response> localVarResponse = await GetReverseEtlModelWithHttpInfoAsync(modelId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Reverse Etl Model Returns a Reverse ETL Model by its id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetReverseEtlModel200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetReverseEtlModel200Response>> GetReverseEtlModelWithHttpInfoAsync(string modelId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->GetReverseEtlModel");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter

            localVarRequestOptions.Operation = "ReverseETLApi.GetReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        public ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response ListReverseETLSyncStatusesFromModelAndSubscriptionId(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> localVarResponse = ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfo(modelId, subscriptionId, count, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfo(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->ListReverseETLSyncStatusesFromModelAndSubscriptionId");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling ReverseETLApi->ListReverseETLSyncStatusesFromModelAndSubscriptionId");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ReverseETLApi.ListReverseETLSyncStatusesFromModelAndSubscriptionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response>("/reverse-etl-models/{modelId}/subscriptionId/{subscriptionId}/syncs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReverseETLSyncStatusesFromModelAndSubscriptionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response</returns>
        public async System.Threading.Tasks.Task<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> ListReverseETLSyncStatusesFromModelAndSubscriptionIdAsync(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response> localVarResponse = await ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfoAsync(modelId, subscriptionId, count, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reverse ETL Sync Statuses from Model And Subscription Id Get the sync statuses for a Reverse ETL mapping subscription.  The sync status includes all detailed information about the sync - sync status, duration, details about the extract and load phase if applicable, etc.  The default page count is 10, and then the next page can be fetched by passing the &#x60;cursor&#x60; query parameter.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="count">The number of items to retrieve in a page, between 1 and 100. Default is 10  This parameter exists in alpha. (optional)</param>
        /// <param name="cursor">The page to request. Acceptable values to use are from the &#x60;current&#x60;, &#x60;next&#x60;, and &#x60;previous&#x60; keys.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response>> ListReverseETLSyncStatusesFromModelAndSubscriptionIdWithHttpInfoAsync(string modelId, string subscriptionId, decimal? count = default(decimal?), string? cursor = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->ListReverseETLSyncStatusesFromModelAndSubscriptionId");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling ReverseETLApi->ListReverseETLSyncStatusesFromModelAndSubscriptionId");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscriptionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            if (count != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "count", count));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "cursor", cursor));
            }

            localVarRequestOptions.Operation = "ReverseETLApi.ListReverseETLSyncStatusesFromModelAndSubscriptionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListReverseETLSyncStatusesFromModelAndSubscriptionId200Response>("/reverse-etl-models/{modelId}/subscriptionId/{subscriptionId}/syncs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReverseETLSyncStatusesFromModelAndSubscriptionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reverse Etl Models Returns a list of Reverse ETL Models.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListReverseEtlModels200Response</returns>
        public ListReverseEtlModels200Response ListReverseEtlModels(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListReverseEtlModels200Response> localVarResponse = ListReverseEtlModelsWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reverse Etl Models Returns a list of Reverse ETL Models.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListReverseEtlModels200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListReverseEtlModels200Response> ListReverseEtlModelsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "ReverseETLApi.ListReverseEtlModels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListReverseEtlModels200Response>("/reverse-etl-models", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReverseEtlModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Reverse Etl Models Returns a list of Reverse ETL Models.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListReverseEtlModels200Response</returns>
        public async System.Threading.Tasks.Task<ListReverseEtlModels200Response> ListReverseEtlModelsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListReverseEtlModels200Response> localVarResponse = await ListReverseEtlModelsWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Reverse Etl Models Returns a list of Reverse ETL Models.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Defines the pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListReverseEtlModels200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListReverseEtlModels200Response>> ListReverseEtlModelsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "ReverseETLApi.ListReverseEtlModels";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListReverseEtlModels200Response>("/reverse-etl-models", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListReverseEtlModels", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reverse Etl Model Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateReverseEtlModel200Response</returns>
        public UpdateReverseEtlModel200Response UpdateReverseEtlModel(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateReverseEtlModel200Response> localVarResponse = UpdateReverseEtlModelWithHttpInfo(modelId, updateReverseEtlModelInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reverse Etl Model Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateReverseEtlModel200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateReverseEtlModel200Response> UpdateReverseEtlModelWithHttpInfo(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0)
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->UpdateReverseEtlModel");
            }

            // verify the required parameter 'updateReverseEtlModelInput' is set
            if (updateReverseEtlModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateReverseEtlModelInput' when calling ReverseETLApi->UpdateReverseEtlModel");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.Data = updateReverseEtlModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.UpdateReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Reverse Etl Model Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateReverseEtlModel200Response</returns>
        public async System.Threading.Tasks.Task<UpdateReverseEtlModel200Response> UpdateReverseEtlModelAsync(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateReverseEtlModel200Response> localVarResponse = await UpdateReverseEtlModelWithHttpInfoAsync(modelId, updateReverseEtlModelInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Reverse Etl Model Updates an existing Reverse ETL Model.          • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Model Settings Saved * Model State Change Toggled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="modelId"></param>
        /// <param name="updateReverseEtlModelInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateReverseEtlModel200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateReverseEtlModel200Response>> UpdateReverseEtlModelWithHttpInfoAsync(string modelId, UpdateReverseEtlModelInput updateReverseEtlModelInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'modelId' is set
            if (modelId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'modelId' when calling ReverseETLApi->UpdateReverseEtlModel");
            }

            // verify the required parameter 'updateReverseEtlModelInput' is set
            if (updateReverseEtlModelInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateReverseEtlModelInput' when calling ReverseETLApi->UpdateReverseEtlModel");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("modelId", Segment.PublicApi.Client.ClientUtils.ParameterToString(modelId)); // path parameter
            localVarRequestOptions.Data = updateReverseEtlModelInput;

            localVarRequestOptions.Operation = "ReverseETLApi.UpdateReverseEtlModel";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateReverseEtlModel200Response>("/reverse-etl-models/{modelId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateReverseEtlModel", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
