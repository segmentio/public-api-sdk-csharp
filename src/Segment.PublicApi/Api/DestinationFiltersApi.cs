/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 60.0.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationFiltersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Filter for Destination
        /// </summary>
        /// <remarks>
        /// Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFilterForDestination200Response</returns>
        CreateFilterForDestination200Response CreateFilterForDestination(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Filter for Destination
        /// </summary>
        /// <remarks>
        /// Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFilterForDestination200Response</returns>
        ApiResponse<CreateFilterForDestination200Response> CreateFilterForDestinationWithHttpInfo(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0);
        /// <summary>
        /// Get Filter in Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination filter by id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFilterInDestination200Response</returns>
        GetFilterInDestination200Response GetFilterInDestination(string destinationId, string filterId, int operationIndex = 0);

        /// <summary>
        /// Get Filter in Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination filter by id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFilterInDestination200Response</returns>
        ApiResponse<GetFilterInDestination200Response> GetFilterInDestinationWithHttpInfo(string destinationId, string filterId, int operationIndex = 0);
        /// <summary>
        /// List Filters from Destination
        /// </summary>
        /// <remarks>
        /// Lists filters for a Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFiltersFromDestination200Response</returns>
        ListFiltersFromDestination200Response ListFiltersFromDestination(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Filters from Destination
        /// </summary>
        /// <remarks>
        /// Lists filters for a Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFiltersFromDestination200Response</returns>
        ApiResponse<ListFiltersFromDestination200Response> ListFiltersFromDestinationWithHttpInfo(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Preview Destination Filter
        /// </summary>
        /// <remarks>
        /// Simulates the application of a Destination filter to a provided JSON payload.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreviewDestinationFilter200Response</returns>
        PreviewDestinationFilter200Response PreviewDestinationFilter(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0);

        /// <summary>
        /// Preview Destination Filter
        /// </summary>
        /// <remarks>
        /// Simulates the application of a Destination filter to a provided JSON payload.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreviewDestinationFilter200Response</returns>
        ApiResponse<PreviewDestinationFilter200Response> PreviewDestinationFilterWithHttpInfo(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0);
        /// <summary>
        /// Remove Filter from Destination
        /// </summary>
        /// <remarks>
        /// Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveFilterFromDestination200Response</returns>
        RemoveFilterFromDestination200Response RemoveFilterFromDestination(string destinationId, string filterId, int operationIndex = 0);

        /// <summary>
        /// Remove Filter from Destination
        /// </summary>
        /// <remarks>
        /// Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveFilterFromDestination200Response</returns>
        ApiResponse<RemoveFilterFromDestination200Response> RemoveFilterFromDestinationWithHttpInfo(string destinationId, string filterId, int operationIndex = 0);
        /// <summary>
        /// Update Filter for Destination
        /// </summary>
        /// <remarks>
        /// Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateFilterForDestination200Response</returns>
        UpdateFilterForDestination200Response UpdateFilterForDestination(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Filter for Destination
        /// </summary>
        /// <remarks>
        /// Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateFilterForDestination200Response</returns>
        ApiResponse<UpdateFilterForDestination200Response> UpdateFilterForDestinationWithHttpInfo(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationFiltersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Filter for Destination
        /// </summary>
        /// <remarks>
        /// Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFilterForDestination200Response</returns>
        System.Threading.Tasks.Task<CreateFilterForDestination200Response> CreateFilterForDestinationAsync(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Filter for Destination
        /// </summary>
        /// <remarks>
        /// Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFilterForDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFilterForDestination200Response>> CreateFilterForDestinationWithHttpInfoAsync(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Filter in Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination filter by id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilterInDestination200Response</returns>
        System.Threading.Tasks.Task<GetFilterInDestination200Response> GetFilterInDestinationAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Filter in Destination
        /// </summary>
        /// <remarks>
        /// Gets a Destination filter by id.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFilterInDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFilterInDestination200Response>> GetFilterInDestinationWithHttpInfoAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Filters from Destination
        /// </summary>
        /// <remarks>
        /// Lists filters for a Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiltersFromDestination200Response</returns>
        System.Threading.Tasks.Task<ListFiltersFromDestination200Response> ListFiltersFromDestinationAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Filters from Destination
        /// </summary>
        /// <remarks>
        /// Lists filters for a Destination.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiltersFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFiltersFromDestination200Response>> ListFiltersFromDestinationWithHttpInfoAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Preview Destination Filter
        /// </summary>
        /// <remarks>
        /// Simulates the application of a Destination filter to a provided JSON payload.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreviewDestinationFilter200Response</returns>
        System.Threading.Tasks.Task<PreviewDestinationFilter200Response> PreviewDestinationFilterAsync(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Preview Destination Filter
        /// </summary>
        /// <remarks>
        /// Simulates the application of a Destination filter to a provided JSON payload.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreviewDestinationFilter200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PreviewDestinationFilter200Response>> PreviewDestinationFilterWithHttpInfoAsync(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Filter from Destination
        /// </summary>
        /// <remarks>
        /// Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveFilterFromDestination200Response</returns>
        System.Threading.Tasks.Task<RemoveFilterFromDestination200Response> RemoveFilterFromDestinationAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Filter from Destination
        /// </summary>
        /// <remarks>
        /// Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveFilterFromDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveFilterFromDestination200Response>> RemoveFilterFromDestinationWithHttpInfoAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Filter for Destination
        /// </summary>
        /// <remarks>
        /// Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateFilterForDestination200Response</returns>
        System.Threading.Tasks.Task<UpdateFilterForDestination200Response> UpdateFilterForDestinationAsync(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Filter for Destination
        /// </summary>
        /// <remarks>
        /// Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateFilterForDestination200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFilterForDestination200Response>> UpdateFilterForDestinationWithHttpInfoAsync(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDestinationFiltersApi : IDestinationFiltersApiSync, IDestinationFiltersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DestinationFiltersApi : IDestinationFiltersApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationFiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DestinationFiltersApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationFiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DestinationFiltersApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationFiltersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DestinationFiltersApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DestinationFiltersApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DestinationFiltersApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Filter for Destination Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFilterForDestination200Response</returns>
        public CreateFilterForDestination200Response CreateFilterForDestination(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateFilterForDestination200Response> localVarResponse = CreateFilterForDestinationWithHttpInfo(destinationId, createFilterForDestinationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Filter for Destination Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFilterForDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateFilterForDestination200Response> CreateFilterForDestinationWithHttpInfo(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->CreateFilterForDestination");
            }

            // verify the required parameter 'createFilterForDestinationV1Input' is set
            if (createFilterForDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createFilterForDestinationV1Input' when calling DestinationFiltersApi->CreateFilterForDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = createFilterForDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.CreateFilterForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFilterForDestination200Response>("/destination/{destinationId}/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFilterForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Filter for Destination Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFilterForDestination200Response</returns>
        public async System.Threading.Tasks.Task<CreateFilterForDestination200Response> CreateFilterForDestinationAsync(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateFilterForDestination200Response> localVarResponse = await CreateFilterForDestinationWithHttpInfoAsync(destinationId, createFilterForDestinationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Filter for Destination Creates a filter in a Destination.    • When called, this endpoint may generate the &#x60;Destination Filter Created&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="createFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFilterForDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateFilterForDestination200Response>> CreateFilterForDestinationWithHttpInfoAsync(string destinationId, CreateFilterForDestinationV1Input createFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->CreateFilterForDestination");
            }

            // verify the required parameter 'createFilterForDestinationV1Input' is set
            if (createFilterForDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createFilterForDestinationV1Input' when calling DestinationFiltersApi->CreateFilterForDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.Data = createFilterForDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.CreateFilterForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFilterForDestination200Response>("/destination/{destinationId}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFilterForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filter in Destination Gets a Destination filter by id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFilterInDestination200Response</returns>
        public GetFilterInDestination200Response GetFilterInDestination(string destinationId, string filterId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetFilterInDestination200Response> localVarResponse = GetFilterInDestinationWithHttpInfo(destinationId, filterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filter in Destination Gets a Destination filter by id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFilterInDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetFilterInDestination200Response> GetFilterInDestinationWithHttpInfo(string destinationId, string filterId, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->GetFilterInDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->GetFilterInDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "DestinationFiltersApi.GetFilterInDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFilterInDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterInDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Filter in Destination Gets a Destination filter by id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFilterInDestination200Response</returns>
        public async System.Threading.Tasks.Task<GetFilterInDestination200Response> GetFilterInDestinationAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetFilterInDestination200Response> localVarResponse = await GetFilterInDestinationWithHttpInfoAsync(destinationId, filterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filter in Destination Gets a Destination filter by id.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFilterInDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetFilterInDestination200Response>> GetFilterInDestinationWithHttpInfoAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->GetFilterInDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->GetFilterInDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "DestinationFiltersApi.GetFilterInDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFilterInDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFilterInDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Filters from Destination Lists filters for a Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFiltersFromDestination200Response</returns>
        public ListFiltersFromDestination200Response ListFiltersFromDestination(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListFiltersFromDestination200Response> localVarResponse = ListFiltersFromDestinationWithHttpInfo(destinationId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Filters from Destination Lists filters for a Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFiltersFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListFiltersFromDestination200Response> ListFiltersFromDestinationWithHttpInfo(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->ListFiltersFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationFiltersApi.ListFiltersFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFiltersFromDestination200Response>("/destination/{destinationId}/filters", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFiltersFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Filters from Destination Lists filters for a Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFiltersFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<ListFiltersFromDestination200Response> ListFiltersFromDestinationAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListFiltersFromDestination200Response> localVarResponse = await ListFiltersFromDestinationWithHttpInfoAsync(destinationId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Filters from Destination Lists filters for a Destination.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFiltersFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListFiltersFromDestination200Response>> ListFiltersFromDestinationWithHttpInfoAsync(string destinationId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->ListFiltersFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DestinationFiltersApi.ListFiltersFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFiltersFromDestination200Response>("/destination/{destinationId}/filters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFiltersFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Destination Filter Simulates the application of a Destination filter to a provided JSON payload.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PreviewDestinationFilter200Response</returns>
        public PreviewDestinationFilter200Response PreviewDestinationFilter(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<PreviewDestinationFilter200Response> localVarResponse = PreviewDestinationFilterWithHttpInfo(previewDestinationFilterV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Destination Filter Simulates the application of a Destination filter to a provided JSON payload.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PreviewDestinationFilter200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<PreviewDestinationFilter200Response> PreviewDestinationFilterWithHttpInfo(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'previewDestinationFilterV1Input' is set
            if (previewDestinationFilterV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'previewDestinationFilterV1Input' when calling DestinationFiltersApi->PreviewDestinationFilter");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = previewDestinationFilterV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.PreviewDestinationFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PreviewDestinationFilter200Response>("/destination/filters/preview", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewDestinationFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Preview Destination Filter Simulates the application of a Destination filter to a provided JSON payload.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PreviewDestinationFilter200Response</returns>
        public async System.Threading.Tasks.Task<PreviewDestinationFilter200Response> PreviewDestinationFilterAsync(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<PreviewDestinationFilter200Response> localVarResponse = await PreviewDestinationFilterWithHttpInfoAsync(previewDestinationFilterV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Preview Destination Filter Simulates the application of a Destination filter to a provided JSON payload.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="previewDestinationFilterV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PreviewDestinationFilter200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<PreviewDestinationFilter200Response>> PreviewDestinationFilterWithHttpInfoAsync(PreviewDestinationFilterV1Input previewDestinationFilterV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'previewDestinationFilterV1Input' is set
            if (previewDestinationFilterV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'previewDestinationFilterV1Input' when calling DestinationFiltersApi->PreviewDestinationFilter");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = previewDestinationFilterV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.PreviewDestinationFilter";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PreviewDestinationFilter200Response>("/destination/filters/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PreviewDestinationFilter", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Filter from Destination Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveFilterFromDestination200Response</returns>
        public RemoveFilterFromDestination200Response RemoveFilterFromDestination(string destinationId, string filterId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveFilterFromDestination200Response> localVarResponse = RemoveFilterFromDestinationWithHttpInfo(destinationId, filterId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Filter from Destination Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveFilterFromDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveFilterFromDestination200Response> RemoveFilterFromDestinationWithHttpInfo(string destinationId, string filterId, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->RemoveFilterFromDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->RemoveFilterFromDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "DestinationFiltersApi.RemoveFilterFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveFilterFromDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFilterFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Filter from Destination Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveFilterFromDestination200Response</returns>
        public async System.Threading.Tasks.Task<RemoveFilterFromDestination200Response> RemoveFilterFromDestinationAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveFilterFromDestination200Response> localVarResponse = await RemoveFilterFromDestinationWithHttpInfoAsync(destinationId, filterId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Filter from Destination Deletes a Destination filter.    • When called, this endpoint may generate the &#x60;Destination Filter Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveFilterFromDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveFilterFromDestination200Response>> RemoveFilterFromDestinationWithHttpInfoAsync(string destinationId, string filterId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->RemoveFilterFromDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->RemoveFilterFromDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter

            localVarRequestOptions.Operation = "DestinationFiltersApi.RemoveFilterFromDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveFilterFromDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveFilterFromDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Filter for Destination Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateFilterForDestination200Response</returns>
        public UpdateFilterForDestination200Response UpdateFilterForDestination(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateFilterForDestination200Response> localVarResponse = UpdateFilterForDestinationWithHttpInfo(destinationId, filterId, updateFilterForDestinationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Filter for Destination Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateFilterForDestination200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateFilterForDestination200Response> UpdateFilterForDestinationWithHttpInfo(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }

            // verify the required parameter 'updateFilterForDestinationV1Input' is set
            if (updateFilterForDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateFilterForDestinationV1Input' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.Data = updateFilterForDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.UpdateFilterForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateFilterForDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFilterForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Filter for Destination Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateFilterForDestination200Response</returns>
        public async System.Threading.Tasks.Task<UpdateFilterForDestination200Response> UpdateFilterForDestinationAsync(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateFilterForDestination200Response> localVarResponse = await UpdateFilterForDestinationWithHttpInfoAsync(destinationId, filterId, updateFilterForDestinationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Filter for Destination Updates a filter in a Destination.    • When called, this endpoint may generate one or more of the following [audit trail](/tag/Audit-Trail) events:* Destination Filter Enabled * Destination Filter Disabled       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="destinationId"></param>
        /// <param name="filterId"></param>
        /// <param name="updateFilterForDestinationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateFilterForDestination200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateFilterForDestination200Response>> UpdateFilterForDestinationWithHttpInfoAsync(string destinationId, string filterId, UpdateFilterForDestinationV1Input updateFilterForDestinationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'destinationId' is set
            if (destinationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'destinationId' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }

            // verify the required parameter 'filterId' is set
            if (filterId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'filterId' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }

            // verify the required parameter 'updateFilterForDestinationV1Input' is set
            if (updateFilterForDestinationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateFilterForDestinationV1Input' when calling DestinationFiltersApi->UpdateFilterForDestination");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("destinationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(destinationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("filterId", Segment.PublicApi.Client.ClientUtils.ParameterToString(filterId)); // path parameter
            localVarRequestOptions.Data = updateFilterForDestinationV1Input;

            localVarRequestOptions.Operation = "DestinationFiltersApi.UpdateFilterForDestination";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateFilterForDestination200Response>("/destination/{destinationId}/filters/{filterId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFilterForDestination", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
