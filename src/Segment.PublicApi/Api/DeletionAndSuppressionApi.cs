/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 57.3.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletionAndSuppressionApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Cloud Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCloudSourceRegulation200Response</returns>
        CreateCloudSourceRegulation200Response CreateCloudSourceRegulation(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Cloud Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCloudSourceRegulation200Response</returns>
        ApiResponse<CreateCloudSourceRegulation200Response> CreateCloudSourceRegulationWithHttpInfo(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSourceRegulation200Response</returns>
        CreateSourceRegulation200Response CreateSourceRegulation(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSourceRegulation200Response</returns>
        ApiResponse<CreateSourceRegulation200Response> CreateSourceRegulationWithHttpInfo(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Workspace Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWorkspaceRegulation200Response</returns>
        CreateWorkspaceRegulation200Response CreateWorkspaceRegulation(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Workspace Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWorkspaceRegulation200Response</returns>
        ApiResponse<CreateWorkspaceRegulation200Response> CreateWorkspaceRegulationWithHttpInfo(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0);
        /// <summary>
        /// Delete Regulation
        /// </summary>
        /// <remarks>
        /// Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteRegulation200Response</returns>
        DeleteRegulation200Response DeleteRegulation(string regulateId, int operationIndex = 0);

        /// <summary>
        /// Delete Regulation
        /// </summary>
        /// <remarks>
        /// Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteRegulation200Response</returns>
        ApiResponse<DeleteRegulation200Response> DeleteRegulationWithHttpInfo(string regulateId, int operationIndex = 0);
        /// <summary>
        /// Get Regulation
        /// </summary>
        /// <remarks>
        /// Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRegulation200Response</returns>
        GetRegulation200Response GetRegulation(string regulateId, int operationIndex = 0);

        /// <summary>
        /// Get Regulation
        /// </summary>
        /// <remarks>
        /// Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRegulation200Response</returns>
        ApiResponse<GetRegulation200Response> GetRegulationWithHttpInfo(string regulateId, int operationIndex = 0);
        /// <summary>
        /// List Regulations from Source
        /// </summary>
        /// <remarks>
        /// Lists all Source-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRegulationsFromSource200Response</returns>
        ListRegulationsFromSource200Response ListRegulationsFromSource(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Regulations from Source
        /// </summary>
        /// <remarks>
        /// Lists all Source-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRegulationsFromSource200Response</returns>
        ApiResponse<ListRegulationsFromSource200Response> ListRegulationsFromSourceWithHttpInfo(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Suppressions
        /// </summary>
        /// <remarks>
        /// Lists all suppressions in a given Workspace.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSuppressions200Response</returns>
        ListSuppressions200Response ListSuppressions(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Suppressions
        /// </summary>
        /// <remarks>
        /// Lists all suppressions in a given Workspace.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSuppressions200Response</returns>
        ApiResponse<ListSuppressions200Response> ListSuppressionsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Workspace Regulations
        /// </summary>
        /// <remarks>
        /// Lists all Workspace-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWorkspaceRegulations200Response</returns>
        ListWorkspaceRegulations200Response ListWorkspaceRegulations(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Workspace Regulations
        /// </summary>
        /// <remarks>
        /// Lists all Workspace-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWorkspaceRegulations200Response</returns>
        ApiResponse<ListWorkspaceRegulations200Response> ListWorkspaceRegulationsWithHttpInfo(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletionAndSuppressionApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Cloud Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCloudSourceRegulation200Response</returns>
        System.Threading.Tasks.Task<CreateCloudSourceRegulation200Response> CreateCloudSourceRegulationAsync(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Cloud Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCloudSourceRegulation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCloudSourceRegulation200Response>> CreateCloudSourceRegulationWithHttpInfoAsync(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSourceRegulation200Response</returns>
        System.Threading.Tasks.Task<CreateSourceRegulation200Response> CreateSourceRegulationAsync(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Source Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSourceRegulation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSourceRegulation200Response>> CreateSourceRegulationWithHttpInfoAsync(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Workspace Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWorkspaceRegulation200Response</returns>
        System.Threading.Tasks.Task<CreateWorkspaceRegulation200Response> CreateWorkspaceRegulationAsync(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Workspace Regulation
        /// </summary>
        /// <remarks>
        /// Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWorkspaceRegulation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateWorkspaceRegulation200Response>> CreateWorkspaceRegulationWithHttpInfoAsync(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Regulation
        /// </summary>
        /// <remarks>
        /// Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRegulation200Response</returns>
        System.Threading.Tasks.Task<DeleteRegulation200Response> DeleteRegulationAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Regulation
        /// </summary>
        /// <remarks>
        /// Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRegulation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteRegulation200Response>> DeleteRegulationWithHttpInfoAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Regulation
        /// </summary>
        /// <remarks>
        /// Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRegulation200Response</returns>
        System.Threading.Tasks.Task<GetRegulation200Response> GetRegulationAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Regulation
        /// </summary>
        /// <remarks>
        /// Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRegulation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRegulation200Response>> GetRegulationWithHttpInfoAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Regulations from Source
        /// </summary>
        /// <remarks>
        /// Lists all Source-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRegulationsFromSource200Response</returns>
        System.Threading.Tasks.Task<ListRegulationsFromSource200Response> ListRegulationsFromSourceAsync(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Regulations from Source
        /// </summary>
        /// <remarks>
        /// Lists all Source-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRegulationsFromSource200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListRegulationsFromSource200Response>> ListRegulationsFromSourceWithHttpInfoAsync(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Suppressions
        /// </summary>
        /// <remarks>
        /// Lists all suppressions in a given Workspace.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSuppressions200Response</returns>
        System.Threading.Tasks.Task<ListSuppressions200Response> ListSuppressionsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Suppressions
        /// </summary>
        /// <remarks>
        /// Lists all suppressions in a given Workspace.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSuppressions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListSuppressions200Response>> ListSuppressionsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Workspace Regulations
        /// </summary>
        /// <remarks>
        /// Lists all Workspace-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWorkspaceRegulations200Response</returns>
        System.Threading.Tasks.Task<ListWorkspaceRegulations200Response> ListWorkspaceRegulationsAsync(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Workspace Regulations
        /// </summary>
        /// <remarks>
        /// Lists all Workspace-scoped regulations.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWorkspaceRegulations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWorkspaceRegulations200Response>> ListWorkspaceRegulationsWithHttpInfoAsync(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDeletionAndSuppressionApi : IDeletionAndSuppressionApiSync, IDeletionAndSuppressionApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeletionAndSuppressionApi : IDeletionAndSuppressionApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionAndSuppressionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeletionAndSuppressionApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionAndSuppressionApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeletionAndSuppressionApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionAndSuppressionApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DeletionAndSuppressionApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeletionAndSuppressionApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DeletionAndSuppressionApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Cloud Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCloudSourceRegulation200Response</returns>
        public CreateCloudSourceRegulation200Response CreateCloudSourceRegulation(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateCloudSourceRegulation200Response> localVarResponse = CreateCloudSourceRegulationWithHttpInfo(sourceId, createCloudSourceRegulationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cloud Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCloudSourceRegulation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateCloudSourceRegulation200Response> CreateCloudSourceRegulationWithHttpInfo(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->CreateCloudSourceRegulation");
            }

            // verify the required parameter 'createCloudSourceRegulationV1Input' is set
            if (createCloudSourceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createCloudSourceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateCloudSourceRegulation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = createCloudSourceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateCloudSourceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCloudSourceRegulation200Response>("/regulations/cloudsources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCloudSourceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cloud Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCloudSourceRegulation200Response</returns>
        public async System.Threading.Tasks.Task<CreateCloudSourceRegulation200Response> CreateCloudSourceRegulationAsync(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateCloudSourceRegulation200Response> localVarResponse = await CreateCloudSourceRegulationWithHttpInfoAsync(sourceId, createCloudSourceRegulationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cloud Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment        Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createCloudSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCloudSourceRegulation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateCloudSourceRegulation200Response>> CreateCloudSourceRegulationWithHttpInfoAsync(string sourceId, CreateCloudSourceRegulationV1Input createCloudSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->CreateCloudSourceRegulation");
            }

            // verify the required parameter 'createCloudSourceRegulationV1Input' is set
            if (createCloudSourceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createCloudSourceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateCloudSourceRegulation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = createCloudSourceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateCloudSourceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCloudSourceRegulation200Response>("/regulations/cloudsources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCloudSourceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSourceRegulation200Response</returns>
        public CreateSourceRegulation200Response CreateSourceRegulation(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateSourceRegulation200Response> localVarResponse = CreateSourceRegulationWithHttpInfo(sourceId, createSourceRegulationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSourceRegulation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateSourceRegulation200Response> CreateSourceRegulationWithHttpInfo(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->CreateSourceRegulation");
            }

            // verify the required parameter 'createSourceRegulationV1Input' is set
            if (createSourceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createSourceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateSourceRegulation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = createSourceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateSourceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSourceRegulation200Response>("/regulations/sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSourceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSourceRegulation200Response</returns>
        public async System.Threading.Tasks.Task<CreateSourceRegulation200Response> CreateSourceRegulationAsync(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateSourceRegulation200Response> localVarResponse = await CreateSourceRegulationWithHttpInfoAsync(sourceId, createSourceRegulationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Source Regulation Creates a Source-scoped regulation.    Please Note: Suppression rules at the Workspace level take precedence over those at the Source level. If a user has been suppressed at the Workspace level, any attempt to un-suppress at the Source level is not supported and the processing of the request will fail in Segment    • When called, this endpoint may generate the &#x60;Source Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="createSourceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSourceRegulation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateSourceRegulation200Response>> CreateSourceRegulationWithHttpInfoAsync(string sourceId, CreateSourceRegulationV1Input createSourceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->CreateSourceRegulation");
            }

            // verify the required parameter 'createSourceRegulationV1Input' is set
            if (createSourceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createSourceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateSourceRegulation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            localVarRequestOptions.Data = createSourceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateSourceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSourceRegulation200Response>("/regulations/sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSourceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Workspace Regulation Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateWorkspaceRegulation200Response</returns>
        public CreateWorkspaceRegulation200Response CreateWorkspaceRegulation(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateWorkspaceRegulation200Response> localVarResponse = CreateWorkspaceRegulationWithHttpInfo(createWorkspaceRegulationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Workspace Regulation Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateWorkspaceRegulation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateWorkspaceRegulation200Response> CreateWorkspaceRegulationWithHttpInfo(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createWorkspaceRegulationV1Input' is set
            if (createWorkspaceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createWorkspaceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateWorkspaceRegulation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWorkspaceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateWorkspaceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateWorkspaceRegulation200Response>("/regulations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspaceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Workspace Regulation Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateWorkspaceRegulation200Response</returns>
        public async System.Threading.Tasks.Task<CreateWorkspaceRegulation200Response> CreateWorkspaceRegulationAsync(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateWorkspaceRegulation200Response> localVarResponse = await CreateWorkspaceRegulationWithHttpInfoAsync(createWorkspaceRegulationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Workspace Regulation Creates a Workspace-scoped regulation.    • When called, this endpoint may generate the &#x60;Workspace Regulation Created&#x60; event in the [audit trail](/tag/Audit-Trail).  Config API omitted fields: - &#x60;attributes&#x60;, - &#x60;userAgent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createWorkspaceRegulationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateWorkspaceRegulation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateWorkspaceRegulation200Response>> CreateWorkspaceRegulationWithHttpInfoAsync(CreateWorkspaceRegulationV1Input createWorkspaceRegulationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createWorkspaceRegulationV1Input' is set
            if (createWorkspaceRegulationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createWorkspaceRegulationV1Input' when calling DeletionAndSuppressionApi->CreateWorkspaceRegulation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createWorkspaceRegulationV1Input;

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.CreateWorkspaceRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateWorkspaceRegulation200Response>("/regulations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateWorkspaceRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Regulation Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteRegulation200Response</returns>
        public DeleteRegulation200Response DeleteRegulation(string regulateId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteRegulation200Response> localVarResponse = DeleteRegulationWithHttpInfo(regulateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Regulation Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteRegulation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteRegulation200Response> DeleteRegulationWithHttpInfo(string regulateId, int operationIndex = 0)
        {
            // verify the required parameter 'regulateId' is set
            if (regulateId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'regulateId' when calling DeletionAndSuppressionApi->DeleteRegulation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("regulateId", Segment.PublicApi.Client.ClientUtils.ParameterToString(regulateId)); // path parameter

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.DeleteRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteRegulation200Response>("/regulations/{regulateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Regulation Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteRegulation200Response</returns>
        public async System.Threading.Tasks.Task<DeleteRegulation200Response> DeleteRegulationAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteRegulation200Response> localVarResponse = await DeleteRegulationWithHttpInfoAsync(regulateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Regulation Deletes a regulation from the Workspace. The regulation must be in the initialized state to be deleted.    • When called, this endpoint may generate the &#x60;Regulation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteRegulation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteRegulation200Response>> DeleteRegulationWithHttpInfoAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'regulateId' is set
            if (regulateId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'regulateId' when calling DeletionAndSuppressionApi->DeleteRegulation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("regulateId", Segment.PublicApi.Client.ClientUtils.ParameterToString(regulateId)); // path parameter

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.DeleteRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteRegulation200Response>("/regulations/{regulateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Regulation Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRegulation200Response</returns>
        public GetRegulation200Response GetRegulation(string regulateId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetRegulation200Response> localVarResponse = GetRegulationWithHttpInfo(regulateId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Regulation Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRegulation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetRegulation200Response> GetRegulationWithHttpInfo(string regulateId, int operationIndex = 0)
        {
            // verify the required parameter 'regulateId' is set
            if (regulateId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'regulateId' when calling DeletionAndSuppressionApi->GetRegulation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("regulateId", Segment.PublicApi.Client.ClientUtils.ParameterToString(regulateId)); // path parameter

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.GetRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRegulation200Response>("/regulations/{regulateId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Regulation Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRegulation200Response</returns>
        public async System.Threading.Tasks.Task<GetRegulation200Response> GetRegulationAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetRegulation200Response> localVarResponse = await GetRegulationWithHttpInfoAsync(regulateId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Regulation Gets a regulation from the Workspace.        Config API omitted fields: - &#x60;parent&#x60;       
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regulateId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRegulation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetRegulation200Response>> GetRegulationWithHttpInfoAsync(string regulateId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'regulateId' is set
            if (regulateId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'regulateId' when calling DeletionAndSuppressionApi->GetRegulation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("regulateId", Segment.PublicApi.Client.ClientUtils.ParameterToString(regulateId)); // path parameter

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.GetRegulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRegulation200Response>("/regulations/{regulateId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRegulation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Regulations from Source Lists all Source-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListRegulationsFromSource200Response</returns>
        public ListRegulationsFromSource200Response ListRegulationsFromSource(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListRegulationsFromSource200Response> localVarResponse = ListRegulationsFromSourceWithHttpInfo(sourceId, status, regulationTypes, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Regulations from Source Lists all Source-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListRegulationsFromSource200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListRegulationsFromSource200Response> ListRegulationsFromSourceWithHttpInfo(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->ListRegulationsFromSource");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (regulationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "regulationTypes", regulationTypes));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListRegulationsFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListRegulationsFromSource200Response>("/regulations/sources/{sourceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRegulationsFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Regulations from Source Lists all Source-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListRegulationsFromSource200Response</returns>
        public async System.Threading.Tasks.Task<ListRegulationsFromSource200Response> ListRegulationsFromSourceAsync(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListRegulationsFromSource200Response> localVarResponse = await ListRegulationsFromSourceWithHttpInfoAsync(sourceId, status, regulationTypes, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Regulations from Source Lists all Source-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceId"></param>
        /// <param name="status">The status on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListRegulationsFromSource200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListRegulationsFromSource200Response>> ListRegulationsFromSourceWithHttpInfoAsync(string sourceId, string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceId' is set
            if (sourceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'sourceId' when calling DeletionAndSuppressionApi->ListRegulationsFromSource");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("sourceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(sourceId)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (regulationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "regulationTypes", regulationTypes));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListRegulationsFromSource";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListRegulationsFromSource200Response>("/regulations/sources/{sourceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListRegulationsFromSource", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Suppressions Lists all suppressions in a given Workspace.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListSuppressions200Response</returns>
        public ListSuppressions200Response ListSuppressions(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListSuppressions200Response> localVarResponse = ListSuppressionsWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Suppressions Lists all suppressions in a given Workspace.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListSuppressions200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListSuppressions200Response> ListSuppressionsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListSuppressions200Response>("/suppressions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Suppressions Lists all suppressions in a given Workspace.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListSuppressions200Response</returns>
        public async System.Threading.Tasks.Task<ListSuppressions200Response> ListSuppressionsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListSuppressions200Response> localVarResponse = await ListSuppressionsWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Suppressions Lists all suppressions in a given Workspace.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListSuppressions200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListSuppressions200Response>> ListSuppressionsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListSuppressions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListSuppressions200Response>("/suppressions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSuppressions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Workspace Regulations Lists all Workspace-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWorkspaceRegulations200Response</returns>
        public ListWorkspaceRegulations200Response ListWorkspaceRegulations(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListWorkspaceRegulations200Response> localVarResponse = ListWorkspaceRegulationsWithHttpInfo(status, regulationTypes, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Workspace Regulations Lists all Workspace-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWorkspaceRegulations200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListWorkspaceRegulations200Response> ListWorkspaceRegulationsWithHttpInfo(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (regulationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "regulationTypes", regulationTypes));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListWorkspaceRegulations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWorkspaceRegulations200Response>("/regulations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceRegulations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Workspace Regulations Lists all Workspace-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWorkspaceRegulations200Response</returns>
        public async System.Threading.Tasks.Task<ListWorkspaceRegulations200Response> ListWorkspaceRegulationsAsync(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListWorkspaceRegulations200Response> localVarResponse = await ListWorkspaceRegulationsWithHttpInfoAsync(status, regulationTypes, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Workspace Regulations Lists all Workspace-scoped regulations.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">The status on which to filter the returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="regulationTypes">The regulation types on which to filter returned regulations.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWorkspaceRegulations200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListWorkspaceRegulations200Response>> ListWorkspaceRegulationsWithHttpInfoAsync(string? status = default(string?), List<string>? regulationTypes = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (regulationTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "regulationTypes", regulationTypes));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "DeletionAndSuppressionApi.ListWorkspaceRegulations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWorkspaceRegulations200Response>("/regulations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWorkspaceRegulations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
