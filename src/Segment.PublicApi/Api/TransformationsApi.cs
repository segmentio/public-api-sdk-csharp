/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.2
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransformationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Transformation
        /// </summary>
        /// <remarks>
        /// Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTransformation200Response</returns>
        CreateTransformation200Response CreateTransformation(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Transformation
        /// </summary>
        /// <remarks>
        /// Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTransformation200Response</returns>
        ApiResponse<CreateTransformation200Response> CreateTransformationWithHttpInfo(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0);
        /// <summary>
        /// Delete Transformation
        /// </summary>
        /// <remarks>
        /// Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTransformation200Response</returns>
        DeleteTransformation200Response DeleteTransformation(string transformationId, int operationIndex = 0);

        /// <summary>
        /// Delete Transformation
        /// </summary>
        /// <remarks>
        /// Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTransformation200Response</returns>
        ApiResponse<DeleteTransformation200Response> DeleteTransformationWithHttpInfo(string transformationId, int operationIndex = 0);
        /// <summary>
        /// Get Transformation
        /// </summary>
        /// <remarks>
        /// Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransformation200Response</returns>
        GetTransformation200Response GetTransformation(string transformationId, int operationIndex = 0);

        /// <summary>
        /// Get Transformation
        /// </summary>
        /// <remarks>
        /// Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransformation200Response</returns>
        ApiResponse<GetTransformation200Response> GetTransformationWithHttpInfo(string transformationId, int operationIndex = 0);
        /// <summary>
        /// List Transformations
        /// </summary>
        /// <remarks>
        /// Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTransformations200Response</returns>
        ListTransformations200Response ListTransformations(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Transformations
        /// </summary>
        /// <remarks>
        /// Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTransformations200Response</returns>
        ApiResponse<ListTransformations200Response> ListTransformationsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Update Transformation
        /// </summary>
        /// <remarks>
        /// Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTransformation200Response</returns>
        UpdateTransformation200Response UpdateTransformation(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Transformation
        /// </summary>
        /// <remarks>
        /// Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTransformation200Response</returns>
        ApiResponse<UpdateTransformation200Response> UpdateTransformationWithHttpInfo(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransformationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Transformation
        /// </summary>
        /// <remarks>
        /// Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTransformation200Response</returns>
        System.Threading.Tasks.Task<CreateTransformation200Response> CreateTransformationAsync(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Transformation
        /// </summary>
        /// <remarks>
        /// Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTransformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTransformation200Response>> CreateTransformationWithHttpInfoAsync(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Transformation
        /// </summary>
        /// <remarks>
        /// Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTransformation200Response</returns>
        System.Threading.Tasks.Task<DeleteTransformation200Response> DeleteTransformationAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Transformation
        /// </summary>
        /// <remarks>
        /// Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTransformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTransformation200Response>> DeleteTransformationWithHttpInfoAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Transformation
        /// </summary>
        /// <remarks>
        /// Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransformation200Response</returns>
        System.Threading.Tasks.Task<GetTransformation200Response> GetTransformationAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Transformation
        /// </summary>
        /// <remarks>
        /// Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTransformation200Response>> GetTransformationWithHttpInfoAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Transformations
        /// </summary>
        /// <remarks>
        /// Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTransformations200Response</returns>
        System.Threading.Tasks.Task<ListTransformations200Response> ListTransformationsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Transformations
        /// </summary>
        /// <remarks>
        /// Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTransformations200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListTransformations200Response>> ListTransformationsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Transformation
        /// </summary>
        /// <remarks>
        /// Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTransformation200Response</returns>
        System.Threading.Tasks.Task<UpdateTransformation200Response> UpdateTransformationAsync(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Transformation
        /// </summary>
        /// <remarks>
        /// Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTransformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateTransformation200Response>> UpdateTransformationWithHttpInfoAsync(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransformationsApi : ITransformationsApiSync, ITransformationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransformationsApi : ITransformationsApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransformationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransformationsApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransformationsApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransformationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransformationsApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Transformation Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTransformation200Response</returns>
        public CreateTransformation200Response CreateTransformation(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateTransformation200Response> localVarResponse = CreateTransformationWithHttpInfo(createTransformationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Transformation Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTransformation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateTransformation200Response> CreateTransformationWithHttpInfo(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createTransformationV1Input' is set
            if (createTransformationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createTransformationV1Input' when calling TransformationsApi->CreateTransformation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTransformationV1Input;

            localVarRequestOptions.Operation = "TransformationsApi.CreateTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTransformation200Response>("/transformations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Transformation Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTransformation200Response</returns>
        public async System.Threading.Tasks.Task<CreateTransformation200Response> CreateTransformationAsync(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateTransformation200Response> localVarResponse = await CreateTransformationWithHttpInfoAsync(createTransformationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Transformation Creates a new Transformation.    • When called, this endpoint may generate the &#x60;Transformation Created&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTransformation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateTransformation200Response>> CreateTransformationWithHttpInfoAsync(CreateTransformationV1Input createTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTransformationV1Input' is set
            if (createTransformationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createTransformationV1Input' when calling TransformationsApi->CreateTransformation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTransformationV1Input;

            localVarRequestOptions.Operation = "TransformationsApi.CreateTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTransformation200Response>("/transformations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Transformation Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTransformation200Response</returns>
        public DeleteTransformation200Response DeleteTransformation(string transformationId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteTransformation200Response> localVarResponse = DeleteTransformationWithHttpInfo(transformationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Transformation Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTransformation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteTransformation200Response> DeleteTransformationWithHttpInfo(string transformationId, int operationIndex = 0)
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->DeleteTransformation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter

            localVarRequestOptions.Operation = "TransformationsApi.DeleteTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Transformation Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTransformation200Response</returns>
        public async System.Threading.Tasks.Task<DeleteTransformation200Response> DeleteTransformationAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteTransformation200Response> localVarResponse = await DeleteTransformationWithHttpInfoAsync(transformationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Transformation Deletes a Transformation.    • When called, this endpoint may generate the &#x60;Transformation Deleted&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTransformation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteTransformation200Response>> DeleteTransformationWithHttpInfoAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->DeleteTransformation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter

            localVarRequestOptions.Operation = "TransformationsApi.DeleteTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transformation Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTransformation200Response</returns>
        public GetTransformation200Response GetTransformation(string transformationId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetTransformation200Response> localVarResponse = GetTransformationWithHttpInfo(transformationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transformation Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTransformation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetTransformation200Response> GetTransformationWithHttpInfo(string transformationId, int operationIndex = 0)
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->GetTransformation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter

            localVarRequestOptions.Operation = "TransformationsApi.GetTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Transformation Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTransformation200Response</returns>
        public async System.Threading.Tasks.Task<GetTransformation200Response> GetTransformationAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetTransformation200Response> localVarResponse = await GetTransformationWithHttpInfoAsync(transformationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Transformation Gets a Transformation.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTransformation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetTransformation200Response>> GetTransformationWithHttpInfoAsync(string transformationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->GetTransformation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter

            localVarRequestOptions.Operation = "TransformationsApi.GetTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Transformations Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListTransformations200Response</returns>
        public ListTransformations200Response ListTransformations(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListTransformations200Response> localVarResponse = ListTransformationsWithHttpInfo(pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Transformations Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListTransformations200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListTransformations200Response> ListTransformationsWithHttpInfo(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TransformationsApi.ListTransformations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListTransformations200Response>("/transformations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransformations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Transformations Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListTransformations200Response</returns>
        public async System.Threading.Tasks.Task<ListTransformations200Response> ListTransformationsAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListTransformations200Response> localVarResponse = await ListTransformationsWithHttpInfoAsync(pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Transformations Lists all Transformations in the Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pagination">Pagination options.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListTransformations200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListTransformations200Response>> ListTransformationsWithHttpInfoAsync(PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "TransformationsApi.ListTransformations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListTransformations200Response>("/transformations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListTransformations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transformation Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateTransformation200Response</returns>
        public UpdateTransformation200Response UpdateTransformation(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateTransformation200Response> localVarResponse = UpdateTransformationWithHttpInfo(transformationId, updateTransformationV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Transformation Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateTransformation200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateTransformation200Response> UpdateTransformationWithHttpInfo(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->UpdateTransformation");
            }

            // verify the required parameter 'updateTransformationV1Input' is set
            if (updateTransformationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateTransformationV1Input' when calling TransformationsApi->UpdateTransformation");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter
            localVarRequestOptions.Data = updateTransformationV1Input;

            localVarRequestOptions.Operation = "TransformationsApi.UpdateTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Transformation Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateTransformation200Response</returns>
        public async System.Threading.Tasks.Task<UpdateTransformation200Response> UpdateTransformationAsync(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateTransformation200Response> localVarResponse = await UpdateTransformationWithHttpInfoAsync(transformationId, updateTransformationV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Transformation Updates an existing Transformation.    • When called, this endpoint may generate the &#x60;Transformation Updated&#x60; event in the [audit trail](/tag/Audit-Trail).   • In order to successfully call this endpoint, the specified Workspace needs to have the Protocols feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transformationId"></param>
        /// <param name="updateTransformationV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateTransformation200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateTransformation200Response>> UpdateTransformationWithHttpInfoAsync(string transformationId, UpdateTransformationV1Input updateTransformationV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transformationId' is set
            if (transformationId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'transformationId' when calling TransformationsApi->UpdateTransformation");
            }

            // verify the required parameter 'updateTransformationV1Input' is set
            if (updateTransformationV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateTransformationV1Input' when calling TransformationsApi->UpdateTransformation");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transformationId", Segment.PublicApi.Client.ClientUtils.ParameterToString(transformationId)); // path parameter
            localVarRequestOptions.Data = updateTransformationV1Input;

            localVarRequestOptions.Operation = "TransformationsApi.UpdateTransformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateTransformation200Response>("/transformations/{transformationId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateTransformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
