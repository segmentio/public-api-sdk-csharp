/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 58.13.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Events Volume from Workspace
        /// </summary>
        /// <remarks>
        /// Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventsVolumeFromWorkspace200Response</returns>
        GetEventsVolumeFromWorkspace200Response GetEventsVolumeFromWorkspace(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// Get Events Volume from Workspace
        /// </summary>
        /// <remarks>
        /// Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventsVolumeFromWorkspace200Response</returns>
        ApiResponse<GetEventsVolumeFromWorkspace200Response> GetEventsVolumeFromWorkspaceWithHttpInfo(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get Events Volume from Workspace
        /// </summary>
        /// <remarks>
        /// Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventsVolumeFromWorkspace200Response</returns>
        System.Threading.Tasks.Task<GetEventsVolumeFromWorkspace200Response> GetEventsVolumeFromWorkspaceAsync(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Events Volume from Workspace
        /// </summary>
        /// <remarks>
        /// Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventsVolumeFromWorkspace200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEventsVolumeFromWorkspace200Response>> GetEventsVolumeFromWorkspaceWithHttpInfoAsync(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventsApi : IEventsApiSync, IEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventsApi : IEventsApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventsApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventsApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventsApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get Events Volume from Workspace Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEventsVolumeFromWorkspace200Response</returns>
        public GetEventsVolumeFromWorkspace200Response GetEventsVolumeFromWorkspace(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetEventsVolumeFromWorkspace200Response> localVarResponse = GetEventsVolumeFromWorkspaceWithHttpInfo(granularity, startTime, endTime, groupBy, sourceId, eventName, eventType, appVersion, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Events Volume from Workspace Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEventsVolumeFromWorkspace200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetEventsVolumeFromWorkspace200Response> GetEventsVolumeFromWorkspaceWithHttpInfo(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "sourceId", sourceId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "eventType", eventType));
            }
            if (appVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "appVersion", appVersion));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "EventsApi.GetEventsVolumeFromWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEventsVolumeFromWorkspace200Response>("/events/volume", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsVolumeFromWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Events Volume from Workspace Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEventsVolumeFromWorkspace200Response</returns>
        public async System.Threading.Tasks.Task<GetEventsVolumeFromWorkspace200Response> GetEventsVolumeFromWorkspaceAsync(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetEventsVolumeFromWorkspace200Response> localVarResponse = await GetEventsVolumeFromWorkspaceWithHttpInfoAsync(granularity, startTime, endTime, groupBy, sourceId, eventName, eventType, appVersion, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Events Volume from Workspace Enumerates the Workspace event volumes over time in minute increments.   The rate limit for this endpoint is 60 requests per minute, which is lower than the default due to access pattern restrictions. Once reached, this endpoint will respond with the 429 HTTP status code with headers indicating the limit parameters. See [Rate Limiting](/#tag/Rate-Limits) for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="granularity">The size of each bucket in the requested window.  This parameter exists in v1.</param>
        /// <param name="startTime">The ISO8601 formatted timestamp that corresponds to the beginning of the requested time frame, inclusive.  This parameter exists in v1.</param>
        /// <param name="endTime">The ISO8601 formatted timestamp that corresponds to the end of the requested time frame, noninclusive. Segment recommends that you lag queries 1 minute behind clock time to reduce the risk for latency to impact the counts.  This parameter exists in v1.</param>
        /// <param name="groupBy">A comma-delimited list of strings that represents the dimensions to group the result by. The options are: &#x60;eventName&#x60;, &#x60;eventType&#x60; and &#x60;source&#x60;.  This parameter exists in v1. (optional)</param>
        /// <param name="sourceId">A list of strings which filters the results to the given SourceIds.  This parameter exists in v1. (optional)</param>
        /// <param name="eventName">A list of strings which filters the results to the given EventNames.  This parameter exists in v1. (optional)</param>
        /// <param name="eventType">A list of strings which filters the results to the given EventTypes.  This parameter exists in v1. (optional)</param>
        /// <param name="appVersion">A list of strings which filters the results to the given AppVersions.  This parameter exists in v1. (optional)</param>
        /// <param name="pagination">Pagination input for event volume by Workspace.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEventsVolumeFromWorkspace200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetEventsVolumeFromWorkspace200Response>> GetEventsVolumeFromWorkspaceWithHttpInfoAsync(string granularity, string startTime, string endTime, List<string>? groupBy = default(List<string>?), List<string>? sourceId = default(List<string>?), List<string>? eventName = default(List<string>?), List<string>? eventType = default(List<string>?), List<string>? appVersion = default(List<string>?), PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'granularity' is set
            if (granularity == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'granularity' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }

            // verify the required parameter 'startTime' is set
            if (startTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'startTime' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }

            // verify the required parameter 'endTime' is set
            if (endTime == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'endTime' when calling EventsApi->GetEventsVolumeFromWorkspace");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "granularity", granularity));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "startTime", startTime));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "endTime", endTime));
            if (groupBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "groupBy", groupBy));
            }
            if (sourceId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "sourceId", sourceId));
            }
            if (eventName != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "eventName", eventName));
            }
            if (eventType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "eventType", eventType));
            }
            if (appVersion != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("multi", "appVersion", appVersion));
            }
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "EventsApi.GetEventsVolumeFromWorkspace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEventsVolumeFromWorkspace200Response>("/events/volume", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEventsVolumeFromWorkspace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
