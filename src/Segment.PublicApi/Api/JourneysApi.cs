/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 57.4.0
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Journey
        /// </summary>
        /// <remarks>
        /// Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateJourney201Response</returns>
        CreateJourney201Response CreateJourney(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Create Journey
        /// </summary>
        /// <remarks>
        /// Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateJourney201Response</returns>
        ApiResponse<CreateJourney201Response> CreateJourneyWithHttpInfo(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Get Journey
        /// </summary>
        /// <remarks>
        /// Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJourney200Response</returns>
        GetJourney200Response GetJourney(string spaceId, string containerId, int operationIndex = 0);

        /// <summary>
        /// Get Journey
        /// </summary>
        /// <remarks>
        /// Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJourney200Response</returns>
        ApiResponse<GetJourney200Response> GetJourneyWithHttpInfo(string spaceId, string containerId, int operationIndex = 0);
        /// <summary>
        /// Get Journey Analytics
        /// </summary>
        /// <remarks>
        /// Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJourneyAnalytics200Response</returns>
        GetJourneyAnalytics200Response GetJourneyAnalytics(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0);

        /// <summary>
        /// Get Journey Analytics
        /// </summary>
        /// <remarks>
        /// Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJourneyAnalytics200Response</returns>
        ApiResponse<GetJourneyAnalytics200Response> GetJourneyAnalyticsWithHttpInfo(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0);
        /// <summary>
        /// Remove Journey from Space
        /// </summary>
        /// <remarks>
        /// Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveJourneyFromSpace200Response</returns>
        RemoveJourneyFromSpace200Response RemoveJourneyFromSpace(string spaceId, string containerId, decimal varVersion, int operationIndex = 0);

        /// <summary>
        /// Remove Journey from Space
        /// </summary>
        /// <remarks>
        /// Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveJourneyFromSpace200Response</returns>
        ApiResponse<RemoveJourneyFromSpace200Response> RemoveJourneyFromSpaceWithHttpInfo(string spaceId, string containerId, decimal varVersion, int operationIndex = 0);
        /// <summary>
        /// Replace Steps for Journey
        /// </summary>
        /// <remarks>
        /// Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceStepsForJourney200Response</returns>
        ReplaceStepsForJourney200Response ReplaceStepsForJourney(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Replace Steps for Journey
        /// </summary>
        /// <remarks>
        /// Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceStepsForJourney200Response</returns>
        ApiResponse<ReplaceStepsForJourney200Response> ReplaceStepsForJourneyWithHttpInfo(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Update Destinations for Journey
        /// </summary>
        /// <remarks>
        /// Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDestinationsForJourney200Response</returns>
        UpdateDestinationsForJourney200Response UpdateDestinationsForJourney(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Update Destinations for Journey
        /// </summary>
        /// <remarks>
        /// Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDestinationsForJourney200Response</returns>
        ApiResponse<UpdateDestinationsForJourney200Response> UpdateDestinationsForJourneyWithHttpInfo(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Update Status for Journey
        /// </summary>
        /// <remarks>
        /// Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateStatusForJourney200Response</returns>
        UpdateStatusForJourney200Response UpdateStatusForJourney(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Update Status for Journey
        /// </summary>
        /// <remarks>
        /// Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateStatusForJourney200Response</returns>
        ApiResponse<UpdateStatusForJourney200Response> UpdateStatusForJourneyWithHttpInfo(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Journey
        /// </summary>
        /// <remarks>
        /// Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateJourney201Response</returns>
        System.Threading.Tasks.Task<CreateJourney201Response> CreateJourneyAsync(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Journey
        /// </summary>
        /// <remarks>
        /// Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateJourney201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateJourney201Response>> CreateJourneyWithHttpInfoAsync(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Journey
        /// </summary>
        /// <remarks>
        /// Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJourney200Response</returns>
        System.Threading.Tasks.Task<GetJourney200Response> GetJourneyAsync(string spaceId, string containerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Journey
        /// </summary>
        /// <remarks>
        /// Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJourney200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJourney200Response>> GetJourneyWithHttpInfoAsync(string spaceId, string containerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Journey Analytics
        /// </summary>
        /// <remarks>
        /// Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJourneyAnalytics200Response</returns>
        System.Threading.Tasks.Task<GetJourneyAnalytics200Response> GetJourneyAnalyticsAsync(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Journey Analytics
        /// </summary>
        /// <remarks>
        /// Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJourneyAnalytics200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJourneyAnalytics200Response>> GetJourneyAnalyticsWithHttpInfoAsync(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Journey from Space
        /// </summary>
        /// <remarks>
        /// Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveJourneyFromSpace200Response</returns>
        System.Threading.Tasks.Task<RemoveJourneyFromSpace200Response> RemoveJourneyFromSpaceAsync(string spaceId, string containerId, decimal varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Journey from Space
        /// </summary>
        /// <remarks>
        /// Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveJourneyFromSpace200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveJourneyFromSpace200Response>> RemoveJourneyFromSpaceWithHttpInfoAsync(string spaceId, string containerId, decimal varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Replace Steps for Journey
        /// </summary>
        /// <remarks>
        /// Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceStepsForJourney200Response</returns>
        System.Threading.Tasks.Task<ReplaceStepsForJourney200Response> ReplaceStepsForJourneyAsync(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Replace Steps for Journey
        /// </summary>
        /// <remarks>
        /// Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceStepsForJourney200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplaceStepsForJourney200Response>> ReplaceStepsForJourneyWithHttpInfoAsync(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Destinations for Journey
        /// </summary>
        /// <remarks>
        /// Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDestinationsForJourney200Response</returns>
        System.Threading.Tasks.Task<UpdateDestinationsForJourney200Response> UpdateDestinationsForJourneyAsync(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Destinations for Journey
        /// </summary>
        /// <remarks>
        /// Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDestinationsForJourney200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateDestinationsForJourney200Response>> UpdateDestinationsForJourneyWithHttpInfoAsync(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Status for Journey
        /// </summary>
        /// <remarks>
        /// Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateStatusForJourney200Response</returns>
        System.Threading.Tasks.Task<UpdateStatusForJourney200Response> UpdateStatusForJourneyAsync(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Status for Journey
        /// </summary>
        /// <remarks>
        /// Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateStatusForJourney200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateStatusForJourney200Response>> UpdateStatusForJourneyWithHttpInfoAsync(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJourneysApi : IJourneysApiSync, IJourneysApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JourneysApi : IJourneysApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JourneysApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JourneysApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JourneysApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JourneysApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JourneysApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Journey Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateJourney201Response</returns>
        public CreateJourney201Response CreateJourney(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateJourney201Response> localVarResponse = CreateJourneyWithHttpInfo(spaceId, createJourneyAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Journey Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateJourney201Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateJourney201Response> CreateJourneyWithHttpInfo(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->CreateJourney");
            }

            // verify the required parameter 'createJourneyAlphaInput' is set
            if (createJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createJourneyAlphaInput' when calling JourneysApi->CreateJourney");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = createJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.CreateJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateJourney201Response>("/spaces/{spaceId}/journeys", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Journey Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateJourney201Response</returns>
        public async System.Threading.Tasks.Task<CreateJourney201Response> CreateJourneyAsync(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateJourney201Response> localVarResponse = await CreateJourneyWithHttpInfoAsync(spaceId, createJourneyAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Journey Creates Journey.  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="createJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateJourney201Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateJourney201Response>> CreateJourneyWithHttpInfoAsync(string spaceId, CreateJourneyAlphaInput createJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->CreateJourney");
            }

            // verify the required parameter 'createJourneyAlphaInput' is set
            if (createJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createJourneyAlphaInput' when calling JourneysApi->CreateJourney");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.Data = createJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.CreateJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateJourney201Response>("/spaces/{spaceId}/journeys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journey Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJourney200Response</returns>
        public GetJourney200Response GetJourney(string spaceId, string containerId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetJourney200Response> localVarResponse = GetJourneyWithHttpInfo(spaceId, containerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journey Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJourney200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetJourney200Response> GetJourneyWithHttpInfo(string spaceId, string containerId, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->GetJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->GetJourney");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            localVarRequestOptions.Operation = "JourneysApi.GetJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJourney200Response>("/spaces/{spaceId}/journeys/{containerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journey Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJourney200Response</returns>
        public async System.Threading.Tasks.Task<GetJourney200Response> GetJourneyAsync(string spaceId, string containerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetJourney200Response> localVarResponse = await GetJourneyWithHttpInfoAsync(spaceId, containerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journey Returns the journey by containerId  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJourney200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetJourney200Response>> GetJourneyWithHttpInfoAsync(string spaceId, string containerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->GetJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->GetJourney");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter

            localVarRequestOptions.Operation = "JourneysApi.GetJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJourney200Response>("/spaces/{spaceId}/journeys/{containerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journey Analytics Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetJourneyAnalytics200Response</returns>
        public GetJourneyAnalytics200Response GetJourneyAnalytics(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetJourneyAnalytics200Response> localVarResponse = GetJourneyAnalyticsWithHttpInfo(spaceId, containerId, varVersion, fromDate, toDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journey Analytics Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetJourneyAnalytics200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetJourneyAnalytics200Response> GetJourneyAnalyticsWithHttpInfo(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->GetJourneyAnalytics");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->GetJourneyAnalytics");
            }

            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'fromDate' when calling JourneysApi->GetJourneyAnalytics");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            localVarRequestOptions.Operation = "JourneysApi.GetJourneyAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJourneyAnalytics200Response>("/spaces/{spaceId}/journeys/{containerId}/analytics", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJourneyAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Journey Analytics Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJourneyAnalytics200Response</returns>
        public async System.Threading.Tasks.Task<GetJourneyAnalytics200Response> GetJourneyAnalyticsAsync(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetJourneyAnalytics200Response> localVarResponse = await GetJourneyAnalyticsWithHttpInfoAsync(spaceId, containerId, varVersion, fromDate, toDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Journey Analytics Get Analytics for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="fromDate">This parameter exists in alpha.</param>
        /// <param name="toDate">This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJourneyAnalytics200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetJourneyAnalytics200Response>> GetJourneyAnalyticsWithHttpInfoAsync(string spaceId, string containerId, decimal varVersion, string fromDate, string? toDate = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->GetJourneyAnalytics");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->GetJourneyAnalytics");
            }

            // verify the required parameter 'fromDate' is set
            if (fromDate == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'fromDate' when calling JourneysApi->GetJourneyAnalytics");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "fromDate", fromDate));
            if (toDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "toDate", toDate));
            }

            localVarRequestOptions.Operation = "JourneysApi.GetJourneyAnalytics";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJourneyAnalytics200Response>("/spaces/{spaceId}/journeys/{containerId}/analytics", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJourneyAnalytics", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Journey from Space Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RemoveJourneyFromSpace200Response</returns>
        public RemoveJourneyFromSpace200Response RemoveJourneyFromSpace(string spaceId, string containerId, decimal varVersion, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RemoveJourneyFromSpace200Response> localVarResponse = RemoveJourneyFromSpaceWithHttpInfo(spaceId, containerId, varVersion);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Journey from Space Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RemoveJourneyFromSpace200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RemoveJourneyFromSpace200Response> RemoveJourneyFromSpaceWithHttpInfo(string spaceId, string containerId, decimal varVersion, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->RemoveJourneyFromSpace");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->RemoveJourneyFromSpace");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));

            localVarRequestOptions.Operation = "JourneysApi.RemoveJourneyFromSpace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveJourneyFromSpace200Response>("/spaces/{spaceId}/journeys/{containerId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveJourneyFromSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Journey from Space Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveJourneyFromSpace200Response</returns>
        public async System.Threading.Tasks.Task<RemoveJourneyFromSpace200Response> RemoveJourneyFromSpaceAsync(string spaceId, string containerId, decimal varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RemoveJourneyFromSpace200Response> localVarResponse = await RemoveJourneyFromSpaceWithHttpInfoAsync(spaceId, containerId, varVersion, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Journey from Space Delete a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="varVersion">The journey version.  This parameter exists in alpha.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveJourneyFromSpace200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RemoveJourneyFromSpace200Response>> RemoveJourneyFromSpaceWithHttpInfoAsync(string spaceId, string containerId, decimal varVersion, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->RemoveJourneyFromSpace");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->RemoveJourneyFromSpace");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "version", varVersion));

            localVarRequestOptions.Operation = "JourneysApi.RemoveJourneyFromSpace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveJourneyFromSpace200Response>("/spaces/{spaceId}/journeys/{containerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveJourneyFromSpace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Steps for Journey Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ReplaceStepsForJourney200Response</returns>
        public ReplaceStepsForJourney200Response ReplaceStepsForJourney(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceStepsForJourney200Response> localVarResponse = ReplaceStepsForJourneyWithHttpInfo(spaceId, containerId, replaceStepsForJourneyAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Steps for Journey Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ReplaceStepsForJourney200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ReplaceStepsForJourney200Response> ReplaceStepsForJourneyWithHttpInfo(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->ReplaceStepsForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->ReplaceStepsForJourney");
            }

            // verify the required parameter 'replaceStepsForJourneyAlphaInput' is set
            if (replaceStepsForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceStepsForJourneyAlphaInput' when calling JourneysApi->ReplaceStepsForJourney");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = replaceStepsForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.ReplaceStepsForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<ReplaceStepsForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/steps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceStepsForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Replace Steps for Journey Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplaceStepsForJourney200Response</returns>
        public async System.Threading.Tasks.Task<ReplaceStepsForJourney200Response> ReplaceStepsForJourneyAsync(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ReplaceStepsForJourney200Response> localVarResponse = await ReplaceStepsForJourneyWithHttpInfoAsync(spaceId, containerId, replaceStepsForJourneyAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Steps for Journey Replace steps for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="replaceStepsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplaceStepsForJourney200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ReplaceStepsForJourney200Response>> ReplaceStepsForJourneyWithHttpInfoAsync(string spaceId, string containerId, ReplaceStepsForJourneyAlphaInput replaceStepsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->ReplaceStepsForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->ReplaceStepsForJourney");
            }

            // verify the required parameter 'replaceStepsForJourneyAlphaInput' is set
            if (replaceStepsForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'replaceStepsForJourneyAlphaInput' when calling JourneysApi->ReplaceStepsForJourney");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = replaceStepsForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.ReplaceStepsForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ReplaceStepsForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/steps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplaceStepsForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Destinations for Journey Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateDestinationsForJourney200Response</returns>
        public UpdateDestinationsForJourney200Response UpdateDestinationsForJourney(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateDestinationsForJourney200Response> localVarResponse = UpdateDestinationsForJourneyWithHttpInfo(spaceId, containerId, updateDestinationsForJourneyAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Destinations for Journey Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateDestinationsForJourney200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateDestinationsForJourney200Response> UpdateDestinationsForJourneyWithHttpInfo(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->UpdateDestinationsForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->UpdateDestinationsForJourney");
            }

            // verify the required parameter 'updateDestinationsForJourneyAlphaInput' is set
            if (updateDestinationsForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateDestinationsForJourneyAlphaInput' when calling JourneysApi->UpdateDestinationsForJourney");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = updateDestinationsForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.UpdateDestinationsForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateDestinationsForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/destinations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDestinationsForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Destinations for Journey Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateDestinationsForJourney200Response</returns>
        public async System.Threading.Tasks.Task<UpdateDestinationsForJourney200Response> UpdateDestinationsForJourneyAsync(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateDestinationsForJourney200Response> localVarResponse = await UpdateDestinationsForJourneyWithHttpInfoAsync(spaceId, containerId, updateDestinationsForJourneyAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Destinations for Journey Update DESTINATIONS for a journey  • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateDestinationsForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateDestinationsForJourney200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateDestinationsForJourney200Response>> UpdateDestinationsForJourneyWithHttpInfoAsync(string spaceId, string containerId, UpdateDestinationsForJourneyAlphaInput updateDestinationsForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->UpdateDestinationsForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->UpdateDestinationsForJourney");
            }

            // verify the required parameter 'updateDestinationsForJourneyAlphaInput' is set
            if (updateDestinationsForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateDestinationsForJourneyAlphaInput' when calling JourneysApi->UpdateDestinationsForJourney");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = updateDestinationsForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.UpdateDestinationsForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateDestinationsForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDestinationsForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Status for Journey Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateStatusForJourney200Response</returns>
        public UpdateStatusForJourney200Response UpdateStatusForJourney(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateStatusForJourney200Response> localVarResponse = UpdateStatusForJourneyWithHttpInfo(spaceId, containerId, updateStatusForJourneyAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Status for Journey Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateStatusForJourney200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateStatusForJourney200Response> UpdateStatusForJourneyWithHttpInfo(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->UpdateStatusForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->UpdateStatusForJourney");
            }

            // verify the required parameter 'updateStatusForJourneyAlphaInput' is set
            if (updateStatusForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateStatusForJourneyAlphaInput' when calling JourneysApi->UpdateStatusForJourney");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = updateStatusForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.UpdateStatusForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateStatusForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/status", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStatusForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Status for Journey Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateStatusForJourney200Response</returns>
        public async System.Threading.Tasks.Task<UpdateStatusForJourney200Response> UpdateStatusForJourneyAsync(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateStatusForJourney200Response> localVarResponse = await UpdateStatusForJourneyWithHttpInfoAsync(spaceId, containerId, updateStatusForJourneyAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Status for Journey Update status of the journey   • This endpoint is in **Alpha** testing.  Please submit any feedback by sending an email to friends@segment.com.   • In order to successfully call this endpoint, the specified Workspace needs to have the Journeys feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="spaceId"></param>
        /// <param name="containerId"></param>
        /// <param name="updateStatusForJourneyAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateStatusForJourney200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateStatusForJourney200Response>> UpdateStatusForJourneyWithHttpInfoAsync(string spaceId, string containerId, UpdateStatusForJourneyAlphaInput updateStatusForJourneyAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'spaceId' is set
            if (spaceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'spaceId' when calling JourneysApi->UpdateStatusForJourney");
            }

            // verify the required parameter 'containerId' is set
            if (containerId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'containerId' when calling JourneysApi->UpdateStatusForJourney");
            }

            // verify the required parameter 'updateStatusForJourneyAlphaInput' is set
            if (updateStatusForJourneyAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateStatusForJourneyAlphaInput' when calling JourneysApi->UpdateStatusForJourney");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("spaceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(spaceId)); // path parameter
            localVarRequestOptions.PathParameters.Add("containerId", Segment.PublicApi.Client.ClientUtils.ParameterToString(containerId)); // path parameter
            localVarRequestOptions.Data = updateStatusForJourneyAlphaInput;

            localVarRequestOptions.Operation = "JourneysApi.UpdateStatusForJourney";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateStatusForJourney200Response>("/spaces/{spaceId}/journeys/{containerId}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateStatusForJourney", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
