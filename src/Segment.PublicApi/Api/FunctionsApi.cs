/*
 * Segment Public API
 *
 * The Segment Public API helps you manage your Segment Workspaces and its resources. You can use the API to perform CRUD (create, read, update, delete) operations at no extra charge. This includes working with resources such as Sources, Destinations, Warehouses, Tracking Plans, and the Segment Destinations and Sources Catalogs.  All CRUD endpoints in the API follow REST conventions and use standard HTTP methods. Different URL endpoints represent different resources in a Workspace.  See the next sections for more information on how to use the Segment Public API. 
 *
 * The version of the OpenAPI document: 61.1.4
 * Contact: friends@segment.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Segment.PublicApi.Client;
using Segment.PublicApi.Model;

namespace Segment.PublicApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Function
        /// </summary>
        /// <remarks>
        /// Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFunction200Response</returns>
        CreateFunction200Response CreateFunction(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0);

        /// <summary>
        /// Create Function
        /// </summary>
        /// <remarks>
        /// Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFunction200Response</returns>
        ApiResponse<CreateFunction200Response> CreateFunctionWithHttpInfo(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0);
        /// <summary>
        /// Create Function Deployment
        /// </summary>
        /// <remarks>
        /// Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFunctionDeployment200Response</returns>
        CreateFunctionDeployment200Response CreateFunctionDeployment(string functionId, int operationIndex = 0);

        /// <summary>
        /// Create Function Deployment
        /// </summary>
        /// <remarks>
        /// Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFunctionDeployment200Response</returns>
        ApiResponse<CreateFunctionDeployment200Response> CreateFunctionDeploymentWithHttpInfo(string functionId, int operationIndex = 0);
        /// <summary>
        /// Create Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateInsertFunctionInstance200Response</returns>
        CreateInsertFunctionInstance200Response CreateInsertFunctionInstance(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Create Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateInsertFunctionInstance200Response</returns>
        ApiResponse<CreateInsertFunctionInstance200Response> CreateInsertFunctionInstanceWithHttpInfo(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Delete Function
        /// </summary>
        /// <remarks>
        /// Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteFunction200Response</returns>
        DeleteFunction200Response DeleteFunction(string functionId, int operationIndex = 0);

        /// <summary>
        /// Delete Function
        /// </summary>
        /// <remarks>
        /// Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteFunction200Response</returns>
        ApiResponse<DeleteFunction200Response> DeleteFunctionWithHttpInfo(string functionId, int operationIndex = 0);
        /// <summary>
        /// Delete Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteInsertFunctionInstance200Response</returns>
        DeleteInsertFunctionInstance200Response DeleteInsertFunctionInstance(string instanceId, int operationIndex = 0);

        /// <summary>
        /// Delete Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteInsertFunctionInstance200Response</returns>
        ApiResponse<DeleteInsertFunctionInstance200Response> DeleteInsertFunctionInstanceWithHttpInfo(string instanceId, int operationIndex = 0);
        /// <summary>
        /// Get Function
        /// </summary>
        /// <remarks>
        /// Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFunction200Response</returns>
        GetFunction200Response GetFunction(string functionId, int operationIndex = 0);

        /// <summary>
        /// Get Function
        /// </summary>
        /// <remarks>
        /// Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFunction200Response</returns>
        ApiResponse<GetFunction200Response> GetFunctionWithHttpInfo(string functionId, int operationIndex = 0);
        /// <summary>
        /// Get Function Version
        /// </summary>
        /// <remarks>
        /// Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFunctionVersion200Response</returns>
        GetFunctionVersion200Response GetFunctionVersion(string functionId, string versionId, int operationIndex = 0);

        /// <summary>
        /// Get Function Version
        /// </summary>
        /// <remarks>
        /// Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFunctionVersion200Response</returns>
        ApiResponse<GetFunctionVersion200Response> GetFunctionVersionWithHttpInfo(string functionId, string versionId, int operationIndex = 0);
        /// <summary>
        /// Get Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInsertFunctionInstance200Response</returns>
        GetInsertFunctionInstance200Response GetInsertFunctionInstance(string instanceId, int operationIndex = 0);

        /// <summary>
        /// Get Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInsertFunctionInstance200Response</returns>
        ApiResponse<GetInsertFunctionInstance200Response> GetInsertFunctionInstanceWithHttpInfo(string instanceId, int operationIndex = 0);
        /// <summary>
        /// List Function Versions
        /// </summary>
        /// <remarks>
        /// Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFunctionVersions200Response</returns>
        ListFunctionVersions200Response ListFunctionVersions(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Function Versions
        /// </summary>
        /// <remarks>
        /// Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFunctionVersions200Response</returns>
        ApiResponse<ListFunctionVersions200Response> ListFunctionVersionsWithHttpInfo(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFunctions200Response</returns>
        ListFunctions200Response ListFunctions(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFunctions200Response</returns>
        ApiResponse<ListFunctions200Response> ListFunctionsWithHttpInfo(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// List Insert Function Instances
        /// </summary>
        /// <remarks>
        /// Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListInsertFunctionInstances200Response</returns>
        ListInsertFunctionInstances200Response ListInsertFunctionInstances(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);

        /// <summary>
        /// List Insert Function Instances
        /// </summary>
        /// <remarks>
        /// Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListInsertFunctionInstances200Response</returns>
        ApiResponse<ListInsertFunctionInstances200Response> ListInsertFunctionInstancesWithHttpInfo(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0);
        /// <summary>
        /// Restore Function Version
        /// </summary>
        /// <remarks>
        /// Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestoreFunctionVersion200Response</returns>
        RestoreFunctionVersion200Response RestoreFunctionVersion(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Restore Function Version
        /// </summary>
        /// <remarks>
        /// Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestoreFunctionVersion200Response</returns>
        ApiResponse<RestoreFunctionVersion200Response> RestoreFunctionVersionWithHttpInfo(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0);
        /// <summary>
        /// Update Function
        /// </summary>
        /// <remarks>
        /// Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateFunction200Response</returns>
        UpdateFunction200Response UpdateFunction(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0);

        /// <summary>
        /// Update Function
        /// </summary>
        /// <remarks>
        /// Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateFunction200Response</returns>
        ApiResponse<UpdateFunction200Response> UpdateFunctionWithHttpInfo(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0);
        /// <summary>
        /// Update Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateInsertFunctionInstance200Response</returns>
        UpdateInsertFunctionInstance200Response UpdateInsertFunctionInstance(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0);

        /// <summary>
        /// Update Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateInsertFunctionInstance200Response</returns>
        ApiResponse<UpdateInsertFunctionInstance200Response> UpdateInsertFunctionInstanceWithHttpInfo(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Function
        /// </summary>
        /// <remarks>
        /// Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFunction200Response</returns>
        System.Threading.Tasks.Task<CreateFunction200Response> CreateFunctionAsync(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Function
        /// </summary>
        /// <remarks>
        /// Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFunction200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFunction200Response>> CreateFunctionWithHttpInfoAsync(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Function Deployment
        /// </summary>
        /// <remarks>
        /// Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFunctionDeployment200Response</returns>
        System.Threading.Tasks.Task<CreateFunctionDeployment200Response> CreateFunctionDeploymentAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Function Deployment
        /// </summary>
        /// <remarks>
        /// Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFunctionDeployment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateFunctionDeployment200Response>> CreateFunctionDeploymentWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInsertFunctionInstance200Response</returns>
        System.Threading.Tasks.Task<CreateInsertFunctionInstance200Response> CreateInsertFunctionInstanceAsync(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInsertFunctionInstance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInsertFunctionInstance200Response>> CreateInsertFunctionInstanceWithHttpInfoAsync(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Function
        /// </summary>
        /// <remarks>
        /// Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteFunction200Response</returns>
        System.Threading.Tasks.Task<DeleteFunction200Response> DeleteFunctionAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Function
        /// </summary>
        /// <remarks>
        /// Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteFunction200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteFunction200Response>> DeleteFunctionWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInsertFunctionInstance200Response</returns>
        System.Threading.Tasks.Task<DeleteInsertFunctionInstance200Response> DeleteInsertFunctionInstanceAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInsertFunctionInstance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteInsertFunctionInstance200Response>> DeleteInsertFunctionInstanceWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Function
        /// </summary>
        /// <remarks>
        /// Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFunction200Response</returns>
        System.Threading.Tasks.Task<GetFunction200Response> GetFunctionAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Function
        /// </summary>
        /// <remarks>
        /// Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFunction200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFunction200Response>> GetFunctionWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Function Version
        /// </summary>
        /// <remarks>
        /// Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFunctionVersion200Response</returns>
        System.Threading.Tasks.Task<GetFunctionVersion200Response> GetFunctionVersionAsync(string functionId, string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Function Version
        /// </summary>
        /// <remarks>
        /// Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFunctionVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFunctionVersion200Response>> GetFunctionVersionWithHttpInfoAsync(string functionId, string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInsertFunctionInstance200Response</returns>
        System.Threading.Tasks.Task<GetInsertFunctionInstance200Response> GetInsertFunctionInstanceAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInsertFunctionInstance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInsertFunctionInstance200Response>> GetInsertFunctionInstanceWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Function Versions
        /// </summary>
        /// <remarks>
        /// Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFunctionVersions200Response</returns>
        System.Threading.Tasks.Task<ListFunctionVersions200Response> ListFunctionVersionsAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Function Versions
        /// </summary>
        /// <remarks>
        /// Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFunctionVersions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFunctionVersions200Response>> ListFunctionVersionsWithHttpInfoAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFunctions200Response</returns>
        System.Threading.Tasks.Task<ListFunctions200Response> ListFunctionsAsync(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Functions
        /// </summary>
        /// <remarks>
        /// Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFunctions200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListFunctions200Response>> ListFunctionsWithHttpInfoAsync(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Insert Function Instances
        /// </summary>
        /// <remarks>
        /// Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListInsertFunctionInstances200Response</returns>
        System.Threading.Tasks.Task<ListInsertFunctionInstances200Response> ListInsertFunctionInstancesAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Insert Function Instances
        /// </summary>
        /// <remarks>
        /// Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListInsertFunctionInstances200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListInsertFunctionInstances200Response>> ListInsertFunctionInstancesWithHttpInfoAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Restore Function Version
        /// </summary>
        /// <remarks>
        /// Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestoreFunctionVersion200Response</returns>
        System.Threading.Tasks.Task<RestoreFunctionVersion200Response> RestoreFunctionVersionAsync(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Restore Function Version
        /// </summary>
        /// <remarks>
        /// Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestoreFunctionVersion200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RestoreFunctionVersion200Response>> RestoreFunctionVersionWithHttpInfoAsync(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Function
        /// </summary>
        /// <remarks>
        /// Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateFunction200Response</returns>
        System.Threading.Tasks.Task<UpdateFunction200Response> UpdateFunctionAsync(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Function
        /// </summary>
        /// <remarks>
        /// Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateFunction200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateFunction200Response>> UpdateFunctionWithHttpInfoAsync(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInsertFunctionInstance200Response</returns>
        System.Threading.Tasks.Task<UpdateInsertFunctionInstance200Response> UpdateInsertFunctionInstanceAsync(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Insert Function Instance
        /// </summary>
        /// <remarks>
        /// Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </remarks>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInsertFunctionInstance200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateInsertFunctionInstance200Response>> UpdateInsertFunctionInstanceWithHttpInfoAsync(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFunctionsApi : IFunctionsApiSync, IFunctionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FunctionsApi : IFunctionsApi
    {
        private Segment.PublicApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FunctionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FunctionsApi(string basePath)
        {
            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                new Segment.PublicApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FunctionsApi(Segment.PublicApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Segment.PublicApi.Client.Configuration.MergeConfigurations(
                Segment.PublicApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Segment.PublicApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FunctionsApi(Segment.PublicApi.Client.ISynchronousClient client, Segment.PublicApi.Client.IAsynchronousClient asyncClient, Segment.PublicApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Segment.PublicApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Segment.PublicApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Segment.PublicApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Segment.PublicApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Segment.PublicApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Function Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFunction200Response</returns>
        public CreateFunction200Response CreateFunction(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateFunction200Response> localVarResponse = CreateFunctionWithHttpInfo(createFunctionV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Function Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFunction200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateFunction200Response> CreateFunctionWithHttpInfo(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'createFunctionV1Input' is set
            if (createFunctionV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createFunctionV1Input' when calling FunctionsApi->CreateFunction");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunctionV1Input;

            localVarRequestOptions.Operation = "FunctionsApi.CreateFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFunction200Response>("/functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Function Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFunction200Response</returns>
        public async System.Threading.Tasks.Task<CreateFunction200Response> CreateFunctionAsync(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateFunction200Response> localVarResponse = await CreateFunctionWithHttpInfoAsync(createFunctionV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Function Creates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFunction200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateFunction200Response>> CreateFunctionWithHttpInfoAsync(CreateFunctionV1Input createFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createFunctionV1Input' is set
            if (createFunctionV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createFunctionV1Input' when calling FunctionsApi->CreateFunction");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createFunctionV1Input;

            localVarRequestOptions.Operation = "FunctionsApi.CreateFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFunction200Response>("/functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Function Deployment Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateFunctionDeployment200Response</returns>
        public CreateFunctionDeployment200Response CreateFunctionDeployment(string functionId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateFunctionDeployment200Response> localVarResponse = CreateFunctionDeploymentWithHttpInfo(functionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Function Deployment Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateFunctionDeployment200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateFunctionDeployment200Response> CreateFunctionDeploymentWithHttpInfo(string functionId, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->CreateFunctionDeployment");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.CreateFunctionDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateFunctionDeployment200Response>("/functions/{functionId}/deploy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunctionDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Function Deployment Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateFunctionDeployment200Response</returns>
        public async System.Threading.Tasks.Task<CreateFunctionDeployment200Response> CreateFunctionDeploymentAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateFunctionDeployment200Response> localVarResponse = await CreateFunctionDeploymentWithHttpInfoAsync(functionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Function Deployment Deploys a Function. Only applicable to Source Function instances.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateFunctionDeployment200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateFunctionDeployment200Response>> CreateFunctionDeploymentWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->CreateFunctionDeployment");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.CreateFunctionDeployment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateFunctionDeployment200Response>("/functions/{functionId}/deploy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateFunctionDeployment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Insert Function Instance Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateInsertFunctionInstance200Response</returns>
        public CreateInsertFunctionInstance200Response CreateInsertFunctionInstance(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<CreateInsertFunctionInstance200Response> localVarResponse = CreateInsertFunctionInstanceWithHttpInfo(createInsertFunctionInstanceAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Insert Function Instance Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateInsertFunctionInstance200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<CreateInsertFunctionInstance200Response> CreateInsertFunctionInstanceWithHttpInfo(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'createInsertFunctionInstanceAlphaInput' is set
            if (createInsertFunctionInstanceAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createInsertFunctionInstanceAlphaInput' when calling FunctionsApi->CreateInsertFunctionInstance");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInsertFunctionInstanceAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.CreateInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateInsertFunctionInstance200Response>("/insert-function-instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Insert Function Instance Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateInsertFunctionInstance200Response</returns>
        public async System.Threading.Tasks.Task<CreateInsertFunctionInstance200Response> CreateInsertFunctionInstanceAsync(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<CreateInsertFunctionInstance200Response> localVarResponse = await CreateInsertFunctionInstanceWithHttpInfoAsync(createInsertFunctionInstanceAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Insert Function Instance Creates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateInsertFunctionInstance200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<CreateInsertFunctionInstance200Response>> CreateInsertFunctionInstanceWithHttpInfoAsync(CreateInsertFunctionInstanceAlphaInput createInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createInsertFunctionInstanceAlphaInput' is set
            if (createInsertFunctionInstanceAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'createInsertFunctionInstanceAlphaInput' when calling FunctionsApi->CreateInsertFunctionInstance");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createInsertFunctionInstanceAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.CreateInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateInsertFunctionInstance200Response>("/insert-function-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Function Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteFunction200Response</returns>
        public DeleteFunction200Response DeleteFunction(string functionId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteFunction200Response> localVarResponse = DeleteFunctionWithHttpInfo(functionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Function Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteFunction200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteFunction200Response> DeleteFunctionWithHttpInfo(string functionId, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->DeleteFunction");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Function Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteFunction200Response</returns>
        public async System.Threading.Tasks.Task<DeleteFunction200Response> DeleteFunctionAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteFunction200Response> localVarResponse = await DeleteFunctionWithHttpInfoAsync(functionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Function Deletes a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteFunction200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteFunction200Response>> DeleteFunctionWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->DeleteFunction");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Insert Function Instance Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteInsertFunctionInstance200Response</returns>
        public DeleteInsertFunctionInstance200Response DeleteInsertFunctionInstance(string instanceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<DeleteInsertFunctionInstance200Response> localVarResponse = DeleteInsertFunctionInstanceWithHttpInfo(instanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Insert Function Instance Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteInsertFunctionInstance200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<DeleteInsertFunctionInstance200Response> DeleteInsertFunctionInstanceWithHttpInfo(string instanceId, int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->DeleteInsertFunctionInstance");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Insert Function Instance Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteInsertFunctionInstance200Response</returns>
        public async System.Threading.Tasks.Task<DeleteInsertFunctionInstance200Response> DeleteInsertFunctionInstanceAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<DeleteInsertFunctionInstance200Response> localVarResponse = await DeleteInsertFunctionInstanceWithHttpInfoAsync(instanceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Insert Function Instance Deletes an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteInsertFunctionInstance200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<DeleteInsertFunctionInstance200Response>> DeleteInsertFunctionInstanceWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->DeleteInsertFunctionInstance");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.DeleteInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Function Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFunction200Response</returns>
        public GetFunction200Response GetFunction(string functionId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetFunction200Response> localVarResponse = GetFunctionWithHttpInfo(functionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Function Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFunction200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetFunction200Response> GetFunctionWithHttpInfo(string functionId, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetFunction");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Function Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFunction200Response</returns>
        public async System.Threading.Tasks.Task<GetFunction200Response> GetFunctionAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetFunction200Response> localVarResponse = await GetFunctionWithHttpInfoAsync(functionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Function Gets a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFunction200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetFunction200Response>> GetFunctionWithHttpInfoAsync(string functionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetFunction");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Function Version Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetFunctionVersion200Response</returns>
        public GetFunctionVersion200Response GetFunctionVersion(string functionId, string versionId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetFunctionVersion200Response> localVarResponse = GetFunctionVersionWithHttpInfo(functionId, versionId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Function Version Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetFunctionVersion200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetFunctionVersion200Response> GetFunctionVersionWithHttpInfo(string functionId, string versionId, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetFunctionVersion");
            }

            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'versionId' when calling FunctionsApi->GetFunctionVersion");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetFunctionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFunctionVersion200Response>("/functions/{functionId}/versions/{versionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFunctionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Function Version Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFunctionVersion200Response</returns>
        public async System.Threading.Tasks.Task<GetFunctionVersion200Response> GetFunctionVersionAsync(string functionId, string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetFunctionVersion200Response> localVarResponse = await GetFunctionVersionWithHttpInfoAsync(functionId, versionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Function Version Gets a Function version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="versionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFunctionVersion200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetFunctionVersion200Response>> GetFunctionVersionWithHttpInfoAsync(string functionId, string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->GetFunctionVersion");
            }

            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'versionId' when calling FunctionsApi->GetFunctionVersion");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.PathParameters.Add("versionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetFunctionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFunctionVersion200Response>("/functions/{functionId}/versions/{versionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFunctionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Insert Function Instance Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetInsertFunctionInstance200Response</returns>
        public GetInsertFunctionInstance200Response GetInsertFunctionInstance(string instanceId, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<GetInsertFunctionInstance200Response> localVarResponse = GetInsertFunctionInstanceWithHttpInfo(instanceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Insert Function Instance Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetInsertFunctionInstance200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<GetInsertFunctionInstance200Response> GetInsertFunctionInstanceWithHttpInfo(string instanceId, int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->GetInsertFunctionInstance");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Insert Function Instance Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetInsertFunctionInstance200Response</returns>
        public async System.Threading.Tasks.Task<GetInsertFunctionInstance200Response> GetInsertFunctionInstanceAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<GetInsertFunctionInstance200Response> localVarResponse = await GetInsertFunctionInstanceWithHttpInfoAsync(instanceId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Insert Function Instance Gets an insert Function instance.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetInsertFunctionInstance200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<GetInsertFunctionInstance200Response>> GetInsertFunctionInstanceWithHttpInfoAsync(string instanceId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->GetInsertFunctionInstance");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter

            localVarRequestOptions.Operation = "FunctionsApi.GetInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Function Versions Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFunctionVersions200Response</returns>
        public ListFunctionVersions200Response ListFunctionVersions(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListFunctionVersions200Response> localVarResponse = ListFunctionVersionsWithHttpInfo(functionId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Function Versions Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFunctionVersions200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListFunctionVersions200Response> ListFunctionVersionsWithHttpInfo(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->ListFunctionVersions");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "FunctionsApi.ListFunctionVersions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFunctionVersions200Response>("/functions/{functionId}/versions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFunctionVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Function Versions Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFunctionVersions200Response</returns>
        public async System.Threading.Tasks.Task<ListFunctionVersions200Response> ListFunctionVersionsAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListFunctionVersions200Response> localVarResponse = await ListFunctionVersionsWithHttpInfoAsync(functionId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Function Versions Lists versions for a Function in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFunctionVersions200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListFunctionVersions200Response>> ListFunctionVersionsWithHttpInfoAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->ListFunctionVersions");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }

            localVarRequestOptions.Operation = "FunctionsApi.ListFunctionVersions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFunctionVersions200Response>("/functions/{functionId}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFunctionVersions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Functions Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListFunctions200Response</returns>
        public ListFunctions200Response ListFunctions(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListFunctions200Response> localVarResponse = ListFunctionsWithHttpInfo(resourceType, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Functions Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListFunctions200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListFunctions200Response> ListFunctionsWithHttpInfo(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'resourceType' when calling FunctionsApi->ListFunctions");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "resourceType", resourceType));

            localVarRequestOptions.Operation = "FunctionsApi.ListFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListFunctions200Response>("/functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Functions Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListFunctions200Response</returns>
        public async System.Threading.Tasks.Task<ListFunctions200Response> ListFunctionsAsync(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListFunctions200Response> localVarResponse = await ListFunctionsWithHttpInfoAsync(resourceType, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Functions Lists all Functions in a Workspace.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="resourceType">The Function type.  Config API note: equal to &#x60;type&#x60;.  This parameter exists in v1.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in v1. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListFunctions200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListFunctions200Response>> ListFunctionsWithHttpInfoAsync(string resourceType, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'resourceType' is set
            if (resourceType == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'resourceType' when calling FunctionsApi->ListFunctions");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "resourceType", resourceType));

            localVarRequestOptions.Operation = "FunctionsApi.ListFunctions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListFunctions200Response>("/functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListFunctions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Insert Function Instances Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListInsertFunctionInstances200Response</returns>
        public ListInsertFunctionInstances200Response ListInsertFunctionInstances(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<ListInsertFunctionInstances200Response> localVarResponse = ListInsertFunctionInstancesWithHttpInfo(functionId, pagination);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Insert Function Instances Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListInsertFunctionInstances200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<ListInsertFunctionInstances200Response> ListInsertFunctionInstancesWithHttpInfo(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->ListInsertFunctionInstances");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "functionId", functionId));

            localVarRequestOptions.Operation = "FunctionsApi.ListInsertFunctionInstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListInsertFunctionInstances200Response>("/insert-function-instances", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsertFunctionInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Insert Function Instances Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListInsertFunctionInstances200Response</returns>
        public async System.Threading.Tasks.Task<ListInsertFunctionInstances200Response> ListInsertFunctionInstancesAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<ListInsertFunctionInstances200Response> localVarResponse = await ListInsertFunctionInstancesWithHttpInfoAsync(functionId, pagination, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Insert Function Instances Lists all insert Function instances connected to the given insert Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId">The insert Function class id to lookup.  This parameter exists in alpha.</param>
        /// <param name="pagination">Pagination parameters.  This parameter exists in alpha. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListInsertFunctionInstances200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<ListInsertFunctionInstances200Response>> ListInsertFunctionInstancesWithHttpInfoAsync(string functionId, PaginationInput? pagination = default(PaginationInput?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->ListInsertFunctionInstances");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (pagination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "pagination", pagination));
            }
            localVarRequestOptions.QueryParameters.Add(Segment.PublicApi.Client.ClientUtils.ParameterToMultiMap("", "functionId", functionId));

            localVarRequestOptions.Operation = "FunctionsApi.ListInsertFunctionInstances";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListInsertFunctionInstances200Response>("/insert-function-instances", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListInsertFunctionInstances", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Function Version Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RestoreFunctionVersion200Response</returns>
        public RestoreFunctionVersion200Response RestoreFunctionVersion(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<RestoreFunctionVersion200Response> localVarResponse = RestoreFunctionVersionWithHttpInfo(functionId, restoreFunctionVersionAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore Function Version Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RestoreFunctionVersion200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<RestoreFunctionVersion200Response> RestoreFunctionVersionWithHttpInfo(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->RestoreFunctionVersion");
            }

            // verify the required parameter 'restoreFunctionVersionAlphaInput' is set
            if (restoreFunctionVersionAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'restoreFunctionVersionAlphaInput' when calling FunctionsApi->RestoreFunctionVersion");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.Data = restoreFunctionVersionAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.RestoreFunctionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RestoreFunctionVersion200Response>("/functions/{functionId}/versions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFunctionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Restore Function Version Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RestoreFunctionVersion200Response</returns>
        public async System.Threading.Tasks.Task<RestoreFunctionVersion200Response> RestoreFunctionVersionAsync(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<RestoreFunctionVersion200Response> localVarResponse = await RestoreFunctionVersionWithHttpInfoAsync(functionId, restoreFunctionVersionAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Restore Function Version Restore an old Function version as the latest version.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="restoreFunctionVersionAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RestoreFunctionVersion200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<RestoreFunctionVersion200Response>> RestoreFunctionVersionWithHttpInfoAsync(string functionId, RestoreFunctionVersionAlphaInput restoreFunctionVersionAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->RestoreFunctionVersion");
            }

            // verify the required parameter 'restoreFunctionVersionAlphaInput' is set
            if (restoreFunctionVersionAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'restoreFunctionVersionAlphaInput' when calling FunctionsApi->RestoreFunctionVersion");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.Data = restoreFunctionVersionAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.RestoreFunctionVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RestoreFunctionVersion200Response>("/functions/{functionId}/versions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RestoreFunctionVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Function Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateFunction200Response</returns>
        public UpdateFunction200Response UpdateFunction(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateFunction200Response> localVarResponse = UpdateFunctionWithHttpInfo(functionId, updateFunctionV1Input);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Function Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateFunction200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateFunction200Response> UpdateFunctionWithHttpInfo(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0)
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->UpdateFunction");
            }

            // verify the required parameter 'updateFunctionV1Input' is set
            if (updateFunctionV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateFunctionV1Input' when calling FunctionsApi->UpdateFunction");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/vnd.segment.v1+json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.Data = updateFunctionV1Input;

            localVarRequestOptions.Operation = "FunctionsApi.UpdateFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Function Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateFunction200Response</returns>
        public async System.Threading.Tasks.Task<UpdateFunction200Response> UpdateFunctionAsync(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateFunction200Response> localVarResponse = await UpdateFunctionWithHttpInfoAsync(functionId, updateFunctionV1Input, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Function Updates a Function.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.  Config API omitted fields: - &#x60;updateMask&#x60; 
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="functionId"></param>
        /// <param name="updateFunctionV1Input"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateFunction200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateFunction200Response>> UpdateFunctionWithHttpInfoAsync(string functionId, UpdateFunctionV1Input updateFunctionV1Input, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'functionId' is set
            if (functionId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'functionId' when calling FunctionsApi->UpdateFunction");
            }

            // verify the required parameter 'updateFunctionV1Input' is set
            if (updateFunctionV1Input == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateFunctionV1Input' when calling FunctionsApi->UpdateFunction");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/vnd.segment.v1+json", 
                "application/vnd.segment.v1beta+json", 
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1+json",
                "application/json",
                "application/vnd.segment.v1beta+json",
                "application/vnd.segment.v1alpha+json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("functionId", Segment.PublicApi.Client.ClientUtils.ParameterToString(functionId)); // path parameter
            localVarRequestOptions.Data = updateFunctionV1Input;

            localVarRequestOptions.Operation = "FunctionsApi.UpdateFunction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateFunction200Response>("/functions/{functionId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFunction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Insert Function Instance Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateInsertFunctionInstance200Response</returns>
        public UpdateInsertFunctionInstance200Response UpdateInsertFunctionInstance(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0)
        {
            Segment.PublicApi.Client.ApiResponse<UpdateInsertFunctionInstance200Response> localVarResponse = UpdateInsertFunctionInstanceWithHttpInfo(instanceId, updateInsertFunctionInstanceAlphaInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Insert Function Instance Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateInsertFunctionInstance200Response</returns>
        public Segment.PublicApi.Client.ApiResponse<UpdateInsertFunctionInstance200Response> UpdateInsertFunctionInstanceWithHttpInfo(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0)
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->UpdateInsertFunctionInstance");
            }

            // verify the required parameter 'updateInsertFunctionInstanceAlphaInput' is set
            if (updateInsertFunctionInstanceAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateInsertFunctionInstanceAlphaInput' when calling FunctionsApi->UpdateInsertFunctionInstance");
            }

            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.Data = updateInsertFunctionInstanceAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.UpdateInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Insert Function Instance Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateInsertFunctionInstance200Response</returns>
        public async System.Threading.Tasks.Task<UpdateInsertFunctionInstance200Response> UpdateInsertFunctionInstanceAsync(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Segment.PublicApi.Client.ApiResponse<UpdateInsertFunctionInstance200Response> localVarResponse = await UpdateInsertFunctionInstanceWithHttpInfoAsync(instanceId, updateInsertFunctionInstanceAlphaInput, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Insert Function Instance Updates an insert Function instance connected to the given Destination.    • In order to successfully call this endpoint, the specified Workspace needs to have the Functions feature enabled. Please reach out to your customer success manager for more information.
        /// </summary>
        /// <exception cref="Segment.PublicApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="instanceId"></param>
        /// <param name="updateInsertFunctionInstanceAlphaInput"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateInsertFunctionInstance200Response)</returns>
        public async System.Threading.Tasks.Task<Segment.PublicApi.Client.ApiResponse<UpdateInsertFunctionInstance200Response>> UpdateInsertFunctionInstanceWithHttpInfoAsync(string instanceId, UpdateInsertFunctionInstanceAlphaInput updateInsertFunctionInstanceAlphaInput, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'instanceId' is set
            if (instanceId == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'instanceId' when calling FunctionsApi->UpdateInsertFunctionInstance");
            }

            // verify the required parameter 'updateInsertFunctionInstanceAlphaInput' is set
            if (updateInsertFunctionInstanceAlphaInput == null)
            {
                throw new Segment.PublicApi.Client.ApiException(400, "Missing required parameter 'updateInsertFunctionInstanceAlphaInput' when calling FunctionsApi->UpdateInsertFunctionInstance");
            }


            Segment.PublicApi.Client.RequestOptions localVarRequestOptions = new Segment.PublicApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/vnd.segment.v1alpha+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/vnd.segment.v1alpha+json",
                "application/json"
            };

            var localVarContentType = Segment.PublicApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Segment.PublicApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("instanceId", Segment.PublicApi.Client.ClientUtils.ParameterToString(instanceId)); // path parameter
            localVarRequestOptions.Data = updateInsertFunctionInstanceAlphaInput;

            localVarRequestOptions.Operation = "FunctionsApi.UpdateInsertFunctionInstance";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateInsertFunctionInstance200Response>("/insert-function-instances/{instanceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateInsertFunctionInstance", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
